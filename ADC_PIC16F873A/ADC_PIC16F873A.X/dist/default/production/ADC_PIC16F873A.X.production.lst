

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 20:45:14 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F873A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	strings
   172  0002                     __pstrings:
   173  0002                     stringtab:
   174  0002                     __stringtab:
   175  0002                     stringcode:	
   176                           ;	String table - string pointers are 1 byte each
   177                           
   178  0002                     stringdir:
   179  0002  3000               	movlw	high stringdir
   180  0003  008A               	movwf	10
   181  0004  0804               	movf	4,w
   182  0005  0A84               	incf	4,f
   183  0006  0782               	addwf	2,f
   184  0007                     __stringbase:
   185  0007  3400               	retlw	0
   186  0008                     __end_of__stringtab:
   187  0008                     _dpowers:
   188  0008  3401               	retlw	1
   189  0009  3400               	retlw	0
   190  000A  340A               	retlw	10
   191  000B  3400               	retlw	0
   192  000C  3464               	retlw	100
   193  000D  3400               	retlw	0
   194  000E  34E8               	retlw	232
   195  000F  3403               	retlw	3
   196  0010  3410               	retlw	16
   197  0011  3427               	retlw	39
   198  0012                     __end_of_dpowers:
   199  001E                     _ADRESH	set	30
   200  001F                     _ADCON0bits	set	31
   201  0007                     _PORTCbits	set	7
   202  0005                     _PORTAbits	set	5
   203  009E                     _ADRESL	set	158
   204  009F                     _ADCON1bits	set	159
   205  0087                     _TRISCbits	set	135
   206  0085                     _TRISAbits	set	133
   207  0012                     STR_1:
   208  0012  3425               	retlw	37	;'%'
   209  0013  3464               	retlw	100	;'d'
   210  0014  3400               	retlw	0
   211                           
   212                           	psect	cinit
   213  07FD                     start_initialization:	
   214                           ; #config settings
   215                           
   216  07FD                     __initialization:
   217  07FD                     end_of_initialization:	
   218                           ;End of C runtime variable initialization code
   219                           
   220  07FD                     __end_of__initialization:
   221  07FD  0183               	clrf	3
   222  07FE  118A  2DD8         	ljmp	_main	;jump to C main() function
   223                           
   224                           	psect	cstackCOMMON
   225  0000                     __pcstackCOMMON:
   226  0000                     ??_LCD_write_nible:
   227  0000                     ??_ADC_init:	
   228                           ; 1 bytes @ 0x0
   229                           
   230                           
   231                           	psect	cstackBANK0
   232  0020                     __pcstackBANK0:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0020                     ?_LCD_write_nible:
   236  0020                     ?_LCD_cmd:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0020                     ?_LCD_init:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0020                     ?_LCD_char:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0020                     ?_LCD_write_text:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0020                     ?_ADC_init:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0020                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0020                     ?_ADC_read:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0020                     ?___lwdiv:	
   258                           ; 2 bytes @ 0x0
   259                           
   260  0020                     LCD_write_nible@nible:	
   261                           ; 2 bytes @ 0x0
   262                           
   263  0020                     ___lwdiv@divisor:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 2 bytes @ 0x0
   268  0020                     	ds	1
   269  0021                     ??_LCD_cmd:
   270  0021                     ??_LCD_char:	
   271                           ; 1 bytes @ 0x1
   272                           
   273                           
   274                           ; 1 bytes @ 0x1
   275  0021                     	ds	1
   276  0022                     ??_ADC_read:
   277  0022                     LCD_char@caracter:	
   278                           ; 1 bytes @ 0x2
   279                           
   280  0022                     ___lwdiv@dividend:	
   281                           ; 1 bytes @ 0x2
   282                           
   283                           
   284                           ; 2 bytes @ 0x2
   285  0022                     	ds	1
   286  0023                     ??_LCD_write_text:
   287  0023                     LCD_cmd@comando:	
   288                           ; 1 bytes @ 0x3
   289                           
   290  0023                     ADC_read@channel:	
   291                           ; 1 bytes @ 0x3
   292                           
   293                           
   294                           ; 1 bytes @ 0x3
   295  0023                     	ds	1
   296  0024                     ??_LCD_init:
   297  0024                     ??___lwdiv:	
   298                           ; 1 bytes @ 0x4
   299                           
   300  0024                     LCD_write_text@dato:	
   301                           ; 1 bytes @ 0x4
   302                           
   303                           
   304                           ; 1 bytes @ 0x4
   305  0024                     	ds	1
   306  0025                     ___lwdiv@quotient:
   307                           
   308                           ; 2 bytes @ 0x5
   309  0025                     	ds	2
   310  0027                     ___lwdiv@counter:
   311                           
   312                           ; 1 bytes @ 0x7
   313  0027                     	ds	1
   314  0028                     ?___lwmod:
   315  0028                     ___lwmod@divisor:	
   316                           ; 2 bytes @ 0x8
   317                           
   318                           
   319                           ; 2 bytes @ 0x8
   320  0028                     	ds	2
   321  002A                     ___lwmod@dividend:
   322                           
   323                           ; 2 bytes @ 0xA
   324  002A                     	ds	2
   325  002C                     ??___lwmod:
   326                           
   327                           ; 1 bytes @ 0xC
   328  002C                     	ds	1
   329  002D                     ___lwmod@counter:
   330                           
   331                           ; 1 bytes @ 0xD
   332  002D                     	ds	1
   333  002E                     ?_sprintf:
   334  002E                     sprintf@f:	
   335                           ; 2 bytes @ 0xE
   336                           
   337                           
   338                           ; 1 bytes @ 0xE
   339  002E                     	ds	3
   340  0031                     ??_sprintf:
   341                           
   342                           ; 1 bytes @ 0x11
   343  0031                     	ds	3
   344  0034                     sprintf@ap:
   345                           
   346                           ; 1 bytes @ 0x14
   347  0034                     	ds	1
   348  0035                     sprintf@flag:
   349                           
   350                           ; 1 bytes @ 0x15
   351  0035                     	ds	1
   352  0036                     sprintf@prec:
   353                           
   354                           ; 1 bytes @ 0x16
   355  0036                     	ds	1
   356  0037                     sprintf@val:
   357                           
   358                           ; 2 bytes @ 0x17
   359  0037                     	ds	2
   360  0039                     sprintf@sp:
   361                           
   362                           ; 1 bytes @ 0x19
   363  0039                     	ds	1
   364  003A                     sprintf@c:
   365                           
   366                           ; 1 bytes @ 0x1A
   367  003A                     	ds	1
   368  003B                     ??_main:
   369                           
   370                           ; 1 bytes @ 0x1B
   371  003B                     	ds	2
   372  003D                     main@str:
   373                           
   374                           ; 10 bytes @ 0x1D
   375  003D                     	ds	10
   376  0047                     main@dato:
   377                           
   378                           ; 2 bytes @ 0x27
   379  0047                     	ds	2
   380                           
   381                           	psect	maintext
   382  05D8                     __pmaintext:	
   383 ;;
   384 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   385 ;;
   386 ;; *************** function _main *****************
   387 ;; Defined at:
   388 ;;		line 27 in file "main.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;		None
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  str            10   29[BANK0 ] unsigned char [10]
   393 ;;  dato            2   39[BANK0 ] unsigned int 
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : B00/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1
   403 ;;      Params:         0       0       0
   404 ;;      Locals:         0      12       0
   405 ;;      Temps:          0       2       0
   406 ;;      Totals:         0      14       0
   407 ;;Total ram usage:       14 bytes
   408 ;; Hardware stack levels required when called: 3
   409 ;; This function calls:
   410 ;;		_ADC_init
   411 ;;		_ADC_read
   412 ;;		_LCD_cmd
   413 ;;		_LCD_init
   414 ;;		_LCD_write_text
   415 ;;		_sprintf
   416 ;; This function is called by:
   417 ;;		Startup code after reset
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421  05D8                     _main:	
   422                           ;psect for function _main
   423                           
   424  05D8                     l1185:	
   425                           ;incstack = 0
   426                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   427                           
   428                           
   429                           ;main.c: 29:     uint16_t dato;;main.c: 30:     uint8_t str[10];;main.c: 31:     ADC_ini
      +                          t();
   430  05D8  118A  2548  118A   	fcall	_ADC_init
   431                           
   432                           ;main.c: 32:     LCD_init();
   433  05DB  118A  26C4  118A   	fcall	_LCD_init
   434  05DE                     l86:	
   435                           ;main.c: 34:     while(1)
   436                           
   437                           
   438                           ;main.c: 35:     {;main.c: 36:         LCD_cmd(0x01);
   439  05DE  3001               	movlw	1
   440  05DF  118A  260A  118A   	fcall	_LCD_cmd
   441                           
   442                           ;main.c: 37:         dato = ADC_read(0);
   443  05E2  3000               	movlw	0
   444  05E3  118A  258E  118A   	fcall	_ADC_read
   445  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   446  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   447  05E8  0821               	movf	?_ADC_read+1,w
   448  05E9  00C8               	movwf	main@dato+1
   449  05EA  0820               	movf	?_ADC_read,w
   450  05EB  00C7               	movwf	main@dato
   451  05EC                     l1187:
   452                           
   453                           ;main.c: 38:         sprintf(str, "%d", dato);
   454  05EC  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   455  05ED  00BB               	movwf	??_main
   456  05EE  083B               	movf	??_main,w
   457  05EF  00AE               	movwf	sprintf@f
   458  05F0  0848               	movf	main@dato+1,w
   459  05F1  00B0               	movwf	?_sprintf+2
   460  05F2  0847               	movf	main@dato,w
   461  05F3  00AF               	movwf	?_sprintf+1
   462  05F4  303D               	movlw	(low (main@str| 0))& (0+255)
   463  05F5  118A  2723  118A   	fcall	_sprintf
   464  05F8                     l1189:
   465                           
   466                           ;main.c: 39:         LCD_write_text(str);
   467  05F8  303D               	movlw	(low (main@str| 0))& (0+255)
   468  05F9  118A  2556  118A   	fcall	_LCD_write_text
   469  05FC                     l1191:
   470                           
   471                           ;main.c: 40:         _delay((unsigned long)((100)*(4000000/4000.0)));
   472  05FC  3082               	movlw	130
   473  05FD  1283               	bcf	3,5	;RP0=0, select bank0
   474  05FE  1303               	bcf	3,6	;RP1=0, select bank0
   475  05FF  00BC               	movwf	??_main+1
   476  0600  30DD               	movlw	221
   477  0601  00BB               	movwf	??_main
   478  0602                     u677:
   479  0602  0BBB               	decfsz	??_main,f
   480  0603  2E02               	goto	u677
   481  0604  0BBC               	decfsz	??_main+1,f
   482  0605  2E02               	goto	u677
   483  0606  0000               	nop
   484  0607  2DDE               	goto	l86
   485  0608  118A  2800         	ljmp	start
   486  060A                     __end_of_main:
   487                           
   488                           	psect	text1
   489  0723                     __ptext1:	
   490 ;; *************** function _sprintf *****************
   491 ;; Defined at:
   492 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;  sp              1    wreg     PTR unsigned char 
   495 ;;		 -> main@str(10), 
   496 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   497 ;;		 -> STR_1(3), 
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  sp              1   25[BANK0 ] PTR unsigned char 
   500 ;;		 -> main@str(10), 
   501 ;;  tmpval          4    0        struct .
   502 ;;  val             2   23[BANK0 ] unsigned int 
   503 ;;  cp              2    0        PTR const unsigned char 
   504 ;;  len             2    0        unsigned int 
   505 ;;  c               1   26[BANK0 ] unsigned char 
   506 ;;  prec            1   22[BANK0 ] char 
   507 ;;  flag            1   21[BANK0 ] unsigned char 
   508 ;;  ap              1   20[BANK0 ] PTR void [1]
   509 ;;		 -> ?_sprintf(2), 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  2   14[BANK0 ] int 
   512 ;; Registers used:
   513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1
   519 ;;      Params:         0       3       0
   520 ;;      Locals:         0       7       0
   521 ;;      Temps:          0       3       0
   522 ;;      Totals:         0      13       0
   523 ;;Total ram usage:       13 bytes
   524 ;; Hardware stack levels used: 1
   525 ;; Hardware stack levels required when called: 1
   526 ;; This function calls:
   527 ;;		___lwdiv
   528 ;;		___lwmod
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534  0723                     _sprintf:	
   535                           ;psect for function _sprintf
   536                           
   537                           
   538                           ;incstack = 0
   539                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   540                           ;sprintf@sp stored from wreg
   541  0723  1283               	bcf	3,5	;RP0=0, select bank0
   542  0724  1303               	bcf	3,6	;RP1=0, select bank0
   543  0725  00B9               	movwf	sprintf@sp
   544  0726                     l1083:
   545                           
   546                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   547  0726  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   548  0727  00B1               	movwf	??_sprintf
   549  0728  0831               	movf	??_sprintf,w
   550  0729  00B4               	movwf	sprintf@ap
   551                           
   552                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   553  072A  2FE8               	goto	l1135
   554  072B                     l1085:
   555                           
   556                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   557  072B  3025               	movlw	37
   558  072C  063A               	xorwf	sprintf@c,w
   559  072D  1903               	btfsc	3,2
   560  072E  2F30               	goto	u571
   561  072F  2F31               	goto	u570
   562  0730                     u571:
   563  0730  2F3D               	goto	l1091
   564  0731                     u570:
   565  0731                     l1087:
   566                           
   567                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   568  0731  083A               	movf	sprintf@c,w
   569  0732  00B1               	movwf	??_sprintf
   570  0733  0839               	movf	sprintf@sp,w
   571  0734  0084               	movwf	4
   572  0735  0831               	movf	??_sprintf,w
   573  0736  1383               	bcf	3,7	;select IRP bank0
   574  0737  0080               	movwf	0
   575  0738                     l1089:
   576  0738  3001               	movlw	1
   577  0739  00B1               	movwf	??_sprintf
   578  073A  0831               	movf	??_sprintf,w
   579  073B  07B9               	addwf	sprintf@sp,f
   580                           
   581                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
   582  073C  2FE8               	goto	l1135
   583  073D                     l1091:
   584                           
   585                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   586  073D  01B5               	clrf	sprintf@flag
   587  073E                     l1095:	
   588                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   589                           
   590  073E  3001               	movlw	1
   591  073F  07AE               	addwf	sprintf@f,f
   592  0740  30FF               	movlw	-1
   593  0741  072E               	addwf	sprintf@f,w
   594  0742  0084               	movwf	4
   595  0743  118A  2002  118A   	fcall	stringdir
   596  0746  00BA               	movwf	sprintf@c
   597  0747  00B1               	movwf	??_sprintf
   598  0748  01B2               	clrf	??_sprintf+1
   599                           
   600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   601                           ; Switch size 1, requested type "simple"
   602                           ; Number of cases is 1, Range of values is 0 to 0
   603                           ; switch strategies available:
   604                           ; Name         Instructions Cycles
   605                           ; simple_byte            4     3 (average)
   606                           ; direct_byte            9     7 (fixed)
   607                           ; jumptable            260     6 (fixed)
   608                           ;	Chosen strategy is simple_byte
   609  0749  0832               	movf	??_sprintf+1,w
   610  074A  3A00               	xorlw	0	; case 0
   611  074B  1903               	skipnz
   612  074C  2F4E               	goto	l1213
   613  074D  2FE8               	goto	l1135
   614  074E                     l1213:
   615                           
   616                           ; Switch size 1, requested type "simple"
   617                           ; Number of cases is 3, Range of values is 0 to 105
   618                           ; switch strategies available:
   619                           ; Name         Instructions Cycles
   620                           ; simple_byte           10     6 (average)
   621                           ; direct_byte          219     7 (fixed)
   622                           ; jumptable            260     6 (fixed)
   623                           ;	Chosen strategy is simple_byte
   624  074E  0831               	movf	??_sprintf,w
   625  074F  3A00               	xorlw	0	; case 0
   626  0750  1903               	skipnz
   627  0751  2FF8               	goto	l1137
   628  0752  3A64               	xorlw	100	; case 100
   629  0753  1903               	skipnz
   630  0754  2F59               	goto	l1097
   631  0755  3A0D               	xorlw	13	; case 105
   632  0756  1903               	skipnz
   633  0757  2F59               	goto	l1097
   634  0758  2FE8               	goto	l1135
   635  0759                     l1097:
   636                           
   637                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   638  0759  0834               	movf	sprintf@ap,w
   639  075A  0084               	movwf	4
   640  075B  1383               	bcf	3,7	;select IRP bank0
   641  075C  0800               	movf	0,w
   642  075D  00B7               	movwf	sprintf@val
   643  075E  0A84               	incf	4,f
   644  075F  0800               	movf	0,w
   645  0760  00B8               	movwf	sprintf@val+1
   646  0761                     l1099:
   647  0761  3002               	movlw	2
   648  0762  00B1               	movwf	??_sprintf
   649  0763  0831               	movf	??_sprintf,w
   650  0764  07B4               	addwf	sprintf@ap,f
   651  0765                     l1101:
   652                           
   653                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   654  0765  1FB8               	btfss	sprintf@val+1,7
   655  0766  2F68               	goto	u581
   656  0767  2F69               	goto	u580
   657  0768                     u581:
   658  0768  2F72               	goto	l1107
   659  0769                     u580:
   660  0769                     l1103:
   661                           
   662                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   663  0769  3003               	movlw	3
   664  076A  00B1               	movwf	??_sprintf
   665  076B  0831               	movf	??_sprintf,w
   666  076C  04B5               	iorwf	sprintf@flag,f
   667  076D                     l1105:
   668                           
   669                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   670  076D  09B7               	comf	sprintf@val,f
   671  076E  09B8               	comf	sprintf@val+1,f
   672  076F  0AB7               	incf	sprintf@val,f
   673  0770  1903               	skipnz
   674  0771  0AB8               	incf	sprintf@val+1,f
   675  0772                     l1107:
   676                           
   677                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   678  0772  01BA               	clrf	sprintf@c
   679  0773  0ABA               	incf	sprintf@c,f
   680  0774                     l1113:
   681                           
   682                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   683  0774  083A               	movf	sprintf@c,w
   684  0775  00B1               	movwf	??_sprintf
   685  0776  0731               	addwf	??_sprintf,w
   686  0777  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   687  0778  0084               	movwf	4
   688  0779  118A  2002  118A   	fcall	stringdir
   689  077C  00B2               	movwf	??_sprintf+1
   690  077D  118A  2002  118A   	fcall	stringdir
   691  0780  00B3               	movwf	??_sprintf+2
   692  0781  0833               	movf	??_sprintf+2,w
   693  0782  0238               	subwf	sprintf@val+1,w
   694  0783  1D03               	skipz
   695  0784  2F87               	goto	u595
   696  0785  0832               	movf	??_sprintf+1,w
   697  0786  0237               	subwf	sprintf@val,w
   698  0787                     u595:
   699  0787  1803               	skipnc
   700  0788  2F8A               	goto	u591
   701  0789  2F8B               	goto	u590
   702  078A                     u591:
   703  078A  2F8C               	goto	l1117
   704  078B                     u590:
   705  078B  2F96               	goto	l1119
   706  078C                     l1117:
   707  078C  3001               	movlw	1
   708  078D  00B1               	movwf	??_sprintf
   709  078E  0831               	movf	??_sprintf,w
   710  078F  07BA               	addwf	sprintf@c,f
   711  0790  3005               	movlw	5
   712  0791  063A               	xorwf	sprintf@c,w
   713  0792  1D03               	btfss	3,2
   714  0793  2F95               	goto	u601
   715  0794  2F96               	goto	u600
   716  0795                     u601:
   717  0795  2F74               	goto	l1113
   718  0796                     u600:
   719  0796                     l1119:
   720                           
   721                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   722  0796  0835               	movf	sprintf@flag,w
   723  0797  3903               	andlw	3
   724  0798  1903               	btfsc	3,2
   725  0799  2F9B               	goto	u611
   726  079A  2F9C               	goto	u610
   727  079B                     u611:
   728  079B  2FA7               	goto	l1125
   729  079C                     u610:
   730  079C                     l1121:
   731                           
   732                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   733  079C  302D               	movlw	45
   734  079D  00B1               	movwf	??_sprintf
   735  079E  0839               	movf	sprintf@sp,w
   736  079F  0084               	movwf	4
   737  07A0  0831               	movf	??_sprintf,w
   738  07A1  1383               	bcf	3,7	;select IRP bank0
   739  07A2  0080               	movwf	0
   740  07A3                     l1123:
   741  07A3  3001               	movlw	1
   742  07A4  00B1               	movwf	??_sprintf
   743  07A5  0831               	movf	??_sprintf,w
   744  07A6  07B9               	addwf	sprintf@sp,f
   745  07A7                     l1125:
   746                           
   747                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   748  07A7  083A               	movf	sprintf@c,w
   749  07A8  00B1               	movwf	??_sprintf
   750  07A9  0831               	movf	??_sprintf,w
   751  07AA  00B6               	movwf	sprintf@prec
   752                           
   753                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   754  07AB  2FDF               	goto	l1133
   755  07AC                     l1127:
   756                           
   757                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   758  07AC  300A               	movlw	10
   759  07AD  00A8               	movwf	___lwmod@divisor
   760  07AE  3000               	movlw	0
   761  07AF  00A9               	movwf	___lwmod@divisor+1
   762  07B0  0836               	movf	sprintf@prec,w
   763  07B1  00B1               	movwf	??_sprintf
   764  07B2  0731               	addwf	??_sprintf,w
   765  07B3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   766  07B4  0084               	movwf	4
   767  07B5  118A  2002  118A   	fcall	stringdir
   768  07B8  00A0               	movwf	___lwdiv@divisor
   769  07B9  118A  2002  118A   	fcall	stringdir
   770  07BC  00A1               	movwf	___lwdiv@divisor+1
   771  07BD  0838               	movf	sprintf@val+1,w
   772  07BE  00A3               	movwf	___lwdiv@dividend+1
   773  07BF  0837               	movf	sprintf@val,w
   774  07C0  00A2               	movwf	___lwdiv@dividend
   775  07C1  118A  267E  118A   	fcall	___lwdiv
   776  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   777  07C5  1303               	bcf	3,6	;RP1=0, select bank0
   778  07C6  0821               	movf	?___lwdiv+1,w
   779  07C7  00AB               	movwf	___lwmod@dividend+1
   780  07C8  0820               	movf	?___lwdiv,w
   781  07C9  00AA               	movwf	___lwmod@dividend
   782  07CA  118A  2642  118A   	fcall	___lwmod
   783  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   784  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   785  07CF  0828               	movf	?___lwmod,w
   786  07D0  3E30               	addlw	48
   787  07D1  00B2               	movwf	??_sprintf+1
   788  07D2  0832               	movf	??_sprintf+1,w
   789  07D3  00BA               	movwf	sprintf@c
   790  07D4                     l1129:
   791                           
   792                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   793  07D4  083A               	movf	sprintf@c,w
   794  07D5  00B1               	movwf	??_sprintf
   795  07D6  0839               	movf	sprintf@sp,w
   796  07D7  0084               	movwf	4
   797  07D8  0831               	movf	??_sprintf,w
   798  07D9  1383               	bcf	3,7	;select IRP bank0
   799  07DA  0080               	movwf	0
   800  07DB                     l1131:
   801  07DB  3001               	movlw	1
   802  07DC  00B1               	movwf	??_sprintf
   803  07DD  0831               	movf	??_sprintf,w
   804  07DE  07B9               	addwf	sprintf@sp,f
   805  07DF                     l1133:
   806                           
   807                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   808  07DF  30FF               	movlw	255
   809  07E0  00B1               	movwf	??_sprintf
   810  07E1  0831               	movf	??_sprintf,w
   811  07E2  07B6               	addwf	sprintf@prec,f
   812  07E3  0A36               	incf	sprintf@prec,w
   813  07E4  1D03               	btfss	3,2
   814  07E5  2FE7               	goto	u621
   815  07E6  2FE8               	goto	u620
   816  07E7                     u621:
   817  07E7  2FAC               	goto	l1127
   818  07E8                     u620:
   819  07E8                     l1135:
   820                           
   821                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   822  07E8  3001               	movlw	1
   823  07E9  07AE               	addwf	sprintf@f,f
   824  07EA  30FF               	movlw	-1
   825  07EB  072E               	addwf	sprintf@f,w
   826  07EC  0084               	movwf	4
   827  07ED  118A  2002  118A   	fcall	stringdir
   828  07F0  00B1               	movwf	??_sprintf
   829  07F1  0831               	movf	??_sprintf,w
   830  07F2  00BA               	movwf	sprintf@c
   831  07F3  083A               	movf	sprintf@c,w
   832  07F4  1D03               	btfss	3,2
   833  07F5  2FF7               	goto	u631
   834  07F6  2FF8               	goto	u630
   835  07F7                     u631:
   836  07F7  2F2B               	goto	l1085
   837  07F8                     u630:
   838  07F8                     l1137:
   839                           
   840                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   841  07F8  0839               	movf	sprintf@sp,w
   842  07F9  0084               	movwf	4
   843  07FA  1383               	bcf	3,7	;select IRP bank0
   844  07FB  0180               	clrf	0
   845  07FC                     l199:
   846  07FC  0008               	return
   847  07FD                     __end_of_sprintf:
   848                           
   849                           	psect	text2
   850  0642                     __ptext2:	
   851 ;; *************** function ___lwmod *****************
   852 ;; Defined at:
   853 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  divisor         2    8[BANK0 ] unsigned int 
   856 ;;  dividend        2   10[BANK0 ] unsigned int 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  counter         1   13[BANK0 ] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  2    8[BANK0 ] unsigned int 
   861 ;; Registers used:
   862 ;;		wreg, status,2, status,0
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1
   868 ;;      Params:         0       4       0
   869 ;;      Locals:         0       1       0
   870 ;;      Temps:          0       1       0
   871 ;;      Totals:         0       6       0
   872 ;;Total ram usage:        6 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_sprintf
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881  0642                     ___lwmod:	
   882                           ;psect for function ___lwmod
   883                           
   884  0642                     l1015:	
   885                           ;incstack = 0
   886                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   887                           
   888  0642  1283               	bcf	3,5	;RP0=0, select bank0
   889  0643  1303               	bcf	3,6	;RP1=0, select bank0
   890  0644  0828               	movf	___lwmod@divisor,w
   891  0645  0429               	iorwf	___lwmod@divisor+1,w
   892  0646  1903               	btfsc	3,2
   893  0647  2E49               	goto	u491
   894  0648  2E4A               	goto	u490
   895  0649                     u491:
   896  0649  2E79               	goto	l1033
   897  064A                     u490:
   898  064A                     l1017:
   899  064A  01AD               	clrf	___lwmod@counter
   900  064B  0AAD               	incf	___lwmod@counter,f
   901  064C  2E58               	goto	l1023
   902  064D                     l1019:
   903  064D  3001               	movlw	1
   904  064E                     u505:
   905  064E  1003               	clrc
   906  064F  0DA8               	rlf	___lwmod@divisor,f
   907  0650  0DA9               	rlf	___lwmod@divisor+1,f
   908  0651  3EFF               	addlw	-1
   909  0652  1D03               	skipz
   910  0653  2E4E               	goto	u505
   911  0654                     l1021:
   912  0654  3001               	movlw	1
   913  0655  00AC               	movwf	??___lwmod
   914  0656  082C               	movf	??___lwmod,w
   915  0657  07AD               	addwf	___lwmod@counter,f
   916  0658                     l1023:
   917  0658  1FA9               	btfss	___lwmod@divisor+1,7
   918  0659  2E5B               	goto	u511
   919  065A  2E5C               	goto	u510
   920  065B                     u511:
   921  065B  2E4D               	goto	l1019
   922  065C                     u510:
   923  065C                     l1025:
   924  065C  0829               	movf	___lwmod@divisor+1,w
   925  065D  022B               	subwf	___lwmod@dividend+1,w
   926  065E  1D03               	skipz
   927  065F  2E62               	goto	u525
   928  0660  0828               	movf	___lwmod@divisor,w
   929  0661  022A               	subwf	___lwmod@dividend,w
   930  0662                     u525:
   931  0662  1C03               	skipc
   932  0663  2E65               	goto	u521
   933  0664  2E66               	goto	u520
   934  0665                     u521:
   935  0665  2E6C               	goto	l1029
   936  0666                     u520:
   937  0666                     l1027:
   938  0666  0828               	movf	___lwmod@divisor,w
   939  0667  02AA               	subwf	___lwmod@dividend,f
   940  0668  0829               	movf	___lwmod@divisor+1,w
   941  0669  1C03               	skipc
   942  066A  03AB               	decf	___lwmod@dividend+1,f
   943  066B  02AB               	subwf	___lwmod@dividend+1,f
   944  066C                     l1029:
   945  066C  3001               	movlw	1
   946  066D                     u535:
   947  066D  1003               	clrc
   948  066E  0CA9               	rrf	___lwmod@divisor+1,f
   949  066F  0CA8               	rrf	___lwmod@divisor,f
   950  0670  3EFF               	addlw	-1
   951  0671  1D03               	skipz
   952  0672  2E6D               	goto	u535
   953  0673                     l1031:
   954  0673  3001               	movlw	1
   955  0674  02AD               	subwf	___lwmod@counter,f
   956  0675  1D03               	btfss	3,2
   957  0676  2E78               	goto	u541
   958  0677  2E79               	goto	u540
   959  0678                     u541:
   960  0678  2E5C               	goto	l1025
   961  0679                     u540:
   962  0679                     l1033:
   963  0679  082B               	movf	___lwmod@dividend+1,w
   964  067A  00A9               	movwf	?___lwmod+1
   965  067B  082A               	movf	___lwmod@dividend,w
   966  067C  00A8               	movwf	?___lwmod
   967  067D                     l485:
   968  067D  0008               	return
   969  067E                     __end_of___lwmod:
   970                           
   971                           	psect	text3
   972  067E                     __ptext3:	
   973 ;; *************** function ___lwdiv *****************
   974 ;; Defined at:
   975 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  divisor         2    0[BANK0 ] unsigned int 
   978 ;;  dividend        2    2[BANK0 ] unsigned int 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  quotient        2    5[BANK0 ] unsigned int 
   981 ;;  counter         1    7[BANK0 ] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  2    0[BANK0 ] unsigned int 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1
   991 ;;      Params:         0       4       0
   992 ;;      Locals:         0       3       0
   993 ;;      Temps:          0       1       0
   994 ;;      Totals:         0       8       0
   995 ;;Total ram usage:        8 bytes
   996 ;; Hardware stack levels used: 1
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_sprintf
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004  067E                     ___lwdiv:	
  1005                           ;psect for function ___lwdiv
  1006                           
  1007  067E                     l989:	
  1008                           ;incstack = 0
  1009                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1010                           
  1011  067E  1283               	bcf	3,5	;RP0=0, select bank0
  1012  067F  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0680  01A5               	clrf	___lwdiv@quotient
  1014  0681  01A6               	clrf	___lwdiv@quotient+1
  1015  0682                     l991:
  1016  0682  0820               	movf	___lwdiv@divisor,w
  1017  0683  0421               	iorwf	___lwdiv@divisor+1,w
  1018  0684  1903               	btfsc	3,2
  1019  0685  2E87               	goto	u421
  1020  0686  2E88               	goto	u420
  1021  0687                     u421:
  1022  0687  2EBF               	goto	l1011
  1023  0688                     u420:
  1024  0688                     l993:
  1025  0688  01A7               	clrf	___lwdiv@counter
  1026  0689  0AA7               	incf	___lwdiv@counter,f
  1027  068A  2E96               	goto	l999
  1028  068B                     l995:
  1029  068B  3001               	movlw	1
  1030  068C                     u435:
  1031  068C  1003               	clrc
  1032  068D  0DA0               	rlf	___lwdiv@divisor,f
  1033  068E  0DA1               	rlf	___lwdiv@divisor+1,f
  1034  068F  3EFF               	addlw	-1
  1035  0690  1D03               	skipz
  1036  0691  2E8C               	goto	u435
  1037  0692                     l997:
  1038  0692  3001               	movlw	1
  1039  0693  00A4               	movwf	??___lwdiv
  1040  0694  0824               	movf	??___lwdiv,w
  1041  0695  07A7               	addwf	___lwdiv@counter,f
  1042  0696                     l999:
  1043  0696  1FA1               	btfss	___lwdiv@divisor+1,7
  1044  0697  2E99               	goto	u441
  1045  0698  2E9A               	goto	u440
  1046  0699                     u441:
  1047  0699  2E8B               	goto	l995
  1048  069A                     u440:
  1049  069A                     l1001:
  1050  069A  3001               	movlw	1
  1051  069B                     u455:
  1052  069B  1003               	clrc
  1053  069C  0DA5               	rlf	___lwdiv@quotient,f
  1054  069D  0DA6               	rlf	___lwdiv@quotient+1,f
  1055  069E  3EFF               	addlw	-1
  1056  069F  1D03               	skipz
  1057  06A0  2E9B               	goto	u455
  1058  06A1  0821               	movf	___lwdiv@divisor+1,w
  1059  06A2  0223               	subwf	___lwdiv@dividend+1,w
  1060  06A3  1D03               	skipz
  1061  06A4  2EA7               	goto	u465
  1062  06A5  0820               	movf	___lwdiv@divisor,w
  1063  06A6  0222               	subwf	___lwdiv@dividend,w
  1064  06A7                     u465:
  1065  06A7  1C03               	skipc
  1066  06A8  2EAA               	goto	u461
  1067  06A9  2EAB               	goto	u460
  1068  06AA                     u461:
  1069  06AA  2EB2               	goto	l1007
  1070  06AB                     u460:
  1071  06AB                     l1003:
  1072  06AB  0820               	movf	___lwdiv@divisor,w
  1073  06AC  02A2               	subwf	___lwdiv@dividend,f
  1074  06AD  0821               	movf	___lwdiv@divisor+1,w
  1075  06AE  1C03               	skipc
  1076  06AF  03A3               	decf	___lwdiv@dividend+1,f
  1077  06B0  02A3               	subwf	___lwdiv@dividend+1,f
  1078  06B1                     l1005:
  1079  06B1  1425               	bsf	___lwdiv@quotient,0
  1080  06B2                     l1007:
  1081  06B2  3001               	movlw	1
  1082  06B3                     u475:
  1083  06B3  1003               	clrc
  1084  06B4  0CA1               	rrf	___lwdiv@divisor+1,f
  1085  06B5  0CA0               	rrf	___lwdiv@divisor,f
  1086  06B6  3EFF               	addlw	-1
  1087  06B7  1D03               	skipz
  1088  06B8  2EB3               	goto	u475
  1089  06B9                     l1009:
  1090  06B9  3001               	movlw	1
  1091  06BA  02A7               	subwf	___lwdiv@counter,f
  1092  06BB  1D03               	btfss	3,2
  1093  06BC  2EBE               	goto	u481
  1094  06BD  2EBF               	goto	u480
  1095  06BE                     u481:
  1096  06BE  2E9A               	goto	l1001
  1097  06BF                     u480:
  1098  06BF                     l1011:
  1099  06BF  0826               	movf	___lwdiv@quotient+1,w
  1100  06C0  00A1               	movwf	?___lwdiv+1
  1101  06C1  0825               	movf	___lwdiv@quotient,w
  1102  06C2  00A0               	movwf	?___lwdiv
  1103  06C3                     l475:
  1104  06C3  0008               	return
  1105  06C4                     __end_of___lwdiv:
  1106                           
  1107                           	psect	text4
  1108  0556                     __ptext4:	
  1109 ;; *************** function _LCD_write_text *****************
  1110 ;; Defined at:
  1111 ;;		line 143 in file "./LCD.h"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  dato            1    wreg     PTR unsigned char 
  1114 ;;		 -> main@str(10), 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  dato            1    4[BANK0 ] PTR unsigned char 
  1117 ;;		 -> main@str(10), 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMMON   BANK0   BANK1
  1127 ;;      Params:         0       0       0
  1128 ;;      Locals:         0       1       0
  1129 ;;      Temps:          0       1       0
  1130 ;;      Totals:         0       2       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 2
  1134 ;; This function calls:
  1135 ;;		_LCD_char
  1136 ;; This function is called by:
  1137 ;;		_main
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141  0556                     _LCD_write_text:	
  1142                           ;psect for function _LCD_write_text
  1143                           
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _LCD_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1147                           ;LCD_write_text@dato stored from wreg
  1148  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1149  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1150  0558  00A4               	movwf	LCD_write_text@dato
  1151  0559                     l1053:
  1152                           
  1153                           ;./LCD.h: 143: void LCD_write_text(char *dato);./LCD.h: 144: {;./LCD.h: 145:     while (
      +                          *dato){
  1154  0559  2D66               	goto	l1059
  1155  055A                     l1055:
  1156                           
  1157                           ;./LCD.h: 146:         LCD_char(*dato);
  1158  055A  0824               	movf	LCD_write_text@dato,w
  1159  055B  0084               	movwf	4
  1160  055C  0800               	movf	0,w
  1161  055D  118A  256F  118A   	fcall	_LCD_char
  1162  0560                     l1057:
  1163                           
  1164                           ;./LCD.h: 147:         dato++;
  1165  0560  3001               	movlw	1
  1166  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1167  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1168  0563  00A3               	movwf	??_LCD_write_text
  1169  0564  0823               	movf	??_LCD_write_text,w
  1170  0565  07A4               	addwf	LCD_write_text@dato,f
  1171  0566                     l1059:
  1172                           
  1173                           ;./LCD.h: 145:     while (*dato){
  1174  0566  0824               	movf	LCD_write_text@dato,w
  1175  0567  0084               	movwf	4
  1176  0568  1383               	bcf	3,7	;select IRP bank0
  1177  0569  0800               	movf	0,w
  1178  056A  1D03               	btfss	3,2
  1179  056B  2D6D               	goto	u551
  1180  056C  2D6E               	goto	u550
  1181  056D                     u551:
  1182  056D  2D5A               	goto	l1055
  1183  056E                     u550:
  1184  056E                     l56:
  1185  056E  0008               	return
  1186  056F                     __end_of_LCD_write_text:
  1187                           
  1188                           	psect	text5
  1189  056F                     __ptext5:	
  1190 ;; *************** function _LCD_char *****************
  1191 ;; Defined at:
  1192 ;;		line 131 in file "./LCD.h"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  caracter        1    wreg     unsigned char 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  caracter        1    2[BANK0 ] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0, pclath, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON   BANK0   BANK1
  1206 ;;      Params:         0       0       0
  1207 ;;      Locals:         0       1       0
  1208 ;;      Temps:          0       1       0
  1209 ;;      Totals:         0       2       0
  1210 ;;Total ram usage:        2 bytes
  1211 ;; Hardware stack levels used: 1
  1212 ;; Hardware stack levels required when called: 1
  1213 ;; This function calls:
  1214 ;;		_LCD_write_nible
  1215 ;; This function is called by:
  1216 ;;		_LCD_write_text
  1217 ;;		_LCD_custom_char
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221  056F                     _LCD_char:	
  1222                           ;psect for function _LCD_char
  1223                           
  1224                           
  1225                           ;incstack = 0
  1226                           ; Regs used in _LCD_char: [wreg+status,2+status,0+pclath+cstack]
  1227                           ;LCD_char@caracter stored from wreg
  1228  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1229  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1230  0571  00A2               	movwf	LCD_char@caracter
  1231  0572                     l983:
  1232                           
  1233                           ;./LCD.h: 131: void LCD_char(char caracter);./LCD.h: 132: {;./LCD.h: 133:     PORTAbits.
      +                          RA2 = 1;
  1234  0572  1505               	bsf	5,2	;volatile
  1235  0573                     l985:
  1236                           
  1237                           ;./LCD.h: 134:     LCD_write_nible(caracter >> 4);
  1238  0573  0822               	movf	LCD_char@caracter,w
  1239  0574  00A1               	movwf	??_LCD_char
  1240  0575  3004               	movlw	4
  1241  0576                     u415:
  1242  0576  1003               	clrc
  1243  0577  0CA1               	rrf	??_LCD_char,f
  1244  0578  3EFF               	addlw	-1
  1245  0579  1D03               	skipz
  1246  057A  2D76               	goto	u415
  1247  057B  0821               	movf	??_LCD_char,w
  1248  057C  118A  25B2  118A   	fcall	_LCD_write_nible
  1249                           
  1250                           ;./LCD.h: 135:     LCD_write_nible(caracter & 0x0F);
  1251  057F  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0580  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0581  0822               	movf	LCD_char@caracter,w
  1254  0582  390F               	andlw	15
  1255  0583  118A  25B2  118A   	fcall	_LCD_write_nible
  1256  0586                     l987:
  1257                           
  1258                           ;./LCD.h: 136:  _delay((unsigned long)((55)*(4000000/4000000.0)));
  1259  0586  3011               	movlw	17
  1260  0587  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0588  1303               	bcf	3,6	;RP1=0, select bank0
  1262  0589  00A1               	movwf	??_LCD_char
  1263  058A                     u687:
  1264  058A  0BA1               	decfsz	??_LCD_char,f
  1265  058B  2D8A               	goto	u687
  1266  058C  2D8D               	nop2
  1267  058D                     l50:
  1268  058D  0008               	return
  1269  058E                     __end_of_LCD_char:
  1270                           
  1271                           	psect	text6
  1272  06C4                     __ptext6:	
  1273 ;; *************** function _LCD_init *****************
  1274 ;; Defined at:
  1275 ;;		line 63 in file "./LCD.h"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1
  1289 ;;      Params:         0       0       0
  1290 ;;      Locals:         0       0       0
  1291 ;;      Temps:          0       2       0
  1292 ;;      Totals:         0       2       0
  1293 ;;Total ram usage:        2 bytes
  1294 ;; Hardware stack levels used: 1
  1295 ;; Hardware stack levels required when called: 2
  1296 ;; This function calls:
  1297 ;;		_LCD_cmd
  1298 ;;		_LCD_write_nible
  1299 ;; This function is called by:
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304  06C4                     _LCD_init:	
  1305                           ;psect for function _LCD_init
  1306                           
  1307  06C4                     l1037:	
  1308                           ;incstack = 0
  1309                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1310                           
  1311                           
  1312                           ;./LCD.h: 65:     PORTAbits.RA3 = 0;
  1313  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1314  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1315  06C6  1185               	bcf	5,3	;volatile
  1316                           
  1317                           ;./LCD.h: 66:     PORTAbits.RA2 = 0;
  1318  06C7  1105               	bcf	5,2	;volatile
  1319                           
  1320                           ;./LCD.h: 67:     PORTCbits.RC0 = 0;
  1321  06C8  1007               	bcf	7,0	;volatile
  1322                           
  1323                           ;./LCD.h: 68:     PORTCbits.RC1 = 0;
  1324  06C9  1087               	bcf	7,1	;volatile
  1325                           
  1326                           ;./LCD.h: 69:     PORTCbits.RC2 = 0;
  1327  06CA  1107               	bcf	7,2	;volatile
  1328                           
  1329                           ;./LCD.h: 70:     PORTCbits.RC3 = 0;
  1330  06CB  1187               	bcf	7,3	;volatile
  1331                           
  1332                           ;./LCD.h: 72:     TRISAbits.TRISA3 = 0;
  1333  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  1334  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  1335  06CE  1185               	bcf	5,3	;volatile
  1336                           
  1337                           ;./LCD.h: 73:     TRISAbits.TRISA2 = 0;
  1338  06CF  1105               	bcf	5,2	;volatile
  1339                           
  1340                           ;./LCD.h: 74:     TRISCbits.TRISC0 = 0;
  1341  06D0  1007               	bcf	7,0	;volatile
  1342                           
  1343                           ;./LCD.h: 75:     TRISCbits.TRISC1 = 0;
  1344  06D1  1087               	bcf	7,1	;volatile
  1345                           
  1346                           ;./LCD.h: 76:     TRISCbits.TRISC2 = 0;
  1347  06D2  1107               	bcf	7,2	;volatile
  1348                           
  1349                           ;./LCD.h: 77:     TRISCbits.TRISC3 = 0;
  1350  06D3  1187               	bcf	7,3	;volatile
  1351  06D4                     l1039:
  1352                           
  1353                           ;./LCD.h: 79:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1354  06D4  301A               	movlw	26
  1355  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1356  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1357  06D7  00A5               	movwf	??_LCD_init+1
  1358  06D8  30F8               	movlw	248
  1359  06D9  00A4               	movwf	??_LCD_init
  1360  06DA                     u697:
  1361  06DA  0BA4               	decfsz	??_LCD_init,f
  1362  06DB  2EDA               	goto	u697
  1363  06DC  0BA5               	decfsz	??_LCD_init+1,f
  1364  06DD  2EDA               	goto	u697
  1365  06DE                     l1041:
  1366                           
  1367                           ;./LCD.h: 81:     LCD_write_nible(0x03);
  1368  06DE  3003               	movlw	3
  1369  06DF  118A  25B2  118A   	fcall	_LCD_write_nible
  1370  06E2                     l1043:
  1371                           
  1372                           ;./LCD.h: 82:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1373  06E2  3007               	movlw	7
  1374  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1375  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1376  06E5  00A5               	movwf	??_LCD_init+1
  1377  06E6  307C               	movlw	124
  1378  06E7  00A4               	movwf	??_LCD_init
  1379  06E8                     u707:
  1380  06E8  0BA4               	decfsz	??_LCD_init,f
  1381  06E9  2EE8               	goto	u707
  1382  06EA  0BA5               	decfsz	??_LCD_init+1,f
  1383  06EB  2EE8               	goto	u707
  1384  06EC  2EED               	nop2
  1385                           
  1386                           ;./LCD.h: 83:     LCD_write_nible(0x03);
  1387  06ED  3003               	movlw	3
  1388  06EE  118A  25B2  118A   	fcall	_LCD_write_nible
  1389  06F1                     l1045:
  1390                           
  1391                           ;./LCD.h: 84:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1392  06F1  3020               	movlw	32
  1393  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1394  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1395  06F4  00A4               	movwf	??_LCD_init
  1396  06F5                     u717:
  1397  06F5  0BA4               	decfsz	??_LCD_init,f
  1398  06F6  2EF5               	goto	u717
  1399  06F7  2EF8               	nop2
  1400  06F8                     l1047:
  1401                           
  1402                           ;./LCD.h: 85:     LCD_write_nible(0x03);
  1403  06F8  3003               	movlw	3
  1404  06F9  118A  25B2  118A   	fcall	_LCD_write_nible
  1405                           
  1406                           ;./LCD.h: 86:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1407  06FC  3020               	movlw	32
  1408  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1409  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1410  06FF  00A4               	movwf	??_LCD_init
  1411  0700                     u727:
  1412  0700  0BA4               	decfsz	??_LCD_init,f
  1413  0701  2F00               	goto	u727
  1414  0702  2F03               	nop2
  1415  0703                     l1049:
  1416                           
  1417                           ;./LCD.h: 87:     LCD_write_nible(0x02);
  1418  0703  3002               	movlw	2
  1419  0704  118A  25B2  118A   	fcall	_LCD_write_nible
  1420  0707                     l1051:
  1421                           
  1422                           ;./LCD.h: 88:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1423  0707  3020               	movlw	32
  1424  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1426  070A  00A4               	movwf	??_LCD_init
  1427  070B                     u737:
  1428  070B  0BA4               	decfsz	??_LCD_init,f
  1429  070C  2F0B               	goto	u737
  1430  070D  2F0E               	nop2
  1431                           
  1432                           ;./LCD.h: 90:     LCD_cmd(0x28);
  1433  070E  3028               	movlw	40
  1434  070F  118A  260A  118A   	fcall	_LCD_cmd
  1435                           
  1436                           ;./LCD.h: 91:     LCD_cmd(0x0C);
  1437  0712  300C               	movlw	12
  1438  0713  118A  260A  118A   	fcall	_LCD_cmd
  1439                           
  1440                           ;./LCD.h: 92:     LCD_cmd(0x01);
  1441  0716  3001               	movlw	1
  1442  0717  118A  260A  118A   	fcall	_LCD_cmd
  1443                           
  1444                           ;./LCD.h: 93:     LCD_cmd(0x06);
  1445  071A  3006               	movlw	6
  1446  071B  118A  260A  118A   	fcall	_LCD_cmd
  1447                           
  1448                           ;./LCD.h: 94:     LCD_cmd(0x80);
  1449  071E  3080               	movlw	128
  1450  071F  118A  260A  118A   	fcall	_LCD_cmd
  1451  0722                     l29:
  1452  0722  0008               	return
  1453  0723                     __end_of_LCD_init:
  1454                           
  1455                           	psect	text7
  1456  060A                     __ptext7:	
  1457 ;; *************** function _LCD_cmd *****************
  1458 ;; Defined at:
  1459 ;;		line 116 in file "./LCD.h"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  comando         1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  comando         1    3[BANK0 ] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0, pclath, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1
  1473 ;;      Params:         0       0       0
  1474 ;;      Locals:         0       1       0
  1475 ;;      Temps:          0       2       0
  1476 ;;      Totals:         0       3       0
  1477 ;;Total ram usage:        3 bytes
  1478 ;; Hardware stack levels used: 1
  1479 ;; Hardware stack levels required when called: 1
  1480 ;; This function calls:
  1481 ;;		_LCD_write_nible
  1482 ;; This function is called by:
  1483 ;;		_LCD_init
  1484 ;;		_main
  1485 ;;		_LCD_gotoxy
  1486 ;;		_LCD_custom_char
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490  060A                     _LCD_cmd:	
  1491                           ;psect for function _LCD_cmd
  1492                           
  1493                           
  1494                           ;incstack = 0
  1495                           ; Regs used in _LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
  1496                           ;LCD_cmd@comando stored from wreg
  1497  060A  1283               	bcf	3,5	;RP0=0, select bank0
  1498  060B  1303               	bcf	3,6	;RP1=0, select bank0
  1499  060C  00A3               	movwf	LCD_cmd@comando
  1500  060D                     l971:
  1501                           
  1502                           ;./LCD.h: 116: void LCD_cmd(unsigned char comando);./LCD.h: 117: {;./LCD.h: 118:     POR
      +                          TAbits.RA2 = 0;
  1503  060D  1105               	bcf	5,2	;volatile
  1504  060E                     l973:
  1505                           
  1506                           ;./LCD.h: 119:     LCD_write_nible(comando >> 4);
  1507  060E  0823               	movf	LCD_cmd@comando,w
  1508  060F  00A1               	movwf	??_LCD_cmd
  1509  0610  3004               	movlw	4
  1510  0611                     u385:
  1511  0611  1003               	clrc
  1512  0612  0CA1               	rrf	??_LCD_cmd,f
  1513  0613  3EFF               	addlw	-1
  1514  0614  1D03               	skipz
  1515  0615  2E11               	goto	u385
  1516  0616  0821               	movf	??_LCD_cmd,w
  1517  0617  118A  25B2  118A   	fcall	_LCD_write_nible
  1518                           
  1519                           ;./LCD.h: 120:     LCD_write_nible(comando & 0x0F);
  1520  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1521  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1522  061C  0823               	movf	LCD_cmd@comando,w
  1523  061D  390F               	andlw	15
  1524  061E  118A  25B2  118A   	fcall	_LCD_write_nible
  1525  0621                     l975:
  1526                           
  1527                           ;./LCD.h: 121:     if(comando == 0x01 || comando == 0x02)
  1528  0621  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0622  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0623  0323               	decf	LCD_cmd@comando,w
  1531  0624  1903               	btfsc	3,2
  1532  0625  2E27               	goto	u391
  1533  0626  2E28               	goto	u390
  1534  0627                     u391:
  1535  0627  2E2E               	goto	l979
  1536  0628                     u390:
  1537  0628                     l977:
  1538  0628  3002               	movlw	2
  1539  0629  0623               	xorwf	LCD_cmd@comando,w
  1540  062A  1D03               	btfss	3,2
  1541  062B  2E2D               	goto	u401
  1542  062C  2E2E               	goto	u400
  1543  062D                     u401:
  1544  062D  2E3A               	goto	l981
  1545  062E                     u400:
  1546  062E                     l979:
  1547                           
  1548                           ;./LCD.h: 122:         _delay((unsigned long)((2)*(4000000/4000.0)));
  1549  062E  3003               	movlw	3
  1550  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1551  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1552  0631  00A2               	movwf	??_LCD_cmd+1
  1553  0632  3097               	movlw	151
  1554  0633  00A1               	movwf	??_LCD_cmd
  1555  0634                     u747:
  1556  0634  0BA1               	decfsz	??_LCD_cmd,f
  1557  0635  2E34               	goto	u747
  1558  0636  0BA2               	decfsz	??_LCD_cmd+1,f
  1559  0637  2E34               	goto	u747
  1560  0638  0000               	nop
  1561  0639  2E41               	goto	l47
  1562  063A                     l981:
  1563                           
  1564                           ;./LCD.h: 124:         _delay((unsigned long)((55)*(4000000/4000000.0)));
  1565  063A  3011               	movlw	17
  1566  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1567  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1568  063D  00A1               	movwf	??_LCD_cmd
  1569  063E                     u757:
  1570  063E  0BA1               	decfsz	??_LCD_cmd,f
  1571  063F  2E3E               	goto	u757
  1572  0640  2E41               	nop2
  1573  0641                     l47:
  1574  0641  0008               	return
  1575  0642                     __end_of_LCD_cmd:
  1576                           
  1577                           	psect	text8
  1578  05B2                     __ptext8:	
  1579 ;; *************** function _LCD_write_nible *****************
  1580 ;; Defined at:
  1581 ;;		line 101 in file "./LCD.h"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  nible           1    wreg     unsigned char 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  nible           1    0[BANK0 ] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      void 
  1588 ;; Registers used:
  1589 ;;		wreg
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1
  1595 ;;      Params:         0       0       0
  1596 ;;      Locals:         0       1       0
  1597 ;;      Temps:          0       0       0
  1598 ;;      Totals:         0       1       0
  1599 ;;Total ram usage:        1 bytes
  1600 ;; Hardware stack levels used: 1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_LCD_init
  1605 ;;		_LCD_cmd
  1606 ;;		_LCD_char
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610  05B2                     _LCD_write_nible:	
  1611                           ;psect for function _LCD_write_nible
  1612                           
  1613                           
  1614                           ;incstack = 0
  1615                           ; Regs used in _LCD_write_nible: [wreg]
  1616                           ;LCD_write_nible@nible stored from wreg
  1617  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1618  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1619  05B4  00A0               	movwf	LCD_write_nible@nible
  1620  05B5                     l961:
  1621                           
  1622                           ;./LCD.h: 101: void LCD_write_nible(unsigned char nible);./LCD.h: 102: {;./LCD.h: 103:  
      +                             if (nible & (1<<0)) PORTCbits.RC0 = 1; else PORTCbits.RC0 = 0;
  1623  05B5  1C20               	btfss	LCD_write_nible@nible,0
  1624  05B6  2DB8               	goto	u341
  1625  05B7  2DB9               	goto	u340
  1626  05B8                     u341:
  1627  05B8  2DBB               	goto	l32
  1628  05B9                     u340:
  1629  05B9                     l963:
  1630  05B9  1407               	bsf	7,0	;volatile
  1631  05BA  2DBC               	goto	l33
  1632  05BB                     l32:
  1633  05BB  1007               	bcf	7,0	;volatile
  1634  05BC                     l33:
  1635                           
  1636                           ;./LCD.h: 104:     if (nible & (1<<1)) PORTCbits.RC1 = 1; else PORTCbits.RC1 = 0;
  1637  05BC  1CA0               	btfss	LCD_write_nible@nible,1
  1638  05BD  2DBF               	goto	u351
  1639  05BE  2DC0               	goto	u350
  1640  05BF                     u351:
  1641  05BF  2DC2               	goto	l34
  1642  05C0                     u350:
  1643  05C0                     l965:
  1644  05C0  1487               	bsf	7,1	;volatile
  1645  05C1  2DC3               	goto	l35
  1646  05C2                     l34:
  1647  05C2  1087               	bcf	7,1	;volatile
  1648  05C3                     l35:
  1649                           
  1650                           ;./LCD.h: 105:     if (nible & (1<<2)) PORTCbits.RC2 = 1; else PORTCbits.RC2 = 0;
  1651  05C3  1D20               	btfss	LCD_write_nible@nible,2
  1652  05C4  2DC6               	goto	u361
  1653  05C5  2DC7               	goto	u360
  1654  05C6                     u361:
  1655  05C6  2DC9               	goto	l36
  1656  05C7                     u360:
  1657  05C7                     l967:
  1658  05C7  1507               	bsf	7,2	;volatile
  1659  05C8  2DCA               	goto	l37
  1660  05C9                     l36:
  1661  05C9  1107               	bcf	7,2	;volatile
  1662  05CA                     l37:
  1663                           
  1664                           ;./LCD.h: 106:     if (nible & (1<<3)) PORTCbits.RC3 = 1; else PORTCbits.RC3 = 0;
  1665  05CA  1DA0               	btfss	LCD_write_nible@nible,3
  1666  05CB  2DCD               	goto	u371
  1667  05CC  2DCE               	goto	u370
  1668  05CD                     u371:
  1669  05CD  2DD0               	goto	l38
  1670  05CE                     u370:
  1671  05CE                     l969:
  1672  05CE  1587               	bsf	7,3	;volatile
  1673  05CF  2DD1               	goto	l39
  1674  05D0                     l38:
  1675  05D0  1187               	bcf	7,3	;volatile
  1676  05D1                     l39:
  1677                           
  1678                           ;./LCD.h: 107:     PORTAbits.RA3 = 1;
  1679  05D1  1585               	bsf	5,3	;volatile
  1680                           
  1681                           ;./LCD.h: 108:     __nop(); __nop();
  1682  05D2  0000               	nop
  1683  05D3  0000               	nop
  1684                           
  1685                           ;./LCD.h: 109:     PORTAbits.RA3 = 0;
  1686  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1687  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1688  05D6  1185               	bcf	5,3	;volatile
  1689  05D7                     l40:
  1690  05D7  0008               	return
  1691  05D8                     __end_of_LCD_write_nible:
  1692                           
  1693                           	psect	text9
  1694  058E                     __ptext9:	
  1695 ;; *************** function _ADC_read *****************
  1696 ;; Defined at:
  1697 ;;		line 30 in file "./ADC.h"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  channel         1    wreg     unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  channel         1    3[BANK0 ] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  2    0[BANK0 ] unsigned int 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1
  1711 ;;      Params:         0       2       0
  1712 ;;      Locals:         0       1       0
  1713 ;;      Temps:          0       1       0
  1714 ;;      Totals:         0       4       0
  1715 ;;Total ram usage:        4 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724  058E                     _ADC_read:	
  1725                           ;psect for function _ADC_read
  1726                           
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1730                           ;ADC_read@channel stored from wreg
  1731  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1732  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1733  0590  00A3               	movwf	ADC_read@channel
  1734  0591                     l1073:
  1735                           
  1736                           ;./ADC.h: 30: uint16_t ADC_read(uint8_t channel);./ADC.h: 31: {;./ADC.h: 32:     ADCON0b
      +                          its.ADCS = channel;
  1737  0591  0823               	movf	ADC_read@channel,w
  1738  0592  00A2               	movwf	??_ADC_read
  1739  0593  0EA2               	swapf	??_ADC_read,f
  1740  0594  0DA2               	rlf	??_ADC_read,f
  1741  0595  0DA2               	rlf	??_ADC_read,f
  1742  0596  081F               	movf	31,w	;volatile
  1743  0597  0622               	xorwf	??_ADC_read,w
  1744  0598  393F               	andlw	-193
  1745  0599  0622               	xorwf	??_ADC_read,w
  1746  059A  009F               	movwf	31	;volatile
  1747  059B                     l1075:
  1748                           
  1749                           ;./ADC.h: 33:     _delay((unsigned long)((25)*(4000000/4000000.0)));
  1750  059B  3007               	movlw	7
  1751  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1752  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1753  059E  00A2               	movwf	??_ADC_read
  1754  059F                     u767:
  1755  059F  0BA2               	decfsz	??_ADC_read,f
  1756  05A0  2D9F               	goto	u767
  1757  05A1  2DA2               	nop2
  1758  05A2                     l1077:
  1759                           
  1760                           ;./ADC.h: 34:     ADCON0bits.GO = 1;
  1761  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1762  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1763  05A4  151F               	bsf	31,2	;volatile
  1764  05A5                     l78:	
  1765                           ;./ADC.h: 35:     while(ADCON0bits.GO_DONE);
  1766                           
  1767  05A5  191F               	btfsc	31,2	;volatile
  1768  05A6  2DA8               	goto	u561
  1769  05A7  2DA9               	goto	u560
  1770  05A8                     u561:
  1771  05A8  2DA5               	goto	l78
  1772  05A9                     u560:
  1773  05A9                     l1079:
  1774                           
  1775                           ;./ADC.h: 36:     return ((uint16_t)((ADRESH<<8)+ADRESL));
  1776  05A9  081E               	movf	30,w	;volatile
  1777  05AA  00A1               	movwf	?_ADC_read+1
  1778  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  1779  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  1780  05AD  081E               	movf	30,w	;volatile
  1781  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  1782  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  1783  05B0  00A0               	movwf	?_ADC_read
  1784  05B1                     l81:
  1785  05B1  0008               	return
  1786  05B2                     __end_of_ADC_read:
  1787                           
  1788                           	psect	text10
  1789  0548                     __ptext10:	
  1790 ;; *************** function _ADC_init *****************
  1791 ;; Defined at:
  1792 ;;		line 16 in file "./ADC.h"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1
  1806 ;;      Params:         0       0       0
  1807 ;;      Locals:         0       0       0
  1808 ;;      Temps:          0       0       0
  1809 ;;      Totals:         0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used: 1
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819  0548                     _ADC_init:	
  1820                           ;psect for function _ADC_init
  1821                           
  1822  0548                     l1061:	
  1823                           ;incstack = 0
  1824                           ; Regs used in _ADC_init: [wreg+status,2+status,0]
  1825                           
  1826                           
  1827                           ;./ADC.h: 18:     ADCON1bits.ADFM = 1;
  1828  0548  1683               	bsf	3,5	;RP0=1, select bank1
  1829  0549  1303               	bcf	3,6	;RP1=0, select bank1
  1830  054A  179F               	bsf	31,7	;volatile
  1831  054B                     l1063:
  1832                           
  1833                           ;./ADC.h: 19:     ADCON1bits.PCFG = 0b1110;
  1834  054B  081F               	movf	31,w	;volatile
  1835  054C  39F0               	andlw	-16
  1836  054D  380E               	iorlw	14
  1837  054E  009F               	movwf	31	;volatile
  1838  054F                     l1065:
  1839                           
  1840                           ;./ADC.h: 20:     ADCON1bits.ADCS2 = 0;
  1841  054F  131F               	bcf	31,6	;volatile
  1842  0550                     l1067:
  1843                           
  1844                           ;./ADC.h: 21:     ADCON0bits.ADCS1 = 0;
  1845  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0552  139F               	bcf	31,7	;volatile
  1848  0553                     l1069:
  1849                           
  1850                           ;./ADC.h: 22:     ADCON0bits.ADCS1 = 1;
  1851  0553  179F               	bsf	31,7	;volatile
  1852  0554                     l1071:
  1853                           
  1854                           ;./ADC.h: 23:     ADCON0bits.ADON = 1;
  1855  0554  141F               	bsf	31,0	;volatile
  1856  0555                     l75:
  1857  0555  0008               	return
  1858  0556                     __end_of_ADC_init:
  1859  007E                     btemp	set	126	;btemp
  1860  007E                     wtemp0	set	126
  1861                           
  1862                           	psect	idloc
  1863                           
  1864                           ;Config register IDLOC0 @ 0x2000
  1865                           ;	unspecified, using default values
  1866  2000                     	org	8192
  1867  2000  3FFF               	dw	16383
  1868                           
  1869                           ;Config register IDLOC1 @ 0x2001
  1870                           ;	unspecified, using default values
  1871  2001                     	org	8193
  1872  2001  3FFF               	dw	16383
  1873                           
  1874                           ;Config register IDLOC2 @ 0x2002
  1875                           ;	unspecified, using default values
  1876  2002                     	org	8194
  1877  2002  3FFF               	dw	16383
  1878                           
  1879                           ;Config register IDLOC3 @ 0x2003
  1880                           ;	unspecified, using default values
  1881  2003                     	org	8195
  1882  2003  3FFF               	dw	16383
  1883                           
  1884                           	psect	config
  1885                           
  1886                           ;Config register CONFIG @ 0x2007
  1887                           ;	Oscillator Selection bits
  1888                           ;	FOSC = XT, XT oscillator
  1889                           ;	Watchdog Timer Enable bit
  1890                           ;	WDTE = OFF, WDT disabled
  1891                           ;	Power-up Timer Enable bit
  1892                           ;	PWRTE = ON, PWRT enabled
  1893                           ;	Brown-out Reset Enable bit
  1894                           ;	BOREN = OFF, BOR disabled
  1895                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1896                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1897                           ;	Data EEPROM Memory Code Protection bit
  1898                           ;	CPD = OFF, Data EEPROM code protection off
  1899                           ;	Flash Program Memory Write Enable bits
  1900                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1901                           ;	In-Circuit Debugger Mode bit
  1902                           ;	DEBUG = 0x1, unprogrammed default
  1903                           ;	Flash Program Memory Code Protection bit
  1904                           ;	CP = OFF, Code protection off
  1905  2007                     	org	8199
  1906  2007  3F31               	dw	16177

Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     41      41
    BANK1            94      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_write_text@dato	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_write_text->_LCD_char
    _LCD_char->_LCD_write_nible
    _LCD_init->_LCD_cmd
    _LCD_cmd->_LCD_write_nible

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    1960
                                             27 BANK0     14    14      0
                           _ADC_init
                           _ADC_read
                            _LCD_cmd
                           _LCD_init
                     _LCD_write_text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_write_text                                       2     2      0     210
                                              3 BANK0      2     2      0
                           _LCD_char
 ---------------------------------------------------------------------------------
 (2) _LCD_char                                             2     2      0     132
                                              1 BANK0      2     2      0
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     264
                                              4 BANK0      2     2      0
                            _LCD_cmd
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              3     3      0     176
                                              1 BANK0      3     3      0
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (3) _LCD_write_nible                                      1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_cmd
     _LCD_write_nible
   _LCD_init
     _LCD_cmd
     _LCD_write_nible
   _LCD_write_text
     _LCD_char
       _LCD_write_nible
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     29      29       4       43.6%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 20:45:14 2022

                      pc 0002                       l40 05D7                       l32 05BB  
                     l33 05BC                       l34 05C2                       l50 058D  
                     l35 05C3                       l36 05C9                       l37 05CA  
                     l29 0722                       l38 05D0                       l39 05D1  
                     l47 0641                       l56 056E                       l81 05B1  
                     l75 0555                       l78 05A5                       l86 05DE  
                     fsr 0004                      l199 07FC                      l475 06C3  
                    l485 067D                      l961 05B5                      l963 05B9  
                    l971 060D                      l965 05C0                      l981 063A  
                    l973 060E                      l967 05C7                      l975 0621  
                    l983 0572                      l991 0682                      l969 05CE  
                    l977 0628                      l985 0573                      l993 0688  
                    l979 062E                      l987 0586                      l995 068B  
                    l997 0692                      l989 067E                      l999 0696  
                    u400 062E                      u401 062D                      u340 05B9  
                    u420 0688                      u341 05B8                      u421 0687  
                    u350 05C0                      u510 065C                      u351 05BF  
                    u415 0576                      u511 065B                      u360 05C7  
                    u440 069A                      u520 0666                      u600 0796  
                    u361 05C6                      u441 0699                      u521 0665  
                    u505 064E                      u601 0795                      u370 05CE  
                    u610 079C                      u371 05CD                      u435 068C  
                    u611 079B                      u460 06AB                      u540 0679  
                    u620 07E8                      u461 06AA                      u541 0678  
                    u525 0662                      u621 07E7                      u390 0628  
                    u550 056E                      u630 07F8                      u391 0627  
                    u551 056D                      u455 069B                      u535 066D  
                    u631 07F7                      u560 05A9                      u480 06BF  
                    u561 05A8                      u385 0611                      u481 06BE  
                    u465 06A7                      u490 064A                      u570 0731  
                    u707 06E8                      u475 06B3                      u491 0649  
                    u571 0730                      u580 0769                      u717 06F5  
                    u581 0768                      u590 078B                      u727 0700  
                    u591 078A                      u737 070B                      u747 0634  
                    u595 0787                      u757 063E                      u677 0602  
                    u767 059F                      u687 058A                      u697 06DA  
                    fsr0 0004                      indf 0000     LCD_write_nible@nible 0020  
        __end_of_LCD_cmd 0642                     l1001 069A                     l1003 06AB  
                   l1011 06BF                     l1005 06B1                     l1021 0654  
                   l1101 0765                     l1007 06B2                     l1031 0673  
                   l1023 0658                     l1015 0642                     l1103 0769  
                   l1041 06DE                     l1009 06B9                     l1025 065C  
                   l1017 064A                     l1033 0679                     l1121 079C  
                   l1113 0774                     l1105 076D                     l1051 0707  
                   l1043 06E2                     l1027 0666                     l1019 064D  
                   l1131 07DB                     l1123 07A3                     l1107 0772  
                   l1061 0548                     l1045 06F1                     l1037 06C4  
                   l1053 0559                     l1029 066C                     l1133 07DF  
                   l1125 07A7                     l1117 078C                     l1213 074E  
                   l1071 0554                     l1063 054B                     l1047 06F8  
                   l1039 06D4                     l1055 055A                     l1127 07AC  
                   l1119 0796                     l1135 07E8                     l1065 054F  
                   l1073 0591                     l1049 0703                     l1057 0560  
                   l1129 07D4                     l1137 07F8                     l1067 0550  
                   l1075 059B                     l1059 0566                     l1091 073D  
                   l1083 0726                     l1069 0553                     l1077 05A2  
                   l1085 072B                     l1079 05A9                     l1095 073E  
                   l1087 0731                     l1191 05FC                     l1097 0759  
                   l1089 0738                     l1185 05D8                     l1099 0761  
                   l1187 05EC                     l1189 05F8                     STR_1 0012  
                   _main 05D8                     btemp 007E                     start 0000  
       __end_of_ADC_init 0556         __end_of_ADC_read 05B2         ?_LCD_write_nible 0020  
       __end_of_LCD_char 058E         __end_of_LCD_init 0723                    ?_main 0020  
        __end_of___lwdiv 06C4          __end_of___lwmod 067E          __end_of_dpowers 0012  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 07FD          __initialization 07FD             __end_of_main 060A  
                 ??_main 003B                ??_LCD_cmd 0021                   _ADRESH 001E  
                 _ADRESL 009E                ??___lwdiv 0024                ??___lwmod 002C  
              ?_ADC_init 0020                ?_ADC_read 0020                ??_sprintf 0031  
__end_of__initialization 07FD                ?_LCD_char 0020                ?_LCD_init 0020  
         __pcstackCOMMON 0000          ADC_read@channel 0023               ??_ADC_init 0000  
             ??_ADC_read 0022               ??_LCD_char 0021               ??_LCD_init 0024  
             __pmaintext 05D8                  _LCD_cmd 060A               __stringtab 0002  
                ___lwdiv 067E                  ___lwmod 0642           _LCD_write_text 0556  
                __ptext1 0723                  __ptext2 0642                  __ptext3 067E  
                __ptext4 0556                  __ptext5 056F                  __ptext6 06C4  
                __ptext7 060A                  __ptext8 05B2                  __ptext9 058E  
                _dpowers 0008         LCD_char@caracter 0022                  _sprintf 0723  
                main@str 003D     end_of_initialization 07FD   __end_of_LCD_write_text 056F  
              _PORTAbits 0005                _PORTCbits 0007                _TRISAbits 0085  
              _TRISCbits 0087          ?_LCD_write_text 0020      start_initialization 07FD  
      ??_LCD_write_nible 0000                 ?_LCD_cmd 0020                ___latbits 0001  
          __pcstackBANK0 0020              sprintf@flag 0035              sprintf@prec 0036  
       ___lwdiv@dividend 0022                 ?___lwdiv 0020                 ?___lwmod 0028  
              __pstrings 0002                 _ADC_init 0548                 _ADC_read 058E  
       ___lwdiv@quotient 0025                 ?_sprintf 002E                 _LCD_char 056F  
               _LCD_init 06C4               _ADCON0bits 001F              __stringbase 0007  
             _ADCON1bits 009F         ??_LCD_write_text 0023       LCD_write_text@dato 0024  
     __end_of__stringtab 0008          _LCD_write_nible 05B2               sprintf@val 0037  
        ___lwdiv@divisor 0020          ___lwdiv@counter 0027                 __ptext10 0548  
         LCD_cmd@comando 0023                 main@dato 0047                sprintf@ap 0034  
              sprintf@sp 0039         ___lwmod@dividend 002A                stringcode 0002  
__end_of_LCD_write_nible 05D8                 sprintf@c 003A                 sprintf@f 002E  
        ___lwmod@divisor 0028          ___lwmod@counter 002D                 stringdir 0002  
               stringtab 0002  
