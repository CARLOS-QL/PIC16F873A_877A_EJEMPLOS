

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 21:10:12 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F873A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169                           
   170                           	psect	strings
   171  0002                     __pstrings:
   172  0002                     stringtab:
   173  0002                     __stringtab:
   174  0002                     stringcode:	
   175                           ;	String table - string pointers are 1 byte each
   176                           
   177  0002                     stringdir:
   178  0002  3000               	movlw	high stringdir
   179  0003  008A               	movwf	10
   180  0004  0804               	movf	4,w
   181  0005  0A84               	incf	4,f
   182  0006  0782               	addwf	2,f
   183  0007                     __stringbase:
   184  0007  3400               	retlw	0
   185  0008                     __end_of__stringtab:
   186  0008                     _dpowers:
   187  0008  3401               	retlw	1
   188  0009  3400               	retlw	0
   189  000A  340A               	retlw	10
   190  000B  3400               	retlw	0
   191  000C  3464               	retlw	100
   192  000D  3400               	retlw	0
   193  000E  34E8               	retlw	232
   194  000F  3403               	retlw	3
   195  0010  3410               	retlw	16
   196  0011  3427               	retlw	39
   197  0012                     __end_of_dpowers:
   198  0015                     _CCPR1L	set	21
   199  0017                     _CCP1CONbits	set	23
   200  0017                     _CCP1CON	set	23
   201  0012                     _T2CONbits	set	18
   202  0011                     _TMR2	set	17
   203  0019                     _TXREG	set	25
   204  001A                     _RCREG	set	26
   205  000C                     _PIR1bits	set	12
   206  0018                     _RCSTAbits	set	24
   207  001E                     _ADRESH	set	30
   208  001F                     _ADCON0bits	set	31
   209  0092                     _PR2	set	146
   210  0099                     _SPBRG	set	153
   211  0098                     _TXSTAbits	set	152
   212  0087                     _TRISCbits	set	135
   213  009E                     _ADRESL	set	158
   214  009F                     _ADCON1bits	set	159
   215  0012                     STR_1:
   216  0012  3461               	retlw	97	;'a'
   217  0013  3464               	retlw	100	;'d'
   218  0014  3463               	retlw	99	;'c'
   219  0015  3420               	retlw	32	;' '
   220  0016  343D               	retlw	61	;'='
   221  0017  3420               	retlw	32	;' '
   222  0018  3425               	retlw	37	;'%'
   223  0019  3464               	retlw	100	;'d'
   224  001A  340A               	retlw	10
   225  001B  340D               	retlw	13
   226  001C  3400               	retlw	0
   227                           
   228                           	psect	cinit
   229  07FD                     start_initialization:	
   230                           ; #config settings
   231                           
   232  07FD                     __initialization:
   233  07FD                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236  07FD                     __end_of__initialization:
   237  07FD  0183               	clrf	3
   238  07FE  118A  2ED0         	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	cstackCOMMON
   241  0000                     __pcstackCOMMON:
   242  0000                     ??_ADC_init:
   243  0000                     ??_UART_init:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0000                     ??_UART_write:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0000                     ??_TIMER2_init:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           	psect	cstackBANK0
   254  0020                     __pcstackBANK0:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0020                     ?_ADC_init:
   258  0020                     ?_UART_init:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0020                     ?_UART_write:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0020                     ?_UART_write_text:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0020                     ?_TIMER2_init:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0020                     ?_main:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0020                     ?_ADC_read:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0020                     ?___lwdiv:	
   277                           ; 2 bytes @ 0x0
   278                           
   279  0020                     UART_write@dato:	
   280                           ; 2 bytes @ 0x0
   281                           
   282  0020                     ___lwdiv@divisor:	
   283                           ; 1 bytes @ 0x0
   284                           
   285                           
   286                           ; 2 bytes @ 0x0
   287  0020                     	ds	1
   288  0021                     ??_UART_write_text:
   289                           
   290                           ; 1 bytes @ 0x1
   291  0021                     	ds	1
   292  0022                     ??_ADC_read:
   293  0022                     UART_write_text@cadena:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0022                     ___lwdiv@dividend:	
   297                           ; 1 bytes @ 0x2
   298                           
   299                           
   300                           ; 2 bytes @ 0x2
   301  0022                     	ds	1
   302  0023                     ADC_read@channel:
   303                           
   304                           ; 1 bytes @ 0x3
   305  0023                     	ds	1
   306  0024                     ??___lwdiv:
   307                           
   308                           ; 1 bytes @ 0x4
   309  0024                     	ds	1
   310  0025                     ___lwdiv@quotient:
   311                           
   312                           ; 2 bytes @ 0x5
   313  0025                     	ds	2
   314  0027                     ___lwdiv@counter:
   315                           
   316                           ; 1 bytes @ 0x7
   317  0027                     	ds	1
   318  0028                     ?___lwmod:
   319  0028                     ___lwmod@divisor:	
   320                           ; 2 bytes @ 0x8
   321                           
   322                           
   323                           ; 2 bytes @ 0x8
   324  0028                     	ds	2
   325  002A                     ___lwmod@dividend:
   326                           
   327                           ; 2 bytes @ 0xA
   328  002A                     	ds	2
   329  002C                     ??___lwmod:
   330                           
   331                           ; 1 bytes @ 0xC
   332  002C                     	ds	1
   333  002D                     ___lwmod@counter:
   334                           
   335                           ; 1 bytes @ 0xD
   336  002D                     	ds	1
   337  002E                     ?_sprintf:
   338  002E                     sprintf@f:	
   339                           ; 2 bytes @ 0xE
   340                           
   341                           
   342                           ; 1 bytes @ 0xE
   343  002E                     	ds	3
   344  0031                     ??_sprintf:
   345                           
   346                           ; 1 bytes @ 0x11
   347  0031                     	ds	3
   348  0034                     sprintf@ap:
   349                           
   350                           ; 1 bytes @ 0x14
   351  0034                     	ds	1
   352  0035                     sprintf@flag:
   353                           
   354                           ; 1 bytes @ 0x15
   355  0035                     	ds	1
   356  0036                     sprintf@prec:
   357                           
   358                           ; 1 bytes @ 0x16
   359  0036                     	ds	1
   360  0037                     sprintf@val:
   361                           
   362                           ; 2 bytes @ 0x17
   363  0037                     	ds	2
   364  0039                     sprintf@sp:
   365                           
   366                           ; 1 bytes @ 0x19
   367  0039                     	ds	1
   368  003A                     sprintf@c:
   369                           
   370                           ; 1 bytes @ 0x1A
   371  003A                     	ds	1
   372  003B                     ??_main:
   373                           
   374                           ; 1 bytes @ 0x1B
   375  003B                     	ds	2
   376  003D                     main@dato:
   377                           
   378                           ; 15 bytes @ 0x1D
   379  003D                     	ds	15
   380  004C                     main@dc:
   381                           
   382                           ; 2 bytes @ 0x2C
   383  004C                     	ds	2
   384                           
   385                           	psect	maintext
   386  06D0                     __pmaintext:	
   387 ;;
   388 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   389 ;;
   390 ;; *************** function _main *****************
   391 ;; Defined at:
   392 ;;		line 31 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  dc              2   44[BANK0 ] unsigned int 
   397 ;;  dato           15   29[BANK0 ] unsigned char [15]
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : B00/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMMON   BANK0   BANK1
   407 ;;      Params:         0       0       0
   408 ;;      Locals:         0      17       0
   409 ;;      Temps:          0       2       0
   410 ;;      Totals:         0      19       0
   411 ;;Total ram usage:       19 bytes
   412 ;; Hardware stack levels required when called: 2
   413 ;; This function calls:
   414 ;;		_ADC_init
   415 ;;		_ADC_read
   416 ;;		_TIMER2_init
   417 ;;		_UART_init
   418 ;;		_UART_write_text
   419 ;;		_sprintf
   420 ;; This function is called by:
   421 ;;		Startup code after reset
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425  06D0                     _main:	
   426                           ;psect for function _main
   427                           
   428  06D0                     l1068:	
   429                           ;incstack = 0
   430                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   431                           
   432                           
   433                           ;main.c: 33: uint8_t dato[15];;main.c: 34: TRISCbits.TRISC2 = 0;
   434  06D0  1683               	bsf	3,5	;RP0=1, select bank1
   435  06D1  1303               	bcf	3,6	;RP1=0, select bank1
   436  06D2  1107               	bcf	7,2	;volatile
   437  06D3                     l1070:
   438                           
   439                           ;main.c: 35: TIMER2_init();
   440  06D3  118A  25EF  118A   	fcall	_TIMER2_init
   441                           
   442                           ;main.c: 36: ADC_init();
   443  06D6  118A  25E1  118A   	fcall	_ADC_init
   444                           
   445                           ;main.c: 37: UART_init();
   446  06D9  118A  25FE  118A   	fcall	_UART_init
   447  06DC                     l1072:
   448                           
   449                           ;main.c: 39: CCP1CON = 0B00001100;
   450  06DC  300C               	movlw	12
   451  06DD  1283               	bcf	3,5	;RP0=0, select bank0
   452  06DE  1303               	bcf	3,6	;RP1=0, select bank0
   453  06DF  0097               	movwf	23	;volatile
   454  06E0                     l1074:
   455                           
   456                           ;main.c: 48: unsigned int dc = ADC_read(0);
   457  06E0  3000               	movlw	0
   458  06E1  118A  262A  118A   	fcall	_ADC_read
   459  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   460  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   461  06E6  0821               	movf	?_ADC_read+1,w
   462  06E7  00CD               	movwf	main@dc+1
   463  06E8  0820               	movf	?_ADC_read,w
   464  06E9  00CC               	movwf	main@dc
   465  06EA                     l1076:
   466                           
   467                           ;main.c: 49: sprintf(dato, "adc = %d\n\r", dc);
   468  06EA  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   469  06EB  00BB               	movwf	??_main
   470  06EC  083B               	movf	??_main,w
   471  06ED  00AE               	movwf	sprintf@f
   472  06EE  084D               	movf	main@dc+1,w
   473  06EF  00B0               	movwf	?_sprintf+2
   474  06F0  084C               	movf	main@dc,w
   475  06F1  00AF               	movwf	?_sprintf+1
   476  06F2  303D               	movlw	(low (main@dato| 0))& (0+255)
   477  06F3  118A  272B  118A   	fcall	_sprintf
   478  06F6                     l1078:
   479                           
   480                           ;main.c: 50: UART_write_text(dato);
   481  06F6  303D               	movlw	(low (main@dato| 0))& (0+255)
   482  06F7  118A  2611  118A   	fcall	_UART_write_text
   483  06FA                     l1080:
   484                           
   485                           ;main.c: 51: if(dc>1000) dc =1000;
   486  06FA  3003               	movlw	3
   487  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   488  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   489  06FD  024D               	subwf	main@dc+1,w
   490  06FE  30E9               	movlw	233
   491  06FF  1903               	skipnz
   492  0700  024C               	subwf	main@dc,w
   493  0701  1C03               	skipc
   494  0702  2F04               	goto	u501
   495  0703  2F05               	goto	u500
   496  0704                     u501:
   497  0704  2F09               	goto	l1084
   498  0705                     u500:
   499  0705                     l1082:
   500  0705  30E8               	movlw	232
   501  0706  00CC               	movwf	main@dc
   502  0707  3003               	movlw	3
   503  0708  00CD               	movwf	main@dc+1
   504  0709                     l1084:
   505                           
   506                           ;main.c: 52: CCP1CONbits.CCP1Y = dc & (1<<0);
   507  0709  084C               	movf	main@dc,w
   508  070A  3901               	andlw	1
   509  070B  00BB               	movwf	??_main
   510  070C  0EBB               	swapf	??_main,f
   511  070D  0817               	movf	23,w	;volatile
   512  070E  063B               	xorwf	??_main,w
   513  070F  39EF               	andlw	-17
   514  0710  063B               	xorwf	??_main,w
   515  0711  0097               	movwf	23	;volatile
   516  0712                     l1086:
   517                           
   518                           ;main.c: 53: CCP1CONbits.CCP1X = dc & (1<<1);
   519  0712  084C               	movf	main@dc,w
   520  0713  3902               	andlw	2
   521  0714  00BB               	movwf	??_main
   522  0715  0EBB               	swapf	??_main,f
   523  0716  0DBB               	rlf	??_main,f
   524  0717  0817               	movf	23,w	;volatile
   525  0718  063B               	xorwf	??_main,w
   526  0719  39DF               	andlw	-33
   527  071A  063B               	xorwf	??_main,w
   528  071B  0097               	movwf	23	;volatile
   529  071C                     l1088:
   530                           
   531                           ;main.c: 54: CCPR1L = dc>>2;
   532  071C  084D               	movf	main@dc+1,w
   533  071D  00BC               	movwf	??_main+1
   534  071E  084C               	movf	main@dc,w
   535  071F  00BB               	movwf	??_main
   536  0720  1003               	clrc
   537  0721  0CBC               	rrf	??_main+1,f
   538  0722  0CBB               	rrf	??_main,f
   539  0723  1003               	clrc
   540  0724  0CBC               	rrf	??_main+1,f
   541  0725  0CBB               	rrf	??_main,f
   542  0726  083B               	movf	??_main,w
   543  0727  0095               	movwf	21	;volatile
   544  0728  2EE0               	goto	l1074
   545  0729  118A  2800         	ljmp	start
   546  072B                     __end_of_main:
   547                           
   548                           	psect	text1
   549  072B                     __ptext1:	
   550 ;; *************** function _sprintf *****************
   551 ;; Defined at:
   552 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  sp              1    wreg     PTR unsigned char 
   555 ;;		 -> main@dato(15), 
   556 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   557 ;;		 -> STR_1(11), 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  sp              1   25[BANK0 ] PTR unsigned char 
   560 ;;		 -> main@dato(15), 
   561 ;;  tmpval          4    0        struct .
   562 ;;  val             2   23[BANK0 ] unsigned int 
   563 ;;  cp              2    0        PTR const unsigned char 
   564 ;;  len             2    0        unsigned int 
   565 ;;  c               1   26[BANK0 ] unsigned char 
   566 ;;  prec            1   22[BANK0 ] char 
   567 ;;  flag            1   21[BANK0 ] unsigned char 
   568 ;;  ap              1   20[BANK0 ] PTR void [1]
   569 ;;		 -> ?_sprintf(2), 
   570 ;; Return value:  Size  Location     Type
   571 ;;                  2   14[BANK0 ] int 
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1
   579 ;;      Params:         0       3       0
   580 ;;      Locals:         0       7       0
   581 ;;      Temps:          0       3       0
   582 ;;      Totals:         0      13       0
   583 ;;Total ram usage:       13 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; Hardware stack levels required when called: 1
   586 ;; This function calls:
   587 ;;		___lwdiv
   588 ;;		___lwmod
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594  072B                     _sprintf:	
   595                           ;psect for function _sprintf
   596                           
   597                           
   598                           ;incstack = 0
   599                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   600                           ;sprintf@sp stored from wreg
   601  072B  1283               	bcf	3,5	;RP0=0, select bank0
   602  072C  1303               	bcf	3,6	;RP1=0, select bank0
   603  072D  00B9               	movwf	sprintf@sp
   604  072E                     l1008:
   605                           
   606                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   607  072E  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   608  072F  00B1               	movwf	??_sprintf
   609  0730  0831               	movf	??_sprintf,w
   610  0731  00B4               	movwf	sprintf@ap
   611                           
   612                           ;doprnt.c: 553: while((c = *f++)) {
   613  0732  2FE8               	goto	l1060
   614  0733                     l1010:
   615                           
   616                           ;doprnt.c: 555: if(c != '%')
   617  0733  3025               	movlw	37
   618  0734  063A               	xorwf	sprintf@c,w
   619  0735  1903               	btfsc	3,2
   620  0736  2F38               	goto	u431
   621  0737  2F39               	goto	u430
   622  0738                     u431:
   623  0738  2F45               	goto	l1016
   624  0739                     u430:
   625  0739                     l1012:
   626                           
   627                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   628  0739  083A               	movf	sprintf@c,w
   629  073A  00B1               	movwf	??_sprintf
   630  073B  0839               	movf	sprintf@sp,w
   631  073C  0084               	movwf	4
   632  073D  0831               	movf	??_sprintf,w
   633  073E  1383               	bcf	3,7	;select IRP bank0
   634  073F  0080               	movwf	0
   635  0740                     l1014:
   636  0740  3001               	movlw	1
   637  0741  00B1               	movwf	??_sprintf
   638  0742  0831               	movf	??_sprintf,w
   639  0743  07B9               	addwf	sprintf@sp,f
   640                           
   641                           ;doprnt.c: 559: continue;
   642  0744  2FE8               	goto	l1060
   643  0745                     l1016:
   644                           
   645                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   646  0745  01B5               	clrf	sprintf@flag
   647  0746                     l1020:	
   648                           ;doprnt.c: 661: switch(c = *f++) {
   649                           
   650  0746  3001               	movlw	1
   651  0747  07AE               	addwf	sprintf@f,f
   652  0748  30FF               	movlw	-1
   653  0749  072E               	addwf	sprintf@f,w
   654  074A  0084               	movwf	4
   655  074B  118A  2002  118A   	fcall	stringdir
   656  074E  00BA               	movwf	sprintf@c
   657                           
   658                           ; Switch size 1, requested type "simple"
   659                           ; Number of cases is 3, Range of values is 0 to 105
   660                           ; switch strategies available:
   661                           ; Name         Instructions Cycles
   662                           ; simple_byte           10     6 (average)
   663                           ; direct_byte          219     7 (fixed)
   664                           ; jumptable            260     6 (fixed)
   665                           ;	Chosen strategy is simple_byte
   666  074F  3A00               	xorlw	0	; case 0
   667  0750  1903               	skipnz
   668  0751  2FF8               	goto	l1062
   669  0752  3A64               	xorlw	100	; case 100
   670  0753  1903               	skipnz
   671  0754  2F59               	goto	l1022
   672  0755  3A0D               	xorlw	13	; case 105
   673  0756  1903               	skipnz
   674  0757  2F59               	goto	l1022
   675  0758  2FE8               	goto	l1060
   676  0759                     l1022:
   677                           
   678                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
   679  0759  0834               	movf	sprintf@ap,w
   680  075A  0084               	movwf	4
   681  075B  1383               	bcf	3,7	;select IRP bank0
   682  075C  0800               	movf	0,w
   683  075D  00B7               	movwf	sprintf@val
   684  075E  0A84               	incf	4,f
   685  075F  0800               	movf	0,w
   686  0760  00B8               	movwf	sprintf@val+1
   687  0761                     l1024:
   688  0761  3002               	movlw	2
   689  0762  00B1               	movwf	??_sprintf
   690  0763  0831               	movf	??_sprintf,w
   691  0764  07B4               	addwf	sprintf@ap,f
   692  0765                     l1026:
   693                           
   694                           ;doprnt.c: 1287: if((int)val < 0) {
   695  0765  1FB8               	btfss	sprintf@val+1,7
   696  0766  2F68               	goto	u441
   697  0767  2F69               	goto	u440
   698  0768                     u441:
   699  0768  2F72               	goto	l1032
   700  0769                     u440:
   701  0769                     l1028:
   702                           
   703                           ;doprnt.c: 1288: flag |= 0x03;
   704  0769  3003               	movlw	3
   705  076A  00B1               	movwf	??_sprintf
   706  076B  0831               	movf	??_sprintf,w
   707  076C  04B5               	iorwf	sprintf@flag,f
   708  076D                     l1030:
   709                           
   710                           ;doprnt.c: 1289: val = -val;
   711  076D  09B7               	comf	sprintf@val,f
   712  076E  09B8               	comf	sprintf@val+1,f
   713  076F  0AB7               	incf	sprintf@val,f
   714  0770  1903               	skipnz
   715  0771  0AB8               	incf	sprintf@val+1,f
   716  0772                     l1032:
   717                           
   718                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
   719  0772  01BA               	clrf	sprintf@c
   720  0773  0ABA               	incf	sprintf@c,f
   721  0774                     l1038:
   722                           
   723                           ;doprnt.c: 1332: if(val < dpowers[c])
   724  0774  083A               	movf	sprintf@c,w
   725  0775  00B1               	movwf	??_sprintf
   726  0776  0731               	addwf	??_sprintf,w
   727  0777  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   728  0778  0084               	movwf	4
   729  0779  118A  2002  118A   	fcall	stringdir
   730  077C  00B2               	movwf	??_sprintf+1
   731  077D  118A  2002  118A   	fcall	stringdir
   732  0780  00B3               	movwf	??_sprintf+2
   733  0781  0833               	movf	??_sprintf+2,w
   734  0782  0238               	subwf	sprintf@val+1,w
   735  0783  1D03               	skipz
   736  0784  2F87               	goto	u455
   737  0785  0832               	movf	??_sprintf+1,w
   738  0786  0237               	subwf	sprintf@val,w
   739  0787                     u455:
   740  0787  1803               	skipnc
   741  0788  2F8A               	goto	u451
   742  0789  2F8B               	goto	u450
   743  078A                     u451:
   744  078A  2F8C               	goto	l1042
   745  078B                     u450:
   746  078B  2F96               	goto	l1044
   747  078C                     l1042:
   748  078C  3001               	movlw	1
   749  078D  00B1               	movwf	??_sprintf
   750  078E  0831               	movf	??_sprintf,w
   751  078F  07BA               	addwf	sprintf@c,f
   752  0790  3005               	movlw	5
   753  0791  063A               	xorwf	sprintf@c,w
   754  0792  1D03               	btfss	3,2
   755  0793  2F95               	goto	u461
   756  0794  2F96               	goto	u460
   757  0795                     u461:
   758  0795  2F74               	goto	l1038
   759  0796                     u460:
   760  0796                     l1044:
   761                           
   762                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
   763  0796  0835               	movf	sprintf@flag,w
   764  0797  3903               	andlw	3
   765  0798  1903               	btfsc	3,2
   766  0799  2F9B               	goto	u471
   767  079A  2F9C               	goto	u470
   768  079B                     u471:
   769  079B  2FA7               	goto	l1050
   770  079C                     u470:
   771  079C                     l1046:
   772                           
   773                           ;doprnt.c: 1465: ((*sp++ = ('-')));
   774  079C  302D               	movlw	45
   775  079D  00B1               	movwf	??_sprintf
   776  079E  0839               	movf	sprintf@sp,w
   777  079F  0084               	movwf	4
   778  07A0  0831               	movf	??_sprintf,w
   779  07A1  1383               	bcf	3,7	;select IRP bank0
   780  07A2  0080               	movwf	0
   781  07A3                     l1048:
   782  07A3  3001               	movlw	1
   783  07A4  00B1               	movwf	??_sprintf
   784  07A5  0831               	movf	??_sprintf,w
   785  07A6  07B9               	addwf	sprintf@sp,f
   786  07A7                     l1050:
   787                           
   788                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   789  07A7  083A               	movf	sprintf@c,w
   790  07A8  00B1               	movwf	??_sprintf
   791  07A9  0831               	movf	??_sprintf,w
   792  07AA  00B6               	movwf	sprintf@prec
   793                           
   794                           ;doprnt.c: 1500: while(prec--) {
   795  07AB  2FDF               	goto	l1058
   796  07AC                     l1052:
   797                           
   798                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   799  07AC  300A               	movlw	10
   800  07AD  00A8               	movwf	___lwmod@divisor
   801  07AE  3000               	movlw	0
   802  07AF  00A9               	movwf	___lwmod@divisor+1
   803  07B0  0836               	movf	sprintf@prec,w
   804  07B1  00B1               	movwf	??_sprintf
   805  07B2  0731               	addwf	??_sprintf,w
   806  07B3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   807  07B4  0084               	movwf	4
   808  07B5  118A  2002  118A   	fcall	stringdir
   809  07B8  00A0               	movwf	___lwdiv@divisor
   810  07B9  118A  2002  118A   	fcall	stringdir
   811  07BC  00A1               	movwf	___lwdiv@divisor+1
   812  07BD  0838               	movf	sprintf@val+1,w
   813  07BE  00A3               	movwf	___lwdiv@dividend+1
   814  07BF  0837               	movf	sprintf@val,w
   815  07C0  00A2               	movwf	___lwdiv@dividend
   816  07C1  118A  268A  118A   	fcall	___lwdiv
   817  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   818  07C5  1303               	bcf	3,6	;RP1=0, select bank0
   819  07C6  0821               	movf	?___lwdiv+1,w
   820  07C7  00AB               	movwf	___lwmod@dividend+1
   821  07C8  0820               	movf	?___lwdiv,w
   822  07C9  00AA               	movwf	___lwmod@dividend
   823  07CA  118A  264E  118A   	fcall	___lwmod
   824  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   825  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   826  07CF  0828               	movf	?___lwmod,w
   827  07D0  3E30               	addlw	48
   828  07D1  00B2               	movwf	??_sprintf+1
   829  07D2  0832               	movf	??_sprintf+1,w
   830  07D3  00BA               	movwf	sprintf@c
   831  07D4                     l1054:
   832                           
   833                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
   834  07D4  083A               	movf	sprintf@c,w
   835  07D5  00B1               	movwf	??_sprintf
   836  07D6  0839               	movf	sprintf@sp,w
   837  07D7  0084               	movwf	4
   838  07D8  0831               	movf	??_sprintf,w
   839  07D9  1383               	bcf	3,7	;select IRP bank0
   840  07DA  0080               	movwf	0
   841  07DB                     l1056:
   842  07DB  3001               	movlw	1
   843  07DC  00B1               	movwf	??_sprintf
   844  07DD  0831               	movf	??_sprintf,w
   845  07DE  07B9               	addwf	sprintf@sp,f
   846  07DF                     l1058:
   847  07DF  30FF               	movlw	255
   848  07E0  00B1               	movwf	??_sprintf
   849  07E1  0831               	movf	??_sprintf,w
   850  07E2  07B6               	addwf	sprintf@prec,f
   851  07E3  0A36               	incf	sprintf@prec,w
   852  07E4  1D03               	btfss	3,2
   853  07E5  2FE7               	goto	u481
   854  07E6  2FE8               	goto	u480
   855  07E7                     u481:
   856  07E7  2FAC               	goto	l1052
   857  07E8                     u480:
   858  07E8                     l1060:
   859  07E8  3001               	movlw	1
   860  07E9  07AE               	addwf	sprintf@f,f
   861  07EA  30FF               	movlw	-1
   862  07EB  072E               	addwf	sprintf@f,w
   863  07EC  0084               	movwf	4
   864  07ED  118A  2002  118A   	fcall	stringdir
   865  07F0  00B1               	movwf	??_sprintf
   866  07F1  0831               	movf	??_sprintf,w
   867  07F2  00BA               	movwf	sprintf@c
   868  07F3  083A               	movf	sprintf@c,w
   869  07F4  1D03               	btfss	3,2
   870  07F5  2FF7               	goto	u491
   871  07F6  2FF8               	goto	u490
   872  07F7                     u491:
   873  07F7  2F33               	goto	l1010
   874  07F8                     u490:
   875  07F8                     l1062:
   876                           
   877                           ;doprnt.c: 1564: *sp = 0;
   878  07F8  0839               	movf	sprintf@sp,w
   879  07F9  0084               	movwf	4
   880  07FA  1383               	bcf	3,7	;select IRP bank0
   881  07FB  0180               	clrf	0
   882  07FC                     l200:
   883  07FC  0008               	return
   884  07FD                     __end_of_sprintf:
   885                           
   886                           	psect	text2
   887  064E                     __ptext2:	
   888 ;; *************** function ___lwmod *****************
   889 ;; Defined at:
   890 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;  divisor         2    8[BANK0 ] unsigned int 
   893 ;;  dividend        2   10[BANK0 ] unsigned int 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  counter         1   13[BANK0 ] unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  2    8[BANK0 ] unsigned int 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1
   905 ;;      Params:         0       4       0
   906 ;;      Locals:         0       1       0
   907 ;;      Temps:          0       1       0
   908 ;;      Totals:         0       6       0
   909 ;;Total ram usage:        6 bytes
   910 ;; Hardware stack levels used: 1
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_sprintf
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918  064E                     ___lwmod:	
   919                           ;psect for function ___lwmod
   920                           
   921  064E                     l936:	
   922                           ;incstack = 0
   923                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   924                           
   925  064E  1283               	bcf	3,5	;RP0=0, select bank0
   926  064F  1303               	bcf	3,6	;RP1=0, select bank0
   927  0650  0828               	movf	___lwmod@divisor,w
   928  0651  0429               	iorwf	___lwmod@divisor+1,w
   929  0652  1903               	btfsc	3,2
   930  0653  2E55               	goto	u351
   931  0654  2E56               	goto	u350
   932  0655                     u351:
   933  0655  2E85               	goto	l954
   934  0656                     u350:
   935  0656                     l938:
   936  0656  01AD               	clrf	___lwmod@counter
   937  0657  0AAD               	incf	___lwmod@counter,f
   938  0658  2E64               	goto	l944
   939  0659                     l940:
   940  0659  3001               	movlw	1
   941  065A                     u365:
   942  065A  1003               	clrc
   943  065B  0DA8               	rlf	___lwmod@divisor,f
   944  065C  0DA9               	rlf	___lwmod@divisor+1,f
   945  065D  3EFF               	addlw	-1
   946  065E  1D03               	skipz
   947  065F  2E5A               	goto	u365
   948  0660                     l942:
   949  0660  3001               	movlw	1
   950  0661  00AC               	movwf	??___lwmod
   951  0662  082C               	movf	??___lwmod,w
   952  0663  07AD               	addwf	___lwmod@counter,f
   953  0664                     l944:
   954  0664  1FA9               	btfss	___lwmod@divisor+1,7
   955  0665  2E67               	goto	u371
   956  0666  2E68               	goto	u370
   957  0667                     u371:
   958  0667  2E59               	goto	l940
   959  0668                     u370:
   960  0668                     l946:
   961  0668  0829               	movf	___lwmod@divisor+1,w
   962  0669  022B               	subwf	___lwmod@dividend+1,w
   963  066A  1D03               	skipz
   964  066B  2E6E               	goto	u385
   965  066C  0828               	movf	___lwmod@divisor,w
   966  066D  022A               	subwf	___lwmod@dividend,w
   967  066E                     u385:
   968  066E  1C03               	skipc
   969  066F  2E71               	goto	u381
   970  0670  2E72               	goto	u380
   971  0671                     u381:
   972  0671  2E78               	goto	l950
   973  0672                     u380:
   974  0672                     l948:
   975  0672  0828               	movf	___lwmod@divisor,w
   976  0673  02AA               	subwf	___lwmod@dividend,f
   977  0674  0829               	movf	___lwmod@divisor+1,w
   978  0675  1C03               	skipc
   979  0676  03AB               	decf	___lwmod@dividend+1,f
   980  0677  02AB               	subwf	___lwmod@dividend+1,f
   981  0678                     l950:
   982  0678  3001               	movlw	1
   983  0679                     u395:
   984  0679  1003               	clrc
   985  067A  0CA9               	rrf	___lwmod@divisor+1,f
   986  067B  0CA8               	rrf	___lwmod@divisor,f
   987  067C  3EFF               	addlw	-1
   988  067D  1D03               	skipz
   989  067E  2E79               	goto	u395
   990  067F                     l952:
   991  067F  3001               	movlw	1
   992  0680  02AD               	subwf	___lwmod@counter,f
   993  0681  1D03               	btfss	3,2
   994  0682  2E84               	goto	u401
   995  0683  2E85               	goto	u400
   996  0684                     u401:
   997  0684  2E68               	goto	l946
   998  0685                     u400:
   999  0685                     l954:
  1000  0685  082B               	movf	___lwmod@dividend+1,w
  1001  0686  00A9               	movwf	?___lwmod+1
  1002  0687  082A               	movf	___lwmod@dividend,w
  1003  0688  00A8               	movwf	?___lwmod
  1004  0689                     l486:
  1005  0689  0008               	return
  1006  068A                     __end_of___lwmod:
  1007                           
  1008                           	psect	text3
  1009  068A                     __ptext3:	
  1010 ;; *************** function ___lwdiv *****************
  1011 ;; Defined at:
  1012 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;  divisor         2    0[BANK0 ] unsigned int 
  1015 ;;  dividend        2    2[BANK0 ] unsigned int 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  quotient        2    5[BANK0 ] unsigned int 
  1018 ;;  counter         1    7[BANK0 ] unsigned char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2    0[BANK0 ] unsigned int 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1
  1028 ;;      Params:         0       4       0
  1029 ;;      Locals:         0       3       0
  1030 ;;      Temps:          0       1       0
  1031 ;;      Totals:         0       8       0
  1032 ;;Total ram usage:        8 bytes
  1033 ;; Hardware stack levels used: 1
  1034 ;; This function calls:
  1035 ;;		Nothing
  1036 ;; This function is called by:
  1037 ;;		_sprintf
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041  068A                     ___lwdiv:	
  1042                           ;psect for function ___lwdiv
  1043                           
  1044  068A                     l910:	
  1045                           ;incstack = 0
  1046                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1047                           
  1048  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1049  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1050  068C  01A5               	clrf	___lwdiv@quotient
  1051  068D  01A6               	clrf	___lwdiv@quotient+1
  1052  068E                     l912:
  1053  068E  0820               	movf	___lwdiv@divisor,w
  1054  068F  0421               	iorwf	___lwdiv@divisor+1,w
  1055  0690  1903               	btfsc	3,2
  1056  0691  2E93               	goto	u281
  1057  0692  2E94               	goto	u280
  1058  0693                     u281:
  1059  0693  2ECB               	goto	l932
  1060  0694                     u280:
  1061  0694                     l914:
  1062  0694  01A7               	clrf	___lwdiv@counter
  1063  0695  0AA7               	incf	___lwdiv@counter,f
  1064  0696  2EA2               	goto	l920
  1065  0697                     l916:
  1066  0697  3001               	movlw	1
  1067  0698                     u295:
  1068  0698  1003               	clrc
  1069  0699  0DA0               	rlf	___lwdiv@divisor,f
  1070  069A  0DA1               	rlf	___lwdiv@divisor+1,f
  1071  069B  3EFF               	addlw	-1
  1072  069C  1D03               	skipz
  1073  069D  2E98               	goto	u295
  1074  069E                     l918:
  1075  069E  3001               	movlw	1
  1076  069F  00A4               	movwf	??___lwdiv
  1077  06A0  0824               	movf	??___lwdiv,w
  1078  06A1  07A7               	addwf	___lwdiv@counter,f
  1079  06A2                     l920:
  1080  06A2  1FA1               	btfss	___lwdiv@divisor+1,7
  1081  06A3  2EA5               	goto	u301
  1082  06A4  2EA6               	goto	u300
  1083  06A5                     u301:
  1084  06A5  2E97               	goto	l916
  1085  06A6                     u300:
  1086  06A6                     l922:
  1087  06A6  3001               	movlw	1
  1088  06A7                     u315:
  1089  06A7  1003               	clrc
  1090  06A8  0DA5               	rlf	___lwdiv@quotient,f
  1091  06A9  0DA6               	rlf	___lwdiv@quotient+1,f
  1092  06AA  3EFF               	addlw	-1
  1093  06AB  1D03               	skipz
  1094  06AC  2EA7               	goto	u315
  1095  06AD  0821               	movf	___lwdiv@divisor+1,w
  1096  06AE  0223               	subwf	___lwdiv@dividend+1,w
  1097  06AF  1D03               	skipz
  1098  06B0  2EB3               	goto	u325
  1099  06B1  0820               	movf	___lwdiv@divisor,w
  1100  06B2  0222               	subwf	___lwdiv@dividend,w
  1101  06B3                     u325:
  1102  06B3  1C03               	skipc
  1103  06B4  2EB6               	goto	u321
  1104  06B5  2EB7               	goto	u320
  1105  06B6                     u321:
  1106  06B6  2EBE               	goto	l928
  1107  06B7                     u320:
  1108  06B7                     l924:
  1109  06B7  0820               	movf	___lwdiv@divisor,w
  1110  06B8  02A2               	subwf	___lwdiv@dividend,f
  1111  06B9  0821               	movf	___lwdiv@divisor+1,w
  1112  06BA  1C03               	skipc
  1113  06BB  03A3               	decf	___lwdiv@dividend+1,f
  1114  06BC  02A3               	subwf	___lwdiv@dividend+1,f
  1115  06BD                     l926:
  1116  06BD  1425               	bsf	___lwdiv@quotient,0
  1117  06BE                     l928:
  1118  06BE  3001               	movlw	1
  1119  06BF                     u335:
  1120  06BF  1003               	clrc
  1121  06C0  0CA1               	rrf	___lwdiv@divisor+1,f
  1122  06C1  0CA0               	rrf	___lwdiv@divisor,f
  1123  06C2  3EFF               	addlw	-1
  1124  06C3  1D03               	skipz
  1125  06C4  2EBF               	goto	u335
  1126  06C5                     l930:
  1127  06C5  3001               	movlw	1
  1128  06C6  02A7               	subwf	___lwdiv@counter,f
  1129  06C7  1D03               	btfss	3,2
  1130  06C8  2ECA               	goto	u341
  1131  06C9  2ECB               	goto	u340
  1132  06CA                     u341:
  1133  06CA  2EA6               	goto	l922
  1134  06CB                     u340:
  1135  06CB                     l932:
  1136  06CB  0826               	movf	___lwdiv@quotient+1,w
  1137  06CC  00A1               	movwf	?___lwdiv+1
  1138  06CD  0825               	movf	___lwdiv@quotient,w
  1139  06CE  00A0               	movwf	?___lwdiv
  1140  06CF                     l476:
  1141  06CF  0008               	return
  1142  06D0                     __end_of___lwdiv:
  1143                           
  1144                           	psect	text4
  1145  0611                     __ptext4:	
  1146 ;; *************** function _UART_write_text *****************
  1147 ;; Defined at:
  1148 ;;		line 74 in file "UART.h"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  cadena          1    wreg     PTR unsigned char 
  1151 ;;		 -> main@dato(15), 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  cadena          1    2[BANK0 ] PTR unsigned char 
  1154 ;;		 -> main@dato(15), 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1
  1164 ;;      Params:         0       0       0
  1165 ;;      Locals:         0       1       0
  1166 ;;      Temps:          0       1       0
  1167 ;;      Totals:         0       2       0
  1168 ;;Total ram usage:        2 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 1
  1171 ;; This function calls:
  1172 ;;		_UART_write
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178  0611                     _UART_write_text:	
  1179                           ;psect for function _UART_write_text
  1180                           
  1181                           
  1182                           ;incstack = 0
  1183                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1184                           ;UART_write_text@cadena stored from wreg
  1185  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0613  00A2               	movwf	UART_write_text@cadena
  1188  0614                     l990:
  1189                           
  1190                           ;UART.h: 76: while(*cadena !=0x00){
  1191  0614  2E21               	goto	l996
  1192  0615                     l992:
  1193                           
  1194                           ;UART.h: 77: UART_write(*cadena);
  1195  0615  0822               	movf	UART_write_text@cadena,w
  1196  0616  0084               	movwf	4
  1197  0617  0800               	movf	0,w
  1198  0618  118A  25D5  118A   	fcall	_UART_write
  1199  061B                     l994:
  1200                           
  1201                           ;UART.h: 78: cadena++;
  1202  061B  3001               	movlw	1
  1203  061C  1283               	bcf	3,5	;RP0=0, select bank0
  1204  061D  1303               	bcf	3,6	;RP1=0, select bank0
  1205  061E  00A1               	movwf	??_UART_write_text
  1206  061F  0821               	movf	??_UART_write_text,w
  1207  0620  07A2               	addwf	UART_write_text@cadena,f
  1208  0621                     l996:
  1209  0621  0822               	movf	UART_write_text@cadena,w
  1210  0622  0084               	movwf	4
  1211  0623  1383               	bcf	3,7	;select IRP bank0
  1212  0624  0800               	movf	0,w
  1213  0625  1D03               	btfss	3,2
  1214  0626  2E28               	goto	u421
  1215  0627  2E29               	goto	u420
  1216  0628                     u421:
  1217  0628  2E15               	goto	l992
  1218  0629                     u420:
  1219  0629                     l72:
  1220  0629  0008               	return
  1221  062A                     __end_of_UART_write_text:
  1222                           
  1223                           	psect	text5
  1224  05D5                     __ptext5:	
  1225 ;; *************** function _UART_write *****************
  1226 ;; Defined at:
  1227 ;;		line 54 in file "UART.h"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  dato            1    wreg     unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  dato            1    0[BANK0 ] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1
  1241 ;;      Params:         0       0       0
  1242 ;;      Locals:         0       1       0
  1243 ;;      Temps:          0       0       0
  1244 ;;      Totals:         0       1       0
  1245 ;;Total ram usage:        1 bytes
  1246 ;; Hardware stack levels used: 1
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_UART_write_text
  1251 ;;		_putch
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255  05D5                     _UART_write:	
  1256                           ;psect for function _UART_write
  1257                           
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _UART_write: [wreg]
  1261                           ;UART_write@dato stored from wreg
  1262  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1263  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1264  05D7  00A0               	movwf	UART_write@dato
  1265  05D8                     l908:
  1266                           
  1267                           ;UART.h: 56: TXREG = dato;
  1268  05D8  0820               	movf	UART_write@dato,w
  1269  05D9  0099               	movwf	25	;volatile
  1270  05DA                     l60:	
  1271                           ;UART.h: 57: while(TXSTAbits.TRMT == 0);
  1272                           
  1273  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  1274  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  1275  05DC  1C98               	btfss	24,1	;volatile
  1276  05DD  2DDF               	goto	u271
  1277  05DE  2DE0               	goto	u270
  1278  05DF                     u271:
  1279  05DF  2DDA               	goto	l60
  1280  05E0                     u270:
  1281  05E0                     l63:
  1282  05E0  0008               	return
  1283  05E1                     __end_of_UART_write:
  1284                           
  1285                           	psect	text6
  1286  05FE                     __ptext6:	
  1287 ;; *************** function _UART_init *****************
  1288 ;; Defined at:
  1289 ;;		line 21 in file "UART.h"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1
  1303 ;;      Params:         0       0       0
  1304 ;;      Locals:         0       0       0
  1305 ;;      Temps:          0       0       0
  1306 ;;      Totals:         0       0       0
  1307 ;;Total ram usage:        0 bytes
  1308 ;; Hardware stack levels used: 1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316  05FE                     _UART_init:	
  1317                           ;psect for function _UART_init
  1318                           
  1319  05FE                     l980:	
  1320                           ;incstack = 0
  1321                           ; Regs used in _UART_init: [wreg]
  1322                           
  1323                           
  1324                           ;UART.h: 23: TRISCbits.TRISC7 = 1;
  1325  05FE  1683               	bsf	3,5	;RP0=1, select bank1
  1326  05FF  1303               	bcf	3,6	;RP1=0, select bank1
  1327  0600  1787               	bsf	7,7	;volatile
  1328                           
  1329                           ;UART.h: 24: TRISCbits.TRISC6 = 0;
  1330  0601  1307               	bcf	7,6	;volatile
  1331                           
  1332                           ;UART.h: 26: TXSTAbits.SYNC = 0;
  1333  0602  1218               	bcf	24,4	;volatile
  1334                           
  1335                           ;UART.h: 27: TXSTAbits.TX9 = 0;
  1336  0603  1318               	bcf	24,6	;volatile
  1337                           
  1338                           ;UART.h: 28: TXSTAbits.BRGH = 1;
  1339  0604  1518               	bsf	24,2	;volatile
  1340  0605                     l982:
  1341                           
  1342                           ;UART.h: 29: SPBRG = 25;
  1343  0605  3019               	movlw	25
  1344  0606  0099               	movwf	25	;volatile
  1345  0607                     l984:
  1346                           
  1347                           ;UART.h: 30: RCSTAbits.SPEN = 1;
  1348  0607  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0608  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0609  1798               	bsf	24,7	;volatile
  1351  060A                     l986:
  1352                           
  1353                           ;UART.h: 31: TXSTAbits.TXEN = 1;
  1354  060A  1683               	bsf	3,5	;RP0=1, select bank1
  1355  060B  1303               	bcf	3,6	;RP1=0, select bank1
  1356  060C  1698               	bsf	24,5	;volatile
  1357  060D                     l988:
  1358                           
  1359                           ;UART.h: 32: RCSTAbits.CREN = 1;
  1360  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1361  060E  1303               	bcf	3,6	;RP1=0, select bank0
  1362  060F  1618               	bsf	24,4	;volatile
  1363  0610                     l50:
  1364  0610  0008               	return
  1365  0611                     __end_of_UART_init:
  1366                           
  1367                           	psect	text7
  1368  05EF                     __ptext7:	
  1369 ;; *************** function _TIMER2_init *****************
  1370 ;; Defined at:
  1371 ;;		line 21 in file "main.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1
  1385 ;;      Params:         0       0       0
  1386 ;;      Locals:         0       0       0
  1387 ;;      Temps:          0       0       0
  1388 ;;      Totals:         0       0       0
  1389 ;;Total ram usage:        0 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398  05EF                     _TIMER2_init:	
  1399                           ;psect for function _TIMER2_init
  1400                           
  1401  05EF                     l998:	
  1402                           ;incstack = 0
  1403                           ; Regs used in _TIMER2_init: [wreg+status,2+status,0]
  1404                           
  1405                           
  1406                           ;main.c: 23: TMR2 = 0;
  1407  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1408  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  1409  05F1  0191               	clrf	17	;volatile
  1410  05F2                     l1000:
  1411                           
  1412                           ;main.c: 24: PR2 = 249;
  1413  05F2  30F9               	movlw	249
  1414  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  1415  05F4  1303               	bcf	3,6	;RP1=0, select bank1
  1416  05F5  0092               	movwf	18	;volatile
  1417  05F6                     l1002:
  1418                           
  1419                           ;main.c: 25: T2CONbits.TOUTPS = 0b1111;
  1420  05F6  3078               	movlw	120
  1421  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1422  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1423  05F9  0492               	iorwf	18,f	;volatile
  1424  05FA                     l1004:
  1425                           
  1426                           ;main.c: 26: T2CONbits.T2CKPS = 0b00;
  1427  05FA  30FC               	movlw	-4
  1428  05FB  0592               	andwf	18,f	;volatile
  1429  05FC                     l1006:
  1430                           
  1431                           ;main.c: 27: T2CONbits.TMR2ON = 1;
  1432  05FC  1512               	bsf	18,2	;volatile
  1433  05FD                     l81:
  1434  05FD  0008               	return
  1435  05FE                     __end_of_TIMER2_init:
  1436                           
  1437                           	psect	text8
  1438  062A                     __ptext8:	
  1439 ;; *************** function _ADC_read *****************
  1440 ;; Defined at:
  1441 ;;		line 30 in file "ADC.h"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  channel         1    wreg     unsigned char 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  channel         1    3[BANK0 ] unsigned char 
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  2    0[BANK0 ] unsigned int 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2, status,0
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1
  1455 ;;      Params:         0       2       0
  1456 ;;      Locals:         0       1       0
  1457 ;;      Temps:          0       1       0
  1458 ;;      Totals:         0       4       0
  1459 ;;Total ram usage:        4 bytes
  1460 ;; Hardware stack levels used: 1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468  062A                     _ADC_read:	
  1469                           ;psect for function _ADC_read
  1470                           
  1471                           
  1472                           ;incstack = 0
  1473                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1474                           ;ADC_read@channel stored from wreg
  1475  062A  1283               	bcf	3,5	;RP0=0, select bank0
  1476  062B  1303               	bcf	3,6	;RP1=0, select bank0
  1477  062C  00A3               	movwf	ADC_read@channel
  1478  062D                     l970:
  1479                           
  1480                           ;ADC.h: 32: ADCON0bits.ADCS = channel;
  1481  062D  0823               	movf	ADC_read@channel,w
  1482  062E  00A2               	movwf	??_ADC_read
  1483  062F  0EA2               	swapf	??_ADC_read,f
  1484  0630  0DA2               	rlf	??_ADC_read,f
  1485  0631  0DA2               	rlf	??_ADC_read,f
  1486  0632  081F               	movf	31,w	;volatile
  1487  0633  0622               	xorwf	??_ADC_read,w
  1488  0634  393F               	andlw	-193
  1489  0635  0622               	xorwf	??_ADC_read,w
  1490  0636  009F               	movwf	31	;volatile
  1491  0637                     l972:
  1492                           
  1493                           ;ADC.h: 33: _delay((unsigned long)((25)*(4000000/4000000.0)));
  1494  0637  3007               	movlw	7
  1495  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1497  063A  00A2               	movwf	??_ADC_read
  1498  063B                     u517:
  1499  063B  0BA2               	decfsz	??_ADC_read,f
  1500  063C  2E3B               	goto	u517
  1501  063D  2E3E               	nop2
  1502  063E                     l974:
  1503                           
  1504                           ;ADC.h: 34: ADCON0bits.GO = 1;
  1505  063E  1283               	bcf	3,5	;RP0=0, select bank0
  1506  063F  1303               	bcf	3,6	;RP1=0, select bank0
  1507  0640  151F               	bsf	31,2	;volatile
  1508  0641                     l44:	
  1509                           ;ADC.h: 35: while(ADCON0bits.GO_DONE);
  1510                           
  1511  0641  191F               	btfsc	31,2	;volatile
  1512  0642  2E44               	goto	u411
  1513  0643  2E45               	goto	u410
  1514  0644                     u411:
  1515  0644  2E41               	goto	l44
  1516  0645                     u410:
  1517  0645                     l976:
  1518                           
  1519                           ;ADC.h: 36: return ((uint16_t)((ADRESH<<8)+ADRESL));
  1520  0645  081E               	movf	30,w	;volatile
  1521  0646  00A1               	movwf	?_ADC_read+1
  1522  0647  1683               	bsf	3,5	;RP0=1, select bank1
  1523  0648  1303               	bcf	3,6	;RP1=0, select bank1
  1524  0649  081E               	movf	30,w	;volatile
  1525  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1526  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1527  064C  00A0               	movwf	?_ADC_read
  1528  064D                     l47:
  1529  064D  0008               	return
  1530  064E                     __end_of_ADC_read:
  1531                           
  1532                           	psect	text9
  1533  05E1                     __ptext9:	
  1534 ;; *************** function _ADC_init *****************
  1535 ;; Defined at:
  1536 ;;		line 16 in file "ADC.h"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1
  1550 ;;      Params:         0       0       0
  1551 ;;      Locals:         0       0       0
  1552 ;;      Temps:          0       0       0
  1553 ;;      Totals:         0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used: 1
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563  05E1                     _ADC_init:	
  1564                           ;psect for function _ADC_init
  1565                           
  1566  05E1                     l958:	
  1567                           ;incstack = 0
  1568                           ; Regs used in _ADC_init: [wreg+status,2+status,0]
  1569                           
  1570                           
  1571                           ;ADC.h: 18: ADCON1bits.ADFM = 1;
  1572  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1573  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1574  05E3  179F               	bsf	31,7	;volatile
  1575  05E4                     l960:
  1576                           
  1577                           ;ADC.h: 19: ADCON1bits.PCFG = 0b1110;
  1578  05E4  081F               	movf	31,w	;volatile
  1579  05E5  39F0               	andlw	-16
  1580  05E6  380E               	iorlw	14
  1581  05E7  009F               	movwf	31	;volatile
  1582  05E8                     l962:
  1583                           
  1584                           ;ADC.h: 20: ADCON1bits.ADCS2 = 0;
  1585  05E8  131F               	bcf	31,6	;volatile
  1586  05E9                     l964:
  1587                           
  1588                           ;ADC.h: 21: ADCON0bits.ADCS1 = 0;
  1589  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1590  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1591  05EB  139F               	bcf	31,7	;volatile
  1592  05EC                     l966:
  1593                           
  1594                           ;ADC.h: 22: ADCON0bits.ADCS1 = 1;
  1595  05EC  179F               	bsf	31,7	;volatile
  1596  05ED                     l968:
  1597                           
  1598                           ;ADC.h: 23: ADCON0bits.ADON = 1;
  1599  05ED  141F               	bsf	31,0	;volatile
  1600  05EE                     l41:
  1601  05EE  0008               	return
  1602  05EF                     __end_of_ADC_init:
  1603  007E                     btemp	set	126	;btemp
  1604  007E                     wtemp0	set	126
  1605                           
  1606                           	psect	idloc
  1607                           
  1608                           ;Config register IDLOC0 @ 0x2000
  1609                           ;	unspecified, using default values
  1610  2000                     	org	8192
  1611  2000  3FFF               	dw	16383
  1612                           
  1613                           ;Config register IDLOC1 @ 0x2001
  1614                           ;	unspecified, using default values
  1615  2001                     	org	8193
  1616  2001  3FFF               	dw	16383
  1617                           
  1618                           ;Config register IDLOC2 @ 0x2002
  1619                           ;	unspecified, using default values
  1620  2002                     	org	8194
  1621  2002  3FFF               	dw	16383
  1622                           
  1623                           ;Config register IDLOC3 @ 0x2003
  1624                           ;	unspecified, using default values
  1625  2003                     	org	8195
  1626  2003  3FFF               	dw	16383
  1627                           
  1628                           	psect	config
  1629                           
  1630                           ;Config register CONFIG @ 0x2007
  1631                           ;	Oscillator Selection bits
  1632                           ;	FOSC = XT, XT oscillator
  1633                           ;	Watchdog Timer Enable bit
  1634                           ;	WDTE = OFF, WDT disabled
  1635                           ;	Power-up Timer Enable bit
  1636                           ;	PWRTE = ON, PWRT enabled
  1637                           ;	Brown-out Reset Enable bit
  1638                           ;	BOREN = OFF, BOR disabled
  1639                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1640                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1641                           ;	Data EEPROM Memory Code Protection bit
  1642                           ;	CPD = OFF, Data EEPROM code protection off
  1643                           ;	Flash Program Memory Write Enable bits
  1644                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1645                           ;	In-Circuit Debugger Mode bit
  1646                           ;	DEBUG = 0x1, unprogrammed default
  1647                           ;	Flash Program Memory Code Protection bit
  1648                           ;	CP = OFF, Code protection off
  1649  2007                     	org	8199
  1650  2007  3F31               	dw	16177

Data Sizes:
    Strings     11
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     46      46
    BANK1            94      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> main@dato(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_write_text@cadena	PTR unsigned char  size(1) Largest target is 15
		 -> main@dato(BANK0[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_write_text->_UART_write

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    1499
                                             27 BANK0     19    19      0
                           _ADC_init
                           _ADC_read
                        _TIMER2_init
                          _UART_init
                    _UART_write_text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      2     2      0     100
                                              1 BANK0      2     2      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _TIMER2_init
   _UART_init
   _UART_write_text
     _UART_write
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     2E      2E       4       48.9%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 21:10:12 2022

                      pc 0002                       l41 05EE                       l50 0610  
                     l44 0641                       l60 05DA                       l47 064D  
                     l63 05E0                       l72 0629                       l81 05FD  
                     fsr 0004                      l200 07FC                      l476 06CF  
                    l910 068A                      l486 0689                      l920 06A2  
                    l912 068E                      l930 06C5                      l922 06A6  
                    l914 0694                      l908 05D8                      l924 06B7  
                    l916 0697                      l932 06CB                      l940 0659  
                    l926 06BD                      l918 069E                      l950 0678  
                    l942 0660                      l960 05E4                      l928 06BE  
                    l952 067F                      l944 0664                      l936 064E  
                    l962 05E8                      l970 062D                      l946 0668  
                    l938 0656                      l954 0685                      l964 05E9  
                    l972 0637                      l980 05FE                      l948 0672  
                    l966 05EC                      l958 05E1                      l974 063E  
                    l982 0605                      l990 0614                      l968 05ED  
                    l976 0645                      l984 0607                      l992 0615  
                    l986 060A                      l994 061B                      l988 060D  
                    l996 0621                      l998 05EF                      u300 06A6  
                    u301 06A5                      u320 06B7                      u400 0685  
                    u321 06B6                      u401 0684                      u410 0645  
                    u411 0644                      u315 06A7                      u420 0629  
                    u340 06CB                      u500 0705                      u421 0628  
                    u341 06CA                      u325 06B3                      u501 0704  
                    u270 05E0                      u350 0656                      u430 0739  
                    _PR2 0092                      u271 05DF                      u335 06BF  
                    u351 0655                      u431 0738                      u280 0694  
                    u440 0769                      u281 0693                      u441 0768  
                    u370 0668                      u450 078B                      u371 0667  
                    u451 078A                      u380 0672                      u460 0796  
                    u517 063B                      u381 0671                      u365 065A  
                    u461 0795                      u470 079C                      u295 0698  
                    u471 079B                      u455 0787                      u480 07E8  
                    u385 066E                      u481 07E7                      u490 07F8  
                    u395 0679                      u491 07F7                      fsr0 0004  
                    indf 0000                     l1000 05F2                     l1002 05F6  
                   l1010 0733                     l1004 05FA                     l1020 0746  
                   l1012 0739                     l1006 05FC                     l1030 076D  
                   l1022 0759                     l1014 0740                     l1032 0772  
                   l1024 0761                     l1016 0745                     l1008 072E  
                   l1050 07A7                     l1042 078C                     l1026 0765  
                   l1052 07AC                     l1044 0796                     l1028 0769  
                   l1060 07E8                     l1054 07D4                     l1046 079C  
                   l1038 0774                     l1062 07F8                     l1070 06D3  
                   l1056 07DB                     l1048 07A3                     l1080 06FA  
                   l1072 06DC                     l1058 07DF                     l1082 0705  
                   l1074 06E0                     l1084 0709                     l1076 06EA  
                   l1068 06D0                     l1086 0712                     l1078 06F6  
                   l1088 071C                     STR_1 0012                     _TMR2 0011  
                   _main 06D0                     btemp 007E                     start 0000  
       __end_of_ADC_init 05EF         __end_of_ADC_read 064E                    ?_main 0020  
        __end_of___lwdiv 06D0          __end_of___lwmod 068A                    _RCREG 001A  
                  _SPBRG 0099                    _TXREG 0019          __end_of_dpowers 0012  
            ?_UART_write 0020                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07FD          __initialization 07FD  
           __end_of_main 072B                   ??_main 003B             ?_TIMER2_init 0020  
                 _ADRESH 001E                   _ADRESL 009E                   _CCPR1L 0015  
      __end_of_UART_init 0611                ??___lwdiv 0024                ??___lwmod 002C  
                 main@dc 004C          _UART_write_text 0611                ?_ADC_init 0020  
              ?_ADC_read 0020                ??_sprintf 0031  __end_of__initialization 07FD  
         __pcstackCOMMON 0000          ADC_read@channel 0023               ??_ADC_init 0000  
             ??_ADC_read 0022               __pmaintext 06D0                  _CCP1CON 0017  
__end_of_UART_write_text 062A             ??_UART_write 0000               __stringtab 0002  
                ___lwdiv 068A                  ___lwmod 064E       __end_of_UART_write 05E1  
                __ptext1 072B                  __ptext2 064E                  __ptext3 068A  
                __ptext4 0611                  __ptext5 05D5                  __ptext6 05FE  
                __ptext7 05EF                  __ptext8 062A                  __ptext9 05E1  
                _dpowers 0008                _T2CONbits 0012                  _sprintf 072B  
   end_of_initialization 07FD                _RCSTAbits 0018         ?_UART_write_text 0020  
              _UART_init 05FE                _TRISCbits 0087              _CCP1CONbits 0017  
              _TXSTAbits 0098               ?_UART_init 0020      start_initialization 07FD  
  UART_write_text@cadena 0022                ___latbits 0001            __pcstackBANK0 0020  
            sprintf@flag 0035              sprintf@prec 0036         ___lwdiv@dividend 0022  
               ?___lwdiv 0020                 ?___lwmod 0028                __pstrings 0002  
            ??_UART_init 0000            ??_TIMER2_init 0000                 _ADC_init 05E1  
               _ADC_read 062A         ___lwdiv@quotient 0025                 ?_sprintf 002E  
               _PIR1bits 000C               _ADCON0bits 001F              __stringbase 0007  
             _ADCON1bits 009F           UART_write@dato 0020      __end_of_TIMER2_init 05FE  
     __end_of__stringtab 0008               sprintf@val 0037          ___lwdiv@divisor 0020  
        ___lwdiv@counter 0027                 main@dato 003D              _TIMER2_init 05EF  
              sprintf@ap 0034                sprintf@sp 0039         ___lwmod@dividend 002A  
              stringcode 0002                 sprintf@c 003A                 sprintf@f 002E  
        ___lwmod@divisor 0028          ___lwmod@counter 002D                 stringdir 0002  
               stringtab 0002               _UART_write 05D5        ??_UART_write_text 0021  
