

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 19 17:32:23 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F873A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.10
    22                           ; Generated 31/07/2019 GMT
    23                           ; 
    24                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F873A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167                           
   168                           	psect	strings
   169  0002                     __pstrings:	
   170  0002                     stringtab:	
   171  0002                     __stringtab:	
   172  0002                     stringcode:	
   173                           ;	String table - string pointers are 1 byte each
   174                           
   175  0002                     stringdir:	
   176  0002  3000               	movlw	high stringdir
   177  0003  008A               	movwf	10
   178  0004  0804               	movf	4,w
   179  0005  0A84               	incf	4,f
   180  0006  0782               	addwf	2,f
   181  0007                     __stringbase:	
   182  0007  3400               	retlw	0
   183  0008                     __end_of__stringtab:	
   184  0008                     _dpowers:	
   185  0008  3401               	retlw	1
   186  0009  3400               	retlw	0
   187  000A  340A               	retlw	10
   188  000B  3400               	retlw	0
   189  000C  3464               	retlw	100
   190  000D  3400               	retlw	0
   191  000E  34E8               	retlw	232
   192  000F  3403               	retlw	3
   193  0010  3410               	retlw	16
   194  0011  3427               	retlw	39
   195  0012                     __end_of_dpowers:	
   196  001E                     _ADRESH	set	30
   197  001F                     _ADCON0bits	set	31
   198  0007                     _PORTCbits	set	7
   199  0005                     _PORTAbits	set	5
   200  009E                     _ADRESL	set	158
   201  009F                     _ADCON1bits	set	159
   202  0087                     _TRISCbits	set	135
   203  0085                     _TRISAbits	set	133
   204  0012                     STR_1:	
   205  0012  3425               	retlw	37	;'%'
   206  0013  3464               	retlw	100	;'d'
   207  0014  3400               	retlw	0
   208                           
   209                           ; #config settings
   210  0000                     
   211                           	psect	cinit
   212  07FD                     start_initialization:	
   213  07FD                     __initialization:	
   214  07FD                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217  07FD                     __end_of__initialization:	
   218  07FD  0183               	clrf	3
   219  07FE  118A  2DD8         	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	cstackCOMMON
   222  0000                     __pcstackCOMMON:	
   223  0000                     ??_LCD_write_nible:	
   224  0000                     ??_ADC_init:	
   225                           ; 1 bytes @ 0x0
   226                           
   227                           
   228                           	psect	cstackBANK0
   229  0020                     __pcstackBANK0:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0020                     ?_LCD_write_nible:	
   233  0020                     ?_LCD_cmd:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0020                     ?_LCD_init:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0020                     ?_LCD_char:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0020                     ?_LCD_write_text:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0020                     ?_ADC_init:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0020                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0020                     ?_ADC_read:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0020                     ?___lwdiv:	
   255                           ; 2 bytes @ 0x0
   256                           
   257  0020                     LCD_write_nible@nible:	
   258                           ; 2 bytes @ 0x0
   259                           
   260  0020                     ___lwdiv@divisor:	
   261                           ; 1 bytes @ 0x0
   262                           
   263                           
   264                           ; 2 bytes @ 0x0
   265  0020                     	ds	1
   266  0021                     ??_LCD_cmd:	
   267  0021                     ??_LCD_char:	
   268                           ; 1 bytes @ 0x1
   269                           
   270                           
   271                           ; 1 bytes @ 0x1
   272  0021                     	ds	1
   273  0022                     ??_ADC_read:	
   274  0022                     LCD_char@caracter:	
   275                           ; 1 bytes @ 0x2
   276                           
   277  0022                     ___lwdiv@dividend:	
   278                           ; 1 bytes @ 0x2
   279                           
   280                           
   281                           ; 2 bytes @ 0x2
   282  0022                     	ds	1
   283  0023                     ??_LCD_write_text:	
   284  0023                     LCD_cmd@comando:	
   285                           ; 1 bytes @ 0x3
   286                           
   287  0023                     ADC_read@channel:	
   288                           ; 1 bytes @ 0x3
   289                           
   290                           
   291                           ; 1 bytes @ 0x3
   292  0023                     	ds	1
   293  0024                     ??_LCD_init:	
   294  0024                     ??___lwdiv:	
   295                           ; 1 bytes @ 0x4
   296                           
   297  0024                     LCD_write_text@dato:	
   298                           ; 1 bytes @ 0x4
   299                           
   300                           
   301                           ; 1 bytes @ 0x4
   302  0024                     	ds	1
   303  0025                     ___lwdiv@quotient:	
   304                           
   305                           ; 2 bytes @ 0x5
   306  0025                     	ds	2
   307  0027                     ___lwdiv@counter:	
   308                           
   309                           ; 1 bytes @ 0x7
   310  0027                     	ds	1
   311  0028                     ?___lwmod:	
   312  0028                     ___lwmod@divisor:	
   313                           ; 2 bytes @ 0x8
   314                           
   315                           
   316                           ; 2 bytes @ 0x8
   317  0028                     	ds	2
   318  002A                     ___lwmod@dividend:	
   319                           
   320                           ; 2 bytes @ 0xA
   321  002A                     	ds	2
   322  002C                     ??___lwmod:	
   323                           
   324                           ; 1 bytes @ 0xC
   325  002C                     	ds	1
   326  002D                     ___lwmod@counter:	
   327                           
   328                           ; 1 bytes @ 0xD
   329  002D                     	ds	1
   330  002E                     ?_sprintf:	
   331  002E                     sprintf@f:	
   332                           ; 2 bytes @ 0xE
   333                           
   334                           
   335                           ; 1 bytes @ 0xE
   336  002E                     	ds	3
   337  0031                     ??_sprintf:	
   338                           
   339                           ; 1 bytes @ 0x11
   340  0031                     	ds	3
   341  0034                     sprintf@ap:	
   342                           
   343                           ; 1 bytes @ 0x14
   344  0034                     	ds	1
   345  0035                     sprintf@flag:	
   346                           
   347                           ; 1 bytes @ 0x15
   348  0035                     	ds	1
   349  0036                     sprintf@prec:	
   350                           
   351                           ; 1 bytes @ 0x16
   352  0036                     	ds	1
   353  0037                     sprintf@val:	
   354                           
   355                           ; 2 bytes @ 0x17
   356  0037                     	ds	2
   357  0039                     sprintf@sp:	
   358                           
   359                           ; 1 bytes @ 0x19
   360  0039                     	ds	1
   361  003A                     sprintf@c:	
   362                           
   363                           ; 1 bytes @ 0x1A
   364  003A                     	ds	1
   365  003B                     ??_main:	
   366                           
   367                           ; 1 bytes @ 0x1B
   368  003B                     	ds	2
   369  003D                     main@str:	
   370                           
   371                           ; 10 bytes @ 0x1D
   372  003D                     	ds	10
   373  0047                     main@dato:	
   374                           
   375                           ; 2 bytes @ 0x27
   376  0047                     	ds	2
   377                           
   378                           	psect	maintext
   379  05D8                     __pmaintext:	
   380 ;;
   381 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   382 ;;
   383 ;; *************** function _main *****************
   384 ;; Defined at:
   385 ;;		line 27 in file "main.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;  str            10   29[BANK0 ] unsigned char [10]
   390 ;;  dato            2   39[BANK0 ] unsigned int 
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : B00/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMMON   BANK0   BANK1
   400 ;;      Params:         0       0       0
   401 ;;      Locals:         0      12       0
   402 ;;      Temps:          0       2       0
   403 ;;      Totals:         0      14       0
   404 ;;Total ram usage:       14 bytes
   405 ;; Hardware stack levels required when called:    3
   406 ;; This function calls:
   407 ;;		_ADC_init
   408 ;;		_ADC_read
   409 ;;		_LCD_cmd
   410 ;;		_LCD_init
   411 ;;		_LCD_write_text
   412 ;;		_sprintf
   413 ;; This function is called by:
   414 ;;		Startup code after reset
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           
   419                           ;psect for function _main
   420  05D8                     _main:	
   421  05D8                     l1185:	
   422                           ;incstack = 0
   423                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   424                           
   425                           
   426                           ;main.c: 29:     uint16_t dato;;main.c: 30:     uint8_t str[10];;main.c: 31:     ADC_ini
      +                          t();
   427  05D8  118A  2548  118A   	fcall	_ADC_init
   428                           
   429                           ;main.c: 32:     LCD_init();
   430  05DB  118A  26C4  118A   	fcall	_LCD_init
   431  05DE                     l86:	
   432                           ;main.c: 34:     while(1)
   433                           
   434                           
   435                           ;main.c: 35:     {;main.c: 36:         LCD_cmd(0x01);
   436  05DE  3001               	movlw	1
   437  05DF  118A  260A  118A   	fcall	_LCD_cmd
   438                           
   439                           ;main.c: 37:         dato = ADC_read(0);
   440  05E2  3000               	movlw	0
   441  05E3  118A  258E  118A   	fcall	_ADC_read
   442  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   443  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   444  05E8  0821               	movf	?_ADC_read+1,w
   445  05E9  00C8               	movwf	main@dato+1
   446  05EA  0820               	movf	?_ADC_read,w
   447  05EB  00C7               	movwf	main@dato
   448  05EC                     l1187:	
   449                           
   450                           ;main.c: 38:         sprintf(str, "%d", dato);
   451  05EC  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   452  05ED  00BB               	movwf	??_main
   453  05EE  083B               	movf	??_main,w
   454  05EF  00AE               	movwf	sprintf@f
   455  05F0  0848               	movf	main@dato+1,w
   456  05F1  00B0               	movwf	?_sprintf+2
   457  05F2  0847               	movf	main@dato,w
   458  05F3  00AF               	movwf	?_sprintf+1
   459  05F4  303D               	movlw	(low (main@str| 0))& (0+255)
   460  05F5  118A  2723  118A   	fcall	_sprintf
   461  05F8                     l1189:	
   462                           
   463                           ;main.c: 39:         LCD_write_text(str);
   464  05F8  303D               	movlw	(low (main@str| 0))& (0+255)
   465  05F9  118A  2556  118A   	fcall	_LCD_write_text
   466  05FC                     l1191:	
   467                           
   468                           ;main.c: 40:         _delay((unsigned long)((100)*(4000000/4000.0)));
   469  05FC  3082               	movlw	130
   470  05FD  1283               	bcf	3,5	;RP0=0, select bank0
   471  05FE  1303               	bcf	3,6	;RP1=0, select bank0
   472  05FF  00BC               	movwf	??_main+1
   473  0600  30DD               	movlw	221
   474  0601  00BB               	movwf	??_main
   475  0602                     u677:	
   476  0602  0BBB               	decfsz	??_main,f
   477  0603  2E02               	goto	u677
   478  0604  0BBC               	decfsz	??_main+1,f
   479  0605  2E02               	goto	u677
   480  0606  0000               	nop
   481  0607  2DDE               	goto	l86
   482  0608  118A  2800         	ljmp	start
   483  060A                     __end_of_main:	
   484                           
   485                           	psect	text1
   486  0723                     __ptext1:	
   487 ;; *************** function _sprintf *****************
   488 ;; Defined at:
   489 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  sp              1    wreg     PTR unsigned char 
   492 ;;		 -> main@str(10), 
   493 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   494 ;;		 -> STR_1(3), 
   495 ;; Auto vars:     Size  Location     Type
   496 ;;  sp              1   25[BANK0 ] PTR unsigned char 
   497 ;;		 -> main@str(10), 
   498 ;;  tmpval          4    0        struct .
   499 ;;  val             2   23[BANK0 ] unsigned int 
   500 ;;  cp              2    0        PTR const unsigned char 
   501 ;;  len             2    0        unsigned int 
   502 ;;  c               1   26[BANK0 ] unsigned char 
   503 ;;  prec            1   22[BANK0 ] char 
   504 ;;  flag            1   21[BANK0 ] unsigned char 
   505 ;;  ap              1   20[BANK0 ] PTR void [1]
   506 ;;		 -> ?_sprintf(2), 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  2   14[BANK0 ] int 
   509 ;; Registers used:
   510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1
   516 ;;      Params:         0       3       0
   517 ;;      Locals:         0       7       0
   518 ;;      Temps:          0       3       0
   519 ;;      Totals:         0      13       0
   520 ;;Total ram usage:       13 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; Hardware stack levels required when called:    1
   523 ;; This function calls:
   524 ;;		___lwdiv
   525 ;;		___lwmod
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           
   532                           ;psect for function _sprintf
   533  0723                     _sprintf:	
   534                           
   535                           ;incstack = 0
   536                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   537                           ;sprintf@sp stored from wreg
   538  0723  1283               	bcf	3,5	;RP0=0, select bank0
   539  0724  1303               	bcf	3,6	;RP1=0, select bank0
   540  0725  00B9               	movwf	sprintf@sp
   541  0726                     l1083:	
   542                           
   543                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
   544  0726  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   545  0727  00B1               	movwf	??_sprintf
   546  0728  0831               	movf	??_sprintf,w
   547  0729  00B4               	movwf	sprintf@ap
   548                           
   549                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
   550  072A  2FE8               	goto	l1135
   551  072B                     l1085:	
   552                           
   553                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
   554  072B  3025               	movlw	37
   555  072C  063A               	xorwf	sprintf@c,w
   556  072D  1903               	btfsc	3,2
   557  072E  2F30               	goto	u571
   558  072F  2F31               	goto	u570
   559  0730                     u571:	
   560  0730  2F3D               	goto	l1091
   561  0731                     u570:	
   562  0731                     l1087:	
   563                           
   564                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
   565  0731  083A               	movf	sprintf@c,w
   566  0732  00B1               	movwf	??_sprintf
   567  0733  0839               	movf	sprintf@sp,w
   568  0734  0084               	movwf	4
   569  0735  0831               	movf	??_sprintf,w
   570  0736  1383               	bcf	3,7	;select IRP bank0
   571  0737  0080               	movwf	0
   572  0738                     l1089:	
   573  0738  3001               	movlw	1
   574  0739  00B1               	movwf	??_sprintf
   575  073A  0831               	movf	??_sprintf,w
   576  073B  07B9               	addwf	sprintf@sp,f
   577                           
   578                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
   579  073C  2FE8               	goto	l1135
   580  073D                     l1091:	
   581                           
   582                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
   583  073D  01B5               	clrf	sprintf@flag
   584  073E                     l1095:	
   585                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
   586                           
   587  073E  3001               	movlw	1
   588  073F  07AE               	addwf	sprintf@f,f
   589  0740  30FF               	movlw	-1
   590  0741  072E               	addwf	sprintf@f,w
   591  0742  0084               	movwf	4
   592  0743  118A  2002  118A   	fcall	stringdir
   593  0746  00BA               	movwf	sprintf@c
   594  0747  00B1               	movwf	??_sprintf
   595  0748  01B2               	clrf	??_sprintf+1
   596                           
   597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   598                           ; Switch size 1, requested type "simple"
   599                           ; Number of cases is 1, Range of values is 0 to 0
   600                           ; switch strategies available:
   601                           ; Name         Instructions Cycles
   602                           ; simple_byte            4     3 (average)
   603                           ; direct_byte            9     7 (fixed)
   604                           ; jumptable            260     6 (fixed)
   605                           ;	Chosen strategy is simple_byte
   606  0749  0832               	movf	??_sprintf+1,w
   607  074A  3A00               	xorlw	0	; case 0
   608  074B  1903               	skipnz
   609  074C  2F4E               	goto	l1213
   610  074D  2FE8               	goto	l1135
   611  074E                     l1213:	
   612                           
   613                           ; Switch size 1, requested type "simple"
   614                           ; Number of cases is 3, Range of values is 0 to 105
   615                           ; switch strategies available:
   616                           ; Name         Instructions Cycles
   617                           ; simple_byte           10     6 (average)
   618                           ; direct_byte          219     7 (fixed)
   619                           ; jumptable            260     6 (fixed)
   620                           ;	Chosen strategy is simple_byte
   621  074E  0831               	movf	??_sprintf,w
   622  074F  3A00               	xorlw	0	; case 0
   623  0750  1903               	skipnz
   624  0751  2FF8               	goto	l1137
   625  0752  3A64               	xorlw	100	; case 100
   626  0753  1903               	skipnz
   627  0754  2F59               	goto	l1097
   628  0755  3A0D               	xorlw	13	; case 105
   629  0756  1903               	skipnz
   630  0757  2F59               	goto	l1097
   631  0758  2FE8               	goto	l1135
   632  0759                     l1097:	
   633                           
   634                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
   635  0759  0834               	movf	sprintf@ap,w
   636  075A  0084               	movwf	4
   637  075B  1383               	bcf	3,7	;select IRP bank0
   638  075C  0800               	movf	0,w
   639  075D  00B7               	movwf	sprintf@val
   640  075E  0A84               	incf	4,f
   641  075F  0800               	movf	0,w
   642  0760  00B8               	movwf	sprintf@val+1
   643  0761                     l1099:	
   644  0761  3002               	movlw	2
   645  0762  00B1               	movwf	??_sprintf
   646  0763  0831               	movf	??_sprintf,w
   647  0764  07B4               	addwf	sprintf@ap,f
   648  0765                     l1101:	
   649                           
   650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
   651  0765  1FB8               	btfss	sprintf@val+1,7
   652  0766  2F68               	goto	u581
   653  0767  2F69               	goto	u580
   654  0768                     u581:	
   655  0768  2F72               	goto	l1107
   656  0769                     u580:	
   657  0769                     l1103:	
   658                           
   659                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
   660  0769  3003               	movlw	3
   661  076A  00B1               	movwf	??_sprintf
   662  076B  0831               	movf	??_sprintf,w
   663  076C  04B5               	iorwf	sprintf@flag,f
   664  076D                     l1105:	
   665                           
   666                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
   667  076D  09B7               	comf	sprintf@val,f
   668  076E  09B8               	comf	sprintf@val+1,f
   669  076F  0AB7               	incf	sprintf@val,f
   670  0770  1903               	skipnz
   671  0771  0AB8               	incf	sprintf@val+1,f
   672  0772                     l1107:	
   673                           
   674                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   675  0772  01BA               	clrf	sprintf@c
   676  0773  0ABA               	incf	sprintf@c,f
   677  0774                     l1113:	
   678                           
   679                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
   680  0774  083A               	movf	sprintf@c,w
   681  0775  00B1               	movwf	??_sprintf
   682  0776  0731               	addwf	??_sprintf,w
   683  0777  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   684  0778  0084               	movwf	4
   685  0779  118A  2002  118A   	fcall	stringdir
   686  077C  00B2               	movwf	??_sprintf+1
   687  077D  118A  2002  118A   	fcall	stringdir
   688  0780  00B3               	movwf	??_sprintf+2
   689  0781  0833               	movf	??_sprintf+2,w
   690  0782  0238               	subwf	sprintf@val+1,w
   691  0783  1D03               	skipz
   692  0784  2F87               	goto	u595
   693  0785  0832               	movf	??_sprintf+1,w
   694  0786  0237               	subwf	sprintf@val,w
   695  0787                     u595:	
   696  0787  1803               	skipnc
   697  0788  2F8A               	goto	u591
   698  0789  2F8B               	goto	u590
   699  078A                     u591:	
   700  078A  2F8C               	goto	l1117
   701  078B                     u590:	
   702  078B  2F96               	goto	l1119
   703  078C                     l1117:	
   704  078C  3001               	movlw	1
   705  078D  00B1               	movwf	??_sprintf
   706  078E  0831               	movf	??_sprintf,w
   707  078F  07BA               	addwf	sprintf@c,f
   708  0790  3005               	movlw	5
   709  0791  063A               	xorwf	sprintf@c,w
   710  0792  1D03               	btfss	3,2
   711  0793  2F95               	goto	u601
   712  0794  2F96               	goto	u600
   713  0795                     u601:	
   714  0795  2F74               	goto	l1113
   715  0796                     u600:	
   716  0796                     l1119:	
   717                           
   718                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
   719  0796  0835               	movf	sprintf@flag,w
   720  0797  3903               	andlw	3
   721  0798  1903               	btfsc	3,2
   722  0799  2F9B               	goto	u611
   723  079A  2F9C               	goto	u610
   724  079B                     u611:	
   725  079B  2FA7               	goto	l1125
   726  079C                     u610:	
   727  079C                     l1121:	
   728                           
   729                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
   730  079C  302D               	movlw	45
   731  079D  00B1               	movwf	??_sprintf
   732  079E  0839               	movf	sprintf@sp,w
   733  079F  0084               	movwf	4
   734  07A0  0831               	movf	??_sprintf,w
   735  07A1  1383               	bcf	3,7	;select IRP bank0
   736  07A2  0080               	movwf	0
   737  07A3                     l1123:	
   738  07A3  3001               	movlw	1
   739  07A4  00B1               	movwf	??_sprintf
   740  07A5  0831               	movf	??_sprintf,w
   741  07A6  07B9               	addwf	sprintf@sp,f
   742  07A7                     l1125:	
   743                           
   744                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
   745  07A7  083A               	movf	sprintf@c,w
   746  07A8  00B1               	movwf	??_sprintf
   747  07A9  0831               	movf	??_sprintf,w
   748  07AA  00B6               	movwf	sprintf@prec
   749                           
   750                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
   751  07AB  2FDF               	goto	l1133
   752  07AC                     l1127:	
   753                           
   754                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   755  07AC  300A               	movlw	10
   756  07AD  00A8               	movwf	___lwmod@divisor
   757  07AE  3000               	movlw	0
   758  07AF  00A9               	movwf	___lwmod@divisor+1
   759  07B0  0836               	movf	sprintf@prec,w
   760  07B1  00B1               	movwf	??_sprintf
   761  07B2  0731               	addwf	??_sprintf,w
   762  07B3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   763  07B4  0084               	movwf	4
   764  07B5  118A  2002  118A   	fcall	stringdir
   765  07B8  00A0               	movwf	___lwdiv@divisor
   766  07B9  118A  2002  118A   	fcall	stringdir
   767  07BC  00A1               	movwf	___lwdiv@divisor+1
   768  07BD  0838               	movf	sprintf@val+1,w
   769  07BE  00A3               	movwf	___lwdiv@dividend+1
   770  07BF  0837               	movf	sprintf@val,w
   771  07C0  00A2               	movwf	___lwdiv@dividend
   772  07C1  118A  267E  118A   	fcall	___lwdiv
   773  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   774  07C5  1303               	bcf	3,6	;RP1=0, select bank0
   775  07C6  0821               	movf	?___lwdiv+1,w
   776  07C7  00AB               	movwf	___lwmod@dividend+1
   777  07C8  0820               	movf	?___lwdiv,w
   778  07C9  00AA               	movwf	___lwmod@dividend
   779  07CA  118A  2642  118A   	fcall	___lwmod
   780  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   781  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   782  07CF  0828               	movf	?___lwmod,w
   783  07D0  3E30               	addlw	48
   784  07D1  00B2               	movwf	??_sprintf+1
   785  07D2  0832               	movf	??_sprintf+1,w
   786  07D3  00BA               	movwf	sprintf@c
   787  07D4                     l1129:	
   788                           
   789                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
   790  07D4  083A               	movf	sprintf@c,w
   791  07D5  00B1               	movwf	??_sprintf
   792  07D6  0839               	movf	sprintf@sp,w
   793  07D7  0084               	movwf	4
   794  07D8  0831               	movf	??_sprintf,w
   795  07D9  1383               	bcf	3,7	;select IRP bank0
   796  07DA  0080               	movwf	0
   797  07DB                     l1131:	
   798  07DB  3001               	movlw	1
   799  07DC  00B1               	movwf	??_sprintf
   800  07DD  0831               	movf	??_sprintf,w
   801  07DE  07B9               	addwf	sprintf@sp,f
   802  07DF                     l1133:	
   803                           
   804                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
   805  07DF  30FF               	movlw	255
   806  07E0  00B1               	movwf	??_sprintf
   807  07E1  0831               	movf	??_sprintf,w
   808  07E2  07B6               	addwf	sprintf@prec,f
   809  07E3  0A36               	incf	sprintf@prec,w
   810  07E4  1D03               	btfss	3,2
   811  07E5  2FE7               	goto	u621
   812  07E6  2FE8               	goto	u620
   813  07E7                     u621:	
   814  07E7  2FAC               	goto	l1127
   815  07E8                     u620:	
   816  07E8                     l1135:	
   817                           
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
   819  07E8  3001               	movlw	1
   820  07E9  07AE               	addwf	sprintf@f,f
   821  07EA  30FF               	movlw	-1
   822  07EB  072E               	addwf	sprintf@f,w
   823  07EC  0084               	movwf	4
   824  07ED  118A  2002  118A   	fcall	stringdir
   825  07F0  00B1               	movwf	??_sprintf
   826  07F1  0831               	movf	??_sprintf,w
   827  07F2  00BA               	movwf	sprintf@c
   828  07F3  083A               	movf	sprintf@c,w
   829  07F4  1D03               	btfss	3,2
   830  07F5  2FF7               	goto	u631
   831  07F6  2FF8               	goto	u630
   832  07F7                     u631:	
   833  07F7  2F2B               	goto	l1085
   834  07F8                     u630:	
   835  07F8                     l1137:	
   836                           
   837                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
   838  07F8  0839               	movf	sprintf@sp,w
   839  07F9  0084               	movwf	4
   840  07FA  1383               	bcf	3,7	;select IRP bank0
   841  07FB  0180               	clrf	0
   842  07FC                     l199:	
   843  07FC  0008               	return
   844  07FD                     __end_of_sprintf:	
   845                           
   846                           	psect	text2
   847  0642                     __ptext2:	
   848 ;; *************** function ___lwmod *****************
   849 ;; Defined at:
   850 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  divisor         2    8[BANK0 ] unsigned int 
   853 ;;  dividend        2   10[BANK0 ] unsigned int 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  counter         1   13[BANK0 ] unsigned char 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  2    8[BANK0 ] unsigned int 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1
   865 ;;      Params:         0       4       0
   866 ;;      Locals:         0       1       0
   867 ;;      Temps:          0       1       0
   868 ;;      Totals:         0       6       0
   869 ;;Total ram usage:        6 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_sprintf
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           
   879                           ;psect for function ___lwmod
   880  0642                     ___lwmod:	
   881  0642                     l1015:	
   882                           ;incstack = 0
   883                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   884                           
   885  0642  1283               	bcf	3,5	;RP0=0, select bank0
   886  0643  1303               	bcf	3,6	;RP1=0, select bank0
   887  0644  0828               	movf	___lwmod@divisor,w
   888  0645  0429               	iorwf	___lwmod@divisor+1,w
   889  0646  1903               	btfsc	3,2
   890  0647  2E49               	goto	u491
   891  0648  2E4A               	goto	u490
   892  0649                     u491:	
   893  0649  2E79               	goto	l1033
   894  064A                     u490:	
   895  064A                     l1017:	
   896  064A  01AD               	clrf	___lwmod@counter
   897  064B  0AAD               	incf	___lwmod@counter,f
   898  064C  2E58               	goto	l1023
   899  064D                     l1019:	
   900  064D  3001               	movlw	1
   901  064E                     u505:	
   902  064E  1003               	clrc
   903  064F  0DA8               	rlf	___lwmod@divisor,f
   904  0650  0DA9               	rlf	___lwmod@divisor+1,f
   905  0651  3EFF               	addlw	-1
   906  0652  1D03               	skipz
   907  0653  2E4E               	goto	u505
   908  0654                     l1021:	
   909  0654  3001               	movlw	1
   910  0655  00AC               	movwf	??___lwmod
   911  0656  082C               	movf	??___lwmod,w
   912  0657  07AD               	addwf	___lwmod@counter,f
   913  0658                     l1023:	
   914  0658  1FA9               	btfss	___lwmod@divisor+1,7
   915  0659  2E5B               	goto	u511
   916  065A  2E5C               	goto	u510
   917  065B                     u511:	
   918  065B  2E4D               	goto	l1019
   919  065C                     u510:	
   920  065C                     l1025:	
   921  065C  0829               	movf	___lwmod@divisor+1,w
   922  065D  022B               	subwf	___lwmod@dividend+1,w
   923  065E  1D03               	skipz
   924  065F  2E62               	goto	u525
   925  0660  0828               	movf	___lwmod@divisor,w
   926  0661  022A               	subwf	___lwmod@dividend,w
   927  0662                     u525:	
   928  0662  1C03               	skipc
   929  0663  2E65               	goto	u521
   930  0664  2E66               	goto	u520
   931  0665                     u521:	
   932  0665  2E6C               	goto	l1029
   933  0666                     u520:	
   934  0666                     l1027:	
   935  0666  0828               	movf	___lwmod@divisor,w
   936  0667  02AA               	subwf	___lwmod@dividend,f
   937  0668  0829               	movf	___lwmod@divisor+1,w
   938  0669  1C03               	skipc
   939  066A  03AB               	decf	___lwmod@dividend+1,f
   940  066B  02AB               	subwf	___lwmod@dividend+1,f
   941  066C                     l1029:	
   942  066C  3001               	movlw	1
   943  066D                     u535:	
   944  066D  1003               	clrc
   945  066E  0CA9               	rrf	___lwmod@divisor+1,f
   946  066F  0CA8               	rrf	___lwmod@divisor,f
   947  0670  3EFF               	addlw	-1
   948  0671  1D03               	skipz
   949  0672  2E6D               	goto	u535
   950  0673                     l1031:	
   951  0673  3001               	movlw	1
   952  0674  02AD               	subwf	___lwmod@counter,f
   953  0675  1D03               	btfss	3,2
   954  0676  2E78               	goto	u541
   955  0677  2E79               	goto	u540
   956  0678                     u541:	
   957  0678  2E5C               	goto	l1025
   958  0679                     u540:	
   959  0679                     l1033:	
   960  0679  082B               	movf	___lwmod@dividend+1,w
   961  067A  00A9               	movwf	?___lwmod+1
   962  067B  082A               	movf	___lwmod@dividend,w
   963  067C  00A8               	movwf	?___lwmod
   964  067D                     l485:	
   965  067D  0008               	return
   966  067E                     __end_of___lwmod:	
   967                           
   968                           	psect	text3
   969  067E                     __ptext3:	
   970 ;; *************** function ___lwdiv *****************
   971 ;; Defined at:
   972 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  divisor         2    0[BANK0 ] unsigned int 
   975 ;;  dividend        2    2[BANK0 ] unsigned int 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  quotient        2    5[BANK0 ] unsigned int 
   978 ;;  counter         1    7[BANK0 ] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2    0[BANK0 ] unsigned int 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1
   988 ;;      Params:         0       4       0
   989 ;;      Locals:         0       3       0
   990 ;;      Temps:          0       1       0
   991 ;;      Totals:         0       8       0
   992 ;;Total ram usage:        8 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_sprintf
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           
  1002                           ;psect for function ___lwdiv
  1003  067E                     ___lwdiv:	
  1004  067E                     l989:	
  1005                           ;incstack = 0
  1006                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1007                           
  1008  067E  1283               	bcf	3,5	;RP0=0, select bank0
  1009  067F  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0680  01A5               	clrf	___lwdiv@quotient
  1011  0681  01A6               	clrf	___lwdiv@quotient+1
  1012  0682                     l991:	
  1013  0682  0820               	movf	___lwdiv@divisor,w
  1014  0683  0421               	iorwf	___lwdiv@divisor+1,w
  1015  0684  1903               	btfsc	3,2
  1016  0685  2E87               	goto	u421
  1017  0686  2E88               	goto	u420
  1018  0687                     u421:	
  1019  0687  2EBF               	goto	l1011
  1020  0688                     u420:	
  1021  0688                     l993:	
  1022  0688  01A7               	clrf	___lwdiv@counter
  1023  0689  0AA7               	incf	___lwdiv@counter,f
  1024  068A  2E96               	goto	l999
  1025  068B                     l995:	
  1026  068B  3001               	movlw	1
  1027  068C                     u435:	
  1028  068C  1003               	clrc
  1029  068D  0DA0               	rlf	___lwdiv@divisor,f
  1030  068E  0DA1               	rlf	___lwdiv@divisor+1,f
  1031  068F  3EFF               	addlw	-1
  1032  0690  1D03               	skipz
  1033  0691  2E8C               	goto	u435
  1034  0692                     l997:	
  1035  0692  3001               	movlw	1
  1036  0693  00A4               	movwf	??___lwdiv
  1037  0694  0824               	movf	??___lwdiv,w
  1038  0695  07A7               	addwf	___lwdiv@counter,f
  1039  0696                     l999:	
  1040  0696  1FA1               	btfss	___lwdiv@divisor+1,7
  1041  0697  2E99               	goto	u441
  1042  0698  2E9A               	goto	u440
  1043  0699                     u441:	
  1044  0699  2E8B               	goto	l995
  1045  069A                     u440:	
  1046  069A                     l1001:	
  1047  069A  3001               	movlw	1
  1048  069B                     u455:	
  1049  069B  1003               	clrc
  1050  069C  0DA5               	rlf	___lwdiv@quotient,f
  1051  069D  0DA6               	rlf	___lwdiv@quotient+1,f
  1052  069E  3EFF               	addlw	-1
  1053  069F  1D03               	skipz
  1054  06A0  2E9B               	goto	u455
  1055  06A1  0821               	movf	___lwdiv@divisor+1,w
  1056  06A2  0223               	subwf	___lwdiv@dividend+1,w
  1057  06A3  1D03               	skipz
  1058  06A4  2EA7               	goto	u465
  1059  06A5  0820               	movf	___lwdiv@divisor,w
  1060  06A6  0222               	subwf	___lwdiv@dividend,w
  1061  06A7                     u465:	
  1062  06A7  1C03               	skipc
  1063  06A8  2EAA               	goto	u461
  1064  06A9  2EAB               	goto	u460
  1065  06AA                     u461:	
  1066  06AA  2EB2               	goto	l1007
  1067  06AB                     u460:	
  1068  06AB                     l1003:	
  1069  06AB  0820               	movf	___lwdiv@divisor,w
  1070  06AC  02A2               	subwf	___lwdiv@dividend,f
  1071  06AD  0821               	movf	___lwdiv@divisor+1,w
  1072  06AE  1C03               	skipc
  1073  06AF  03A3               	decf	___lwdiv@dividend+1,f
  1074  06B0  02A3               	subwf	___lwdiv@dividend+1,f
  1075  06B1                     l1005:	
  1076  06B1  1425               	bsf	___lwdiv@quotient,0
  1077  06B2                     l1007:	
  1078  06B2  3001               	movlw	1
  1079  06B3                     u475:	
  1080  06B3  1003               	clrc
  1081  06B4  0CA1               	rrf	___lwdiv@divisor+1,f
  1082  06B5  0CA0               	rrf	___lwdiv@divisor,f
  1083  06B6  3EFF               	addlw	-1
  1084  06B7  1D03               	skipz
  1085  06B8  2EB3               	goto	u475
  1086  06B9                     l1009:	
  1087  06B9  3001               	movlw	1
  1088  06BA  02A7               	subwf	___lwdiv@counter,f
  1089  06BB  1D03               	btfss	3,2
  1090  06BC  2EBE               	goto	u481
  1091  06BD  2EBF               	goto	u480
  1092  06BE                     u481:	
  1093  06BE  2E9A               	goto	l1001
  1094  06BF                     u480:	
  1095  06BF                     l1011:	
  1096  06BF  0826               	movf	___lwdiv@quotient+1,w
  1097  06C0  00A1               	movwf	?___lwdiv+1
  1098  06C1  0825               	movf	___lwdiv@quotient,w
  1099  06C2  00A0               	movwf	?___lwdiv
  1100  06C3                     l475:	
  1101  06C3  0008               	return
  1102  06C4                     __end_of___lwdiv:	
  1103                           
  1104                           	psect	text4
  1105  0556                     __ptext4:	
  1106 ;; *************** function _LCD_write_text *****************
  1107 ;; Defined at:
  1108 ;;		line 143 in file "./LCD.h"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  dato            1    wreg     PTR unsigned char 
  1111 ;;		 -> main@str(10), 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  dato            1    4[BANK0 ] PTR unsigned char 
  1114 ;;		 -> main@str(10), 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1
  1124 ;;      Params:         0       0       0
  1125 ;;      Locals:         0       1       0
  1126 ;;      Temps:          0       1       0
  1127 ;;      Totals:         0       2       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    2
  1131 ;; This function calls:
  1132 ;;		_LCD_char
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           
  1139                           ;psect for function _LCD_write_text
  1140  0556                     _LCD_write_text:	
  1141                           
  1142                           ;incstack = 0
  1143                           ; Regs used in _LCD_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1144                           ;LCD_write_text@dato stored from wreg
  1145  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1146  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1147  0558  00A4               	movwf	LCD_write_text@dato
  1148  0559                     l1053:	
  1149                           
  1150                           ;./LCD.h: 143: void LCD_write_text(char *dato);./LCD.h: 144: {;./LCD.h: 145:     while (
      +                          *dato){
  1151  0559  2D66               	goto	l1059
  1152  055A                     l1055:	
  1153                           
  1154                           ;./LCD.h: 146:         LCD_char(*dato);
  1155  055A  0824               	movf	LCD_write_text@dato,w
  1156  055B  0084               	movwf	4
  1157  055C  0800               	movf	0,w
  1158  055D  118A  256F  118A   	fcall	_LCD_char
  1159  0560                     l1057:	
  1160                           
  1161                           ;./LCD.h: 147:         dato++;
  1162  0560  3001               	movlw	1
  1163  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1164  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1165  0563  00A3               	movwf	??_LCD_write_text
  1166  0564  0823               	movf	??_LCD_write_text,w
  1167  0565  07A4               	addwf	LCD_write_text@dato,f
  1168  0566                     l1059:	
  1169                           
  1170                           ;./LCD.h: 145:     while (*dato){
  1171  0566  0824               	movf	LCD_write_text@dato,w
  1172  0567  0084               	movwf	4
  1173  0568  1383               	bcf	3,7	;select IRP bank0
  1174  0569  0800               	movf	0,w
  1175  056A  1D03               	btfss	3,2
  1176  056B  2D6D               	goto	u551
  1177  056C  2D6E               	goto	u550
  1178  056D                     u551:	
  1179  056D  2D5A               	goto	l1055
  1180  056E                     u550:	
  1181  056E                     l56:	
  1182  056E  0008               	return
  1183  056F                     __end_of_LCD_write_text:	
  1184                           
  1185                           	psect	text5
  1186  056F                     __ptext5:	
  1187 ;; *************** function _LCD_char *****************
  1188 ;; Defined at:
  1189 ;;		line 131 in file "./LCD.h"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  caracter        1    wreg     unsigned char 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  caracter        1    2[BANK0 ] unsigned char 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2, status,0, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1
  1203 ;;      Params:         0       0       0
  1204 ;;      Locals:         0       1       0
  1205 ;;      Temps:          0       1       0
  1206 ;;      Totals:         0       2       0
  1207 ;;Total ram usage:        2 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    1
  1210 ;; This function calls:
  1211 ;;		_LCD_write_nible
  1212 ;; This function is called by:
  1213 ;;		_LCD_write_text
  1214 ;;		_LCD_custom_char
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           
  1219                           ;psect for function _LCD_char
  1220  056F                     _LCD_char:	
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in _LCD_char: [wreg+status,2+status,0+pclath+cstack]
  1224                           ;LCD_char@caracter stored from wreg
  1225  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0571  00A2               	movwf	LCD_char@caracter
  1228  0572                     l983:	
  1229                           
  1230                           ;./LCD.h: 131: void LCD_char(char caracter);./LCD.h: 132: {;./LCD.h: 133:     PORTAbits.
      +                          RA2 = 1;
  1231  0572  1505               	bsf	5,2	;volatile
  1232  0573                     l985:	
  1233                           
  1234                           ;./LCD.h: 134:     LCD_write_nible(caracter >> 4);
  1235  0573  0822               	movf	LCD_char@caracter,w
  1236  0574  00A1               	movwf	??_LCD_char
  1237  0575  3004               	movlw	4
  1238  0576                     u415:	
  1239  0576  1003               	clrc
  1240  0577  0CA1               	rrf	??_LCD_char,f
  1241  0578  3EFF               	addlw	-1
  1242  0579  1D03               	skipz
  1243  057A  2D76               	goto	u415
  1244  057B  0821               	movf	??_LCD_char,w
  1245  057C  118A  25B2  118A   	fcall	_LCD_write_nible
  1246                           
  1247                           ;./LCD.h: 135:     LCD_write_nible(caracter & 0x0F);
  1248  057F  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0580  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0581  0822               	movf	LCD_char@caracter,w
  1251  0582  390F               	andlw	15
  1252  0583  118A  25B2  118A   	fcall	_LCD_write_nible
  1253  0586                     l987:	
  1254                           
  1255                           ;./LCD.h: 136:  _delay((unsigned long)((55)*(4000000/4000000.0)));
  1256  0586  3011               	movlw	17
  1257  0587  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0588  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0589  00A1               	movwf	??_LCD_char
  1260  058A                     u687:	
  1261  058A  0BA1               	decfsz	??_LCD_char,f
  1262  058B  2D8A               	goto	u687
  1263  058C  2D8D               	nop2
  1264  058D                     l50:	
  1265  058D  0008               	return
  1266  058E                     __end_of_LCD_char:	
  1267                           
  1268                           	psect	text6
  1269  06C4                     __ptext6:	
  1270 ;; *************** function _LCD_init *****************
  1271 ;; Defined at:
  1272 ;;		line 63 in file "./LCD.h"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1
  1286 ;;      Params:         0       0       0
  1287 ;;      Locals:         0       0       0
  1288 ;;      Temps:          0       2       0
  1289 ;;      Totals:         0       2       0
  1290 ;;Total ram usage:        2 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    2
  1293 ;; This function calls:
  1294 ;;		_LCD_cmd
  1295 ;;		_LCD_write_nible
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           
  1302                           ;psect for function _LCD_init
  1303  06C4                     _LCD_init:	
  1304  06C4                     l1037:	
  1305                           ;incstack = 0
  1306                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1307                           
  1308                           
  1309                           ;./LCD.h: 65:     PORTAbits.RA3 = 0;
  1310  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1311  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1312  06C6  1185               	bcf	5,3	;volatile
  1313                           
  1314                           ;./LCD.h: 66:     PORTAbits.RA2 = 0;
  1315  06C7  1105               	bcf	5,2	;volatile
  1316                           
  1317                           ;./LCD.h: 67:     PORTCbits.RC0 = 0;
  1318  06C8  1007               	bcf	7,0	;volatile
  1319                           
  1320                           ;./LCD.h: 68:     PORTCbits.RC1 = 0;
  1321  06C9  1087               	bcf	7,1	;volatile
  1322                           
  1323                           ;./LCD.h: 69:     PORTCbits.RC2 = 0;
  1324  06CA  1107               	bcf	7,2	;volatile
  1325                           
  1326                           ;./LCD.h: 70:     PORTCbits.RC3 = 0;
  1327  06CB  1187               	bcf	7,3	;volatile
  1328                           
  1329                           ;./LCD.h: 72:     TRISAbits.TRISA3 = 0;
  1330  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  1331  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  1332  06CE  1185               	bcf	5,3	;volatile
  1333                           
  1334                           ;./LCD.h: 73:     TRISAbits.TRISA2 = 0;
  1335  06CF  1105               	bcf	5,2	;volatile
  1336                           
  1337                           ;./LCD.h: 74:     TRISCbits.TRISC0 = 0;
  1338  06D0  1007               	bcf	7,0	;volatile
  1339                           
  1340                           ;./LCD.h: 75:     TRISCbits.TRISC1 = 0;
  1341  06D1  1087               	bcf	7,1	;volatile
  1342                           
  1343                           ;./LCD.h: 76:     TRISCbits.TRISC2 = 0;
  1344  06D2  1107               	bcf	7,2	;volatile
  1345                           
  1346                           ;./LCD.h: 77:     TRISCbits.TRISC3 = 0;
  1347  06D3  1187               	bcf	7,3	;volatile
  1348  06D4                     l1039:	
  1349                           
  1350                           ;./LCD.h: 79:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1351  06D4  301A               	movlw	26
  1352  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1353  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1354  06D7  00A5               	movwf	??_LCD_init+1
  1355  06D8  30F8               	movlw	248
  1356  06D9  00A4               	movwf	??_LCD_init
  1357  06DA                     u697:	
  1358  06DA  0BA4               	decfsz	??_LCD_init,f
  1359  06DB  2EDA               	goto	u697
  1360  06DC  0BA5               	decfsz	??_LCD_init+1,f
  1361  06DD  2EDA               	goto	u697
  1362  06DE                     l1041:	
  1363                           
  1364                           ;./LCD.h: 81:     LCD_write_nible(0x03);
  1365  06DE  3003               	movlw	3
  1366  06DF  118A  25B2  118A   	fcall	_LCD_write_nible
  1367  06E2                     l1043:	
  1368                           
  1369                           ;./LCD.h: 82:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1370  06E2  3007               	movlw	7
  1371  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1372  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1373  06E5  00A5               	movwf	??_LCD_init+1
  1374  06E6  307C               	movlw	124
  1375  06E7  00A4               	movwf	??_LCD_init
  1376  06E8                     u707:	
  1377  06E8  0BA4               	decfsz	??_LCD_init,f
  1378  06E9  2EE8               	goto	u707
  1379  06EA  0BA5               	decfsz	??_LCD_init+1,f
  1380  06EB  2EE8               	goto	u707
  1381  06EC  2EED               	nop2
  1382                           
  1383                           ;./LCD.h: 83:     LCD_write_nible(0x03);
  1384  06ED  3003               	movlw	3
  1385  06EE  118A  25B2  118A   	fcall	_LCD_write_nible
  1386  06F1                     l1045:	
  1387                           
  1388                           ;./LCD.h: 84:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1389  06F1  3020               	movlw	32
  1390  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1391  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1392  06F4  00A4               	movwf	??_LCD_init
  1393  06F5                     u717:	
  1394  06F5  0BA4               	decfsz	??_LCD_init,f
  1395  06F6  2EF5               	goto	u717
  1396  06F7  2EF8               	nop2
  1397  06F8                     l1047:	
  1398                           
  1399                           ;./LCD.h: 85:     LCD_write_nible(0x03);
  1400  06F8  3003               	movlw	3
  1401  06F9  118A  25B2  118A   	fcall	_LCD_write_nible
  1402                           
  1403                           ;./LCD.h: 86:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1404  06FC  3020               	movlw	32
  1405  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1406  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1407  06FF  00A4               	movwf	??_LCD_init
  1408  0700                     u727:	
  1409  0700  0BA4               	decfsz	??_LCD_init,f
  1410  0701  2F00               	goto	u727
  1411  0702  2F03               	nop2
  1412  0703                     l1049:	
  1413                           
  1414                           ;./LCD.h: 87:     LCD_write_nible(0x02);
  1415  0703  3002               	movlw	2
  1416  0704  118A  25B2  118A   	fcall	_LCD_write_nible
  1417  0707                     l1051:	
  1418                           
  1419                           ;./LCD.h: 88:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1420  0707  3020               	movlw	32
  1421  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1422  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1423  070A  00A4               	movwf	??_LCD_init
  1424  070B                     u737:	
  1425  070B  0BA4               	decfsz	??_LCD_init,f
  1426  070C  2F0B               	goto	u737
  1427  070D  2F0E               	nop2
  1428                           
  1429                           ;./LCD.h: 90:     LCD_cmd(0x28);
  1430  070E  3028               	movlw	40
  1431  070F  118A  260A  118A   	fcall	_LCD_cmd
  1432                           
  1433                           ;./LCD.h: 91:     LCD_cmd(0x0C);
  1434  0712  300C               	movlw	12
  1435  0713  118A  260A  118A   	fcall	_LCD_cmd
  1436                           
  1437                           ;./LCD.h: 92:     LCD_cmd(0x01);
  1438  0716  3001               	movlw	1
  1439  0717  118A  260A  118A   	fcall	_LCD_cmd
  1440                           
  1441                           ;./LCD.h: 93:     LCD_cmd(0x06);
  1442  071A  3006               	movlw	6
  1443  071B  118A  260A  118A   	fcall	_LCD_cmd
  1444                           
  1445                           ;./LCD.h: 94:     LCD_cmd(0x80);
  1446  071E  3080               	movlw	128
  1447  071F  118A  260A  118A   	fcall	_LCD_cmd
  1448  0722                     l29:	
  1449  0722  0008               	return
  1450  0723                     __end_of_LCD_init:	
  1451                           
  1452                           	psect	text7
  1453  060A                     __ptext7:	
  1454 ;; *************** function _LCD_cmd *****************
  1455 ;; Defined at:
  1456 ;;		line 116 in file "./LCD.h"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  comando         1    wreg     unsigned char 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  comando         1    3[BANK0 ] unsigned char 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0, pclath, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1
  1470 ;;      Params:         0       0       0
  1471 ;;      Locals:         0       1       0
  1472 ;;      Temps:          0       2       0
  1473 ;;      Totals:         0       3       0
  1474 ;;Total ram usage:        3 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    1
  1477 ;; This function calls:
  1478 ;;		_LCD_write_nible
  1479 ;; This function is called by:
  1480 ;;		_LCD_init
  1481 ;;		_main
  1482 ;;		_LCD_gotoxy
  1483 ;;		_LCD_custom_char
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           
  1488                           ;psect for function _LCD_cmd
  1489  060A                     _LCD_cmd:	
  1490                           
  1491                           ;incstack = 0
  1492                           ; Regs used in _LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
  1493                           ;LCD_cmd@comando stored from wreg
  1494  060A  1283               	bcf	3,5	;RP0=0, select bank0
  1495  060B  1303               	bcf	3,6	;RP1=0, select bank0
  1496  060C  00A3               	movwf	LCD_cmd@comando
  1497  060D                     l971:	
  1498                           
  1499                           ;./LCD.h: 116: void LCD_cmd(unsigned char comando);./LCD.h: 117: {;./LCD.h: 118:     POR
      +                          TAbits.RA2 = 0;
  1500  060D  1105               	bcf	5,2	;volatile
  1501  060E                     l973:	
  1502                           
  1503                           ;./LCD.h: 119:     LCD_write_nible(comando >> 4);
  1504  060E  0823               	movf	LCD_cmd@comando,w
  1505  060F  00A1               	movwf	??_LCD_cmd
  1506  0610  3004               	movlw	4
  1507  0611                     u385:	
  1508  0611  1003               	clrc
  1509  0612  0CA1               	rrf	??_LCD_cmd,f
  1510  0613  3EFF               	addlw	-1
  1511  0614  1D03               	skipz
  1512  0615  2E11               	goto	u385
  1513  0616  0821               	movf	??_LCD_cmd,w
  1514  0617  118A  25B2  118A   	fcall	_LCD_write_nible
  1515                           
  1516                           ;./LCD.h: 120:     LCD_write_nible(comando & 0x0F);
  1517  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1518  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1519  061C  0823               	movf	LCD_cmd@comando,w
  1520  061D  390F               	andlw	15
  1521  061E  118A  25B2  118A   	fcall	_LCD_write_nible
  1522  0621                     l975:	
  1523                           
  1524                           ;./LCD.h: 121:     if(comando == 0x01 || comando == 0x02)
  1525  0621  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0622  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0623  0323               	decf	LCD_cmd@comando,w
  1528  0624  1903               	btfsc	3,2
  1529  0625  2E27               	goto	u391
  1530  0626  2E28               	goto	u390
  1531  0627                     u391:	
  1532  0627  2E2E               	goto	l979
  1533  0628                     u390:	
  1534  0628                     l977:	
  1535  0628  3002               	movlw	2
  1536  0629  0623               	xorwf	LCD_cmd@comando,w
  1537  062A  1D03               	btfss	3,2
  1538  062B  2E2D               	goto	u401
  1539  062C  2E2E               	goto	u400
  1540  062D                     u401:	
  1541  062D  2E3A               	goto	l981
  1542  062E                     u400:	
  1543  062E                     l979:	
  1544                           
  1545                           ;./LCD.h: 122:         _delay((unsigned long)((2)*(4000000/4000.0)));
  1546  062E  3003               	movlw	3
  1547  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0631  00A2               	movwf	??_LCD_cmd+1
  1550  0632  3097               	movlw	151
  1551  0633  00A1               	movwf	??_LCD_cmd
  1552  0634                     u747:	
  1553  0634  0BA1               	decfsz	??_LCD_cmd,f
  1554  0635  2E34               	goto	u747
  1555  0636  0BA2               	decfsz	??_LCD_cmd+1,f
  1556  0637  2E34               	goto	u747
  1557  0638  0000               	nop
  1558  0639  2E41               	goto	l47
  1559  063A                     l981:	
  1560                           
  1561                           ;./LCD.h: 124:         _delay((unsigned long)((55)*(4000000/4000000.0)));
  1562  063A  3011               	movlw	17
  1563  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1564  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1565  063D  00A1               	movwf	??_LCD_cmd
  1566  063E                     u757:	
  1567  063E  0BA1               	decfsz	??_LCD_cmd,f
  1568  063F  2E3E               	goto	u757
  1569  0640  2E41               	nop2
  1570  0641                     l47:	
  1571  0641  0008               	return
  1572  0642                     __end_of_LCD_cmd:	
  1573                           
  1574                           	psect	text8
  1575  05B2                     __ptext8:	
  1576 ;; *************** function _LCD_write_nible *****************
  1577 ;; Defined at:
  1578 ;;		line 101 in file "./LCD.h"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  nible           1    wreg     unsigned char 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  nible           1    0[BANK0 ] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1
  1592 ;;      Params:         0       0       0
  1593 ;;      Locals:         0       1       0
  1594 ;;      Temps:          0       0       0
  1595 ;;      Totals:         0       1       0
  1596 ;;Total ram usage:        1 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; This function calls:
  1599 ;;		Nothing
  1600 ;; This function is called by:
  1601 ;;		_LCD_init
  1602 ;;		_LCD_cmd
  1603 ;;		_LCD_char
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function _LCD_write_nible
  1609  05B2                     _LCD_write_nible:	
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in _LCD_write_nible: [wreg]
  1613                           ;LCD_write_nible@nible stored from wreg
  1614  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1615  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1616  05B4  00A0               	movwf	LCD_write_nible@nible
  1617  05B5                     l961:	
  1618                           
  1619                           ;./LCD.h: 101: void LCD_write_nible(unsigned char nible);./LCD.h: 102: {;./LCD.h: 103:  
      +                             if (nible & (1<<0)) PORTCbits.RC0 = 1; else PORTCbits.RC0 = 0;
  1620  05B5  1C20               	btfss	LCD_write_nible@nible,0
  1621  05B6  2DB8               	goto	u341
  1622  05B7  2DB9               	goto	u340
  1623  05B8                     u341:	
  1624  05B8  2DBB               	goto	l32
  1625  05B9                     u340:	
  1626  05B9                     l963:	
  1627  05B9  1407               	bsf	7,0	;volatile
  1628  05BA  2DBC               	goto	l33
  1629  05BB                     l32:	
  1630  05BB  1007               	bcf	7,0	;volatile
  1631  05BC                     l33:	
  1632                           
  1633                           ;./LCD.h: 104:     if (nible & (1<<1)) PORTCbits.RC1 = 1; else PORTCbits.RC1 = 0;
  1634  05BC  1CA0               	btfss	LCD_write_nible@nible,1
  1635  05BD  2DBF               	goto	u351
  1636  05BE  2DC0               	goto	u350
  1637  05BF                     u351:	
  1638  05BF  2DC2               	goto	l34
  1639  05C0                     u350:	
  1640  05C0                     l965:	
  1641  05C0  1487               	bsf	7,1	;volatile
  1642  05C1  2DC3               	goto	l35
  1643  05C2                     l34:	
  1644  05C2  1087               	bcf	7,1	;volatile
  1645  05C3                     l35:	
  1646                           
  1647                           ;./LCD.h: 105:     if (nible & (1<<2)) PORTCbits.RC2 = 1; else PORTCbits.RC2 = 0;
  1648  05C3  1D20               	btfss	LCD_write_nible@nible,2
  1649  05C4  2DC6               	goto	u361
  1650  05C5  2DC7               	goto	u360
  1651  05C6                     u361:	
  1652  05C6  2DC9               	goto	l36
  1653  05C7                     u360:	
  1654  05C7                     l967:	
  1655  05C7  1507               	bsf	7,2	;volatile
  1656  05C8  2DCA               	goto	l37
  1657  05C9                     l36:	
  1658  05C9  1107               	bcf	7,2	;volatile
  1659  05CA                     l37:	
  1660                           
  1661                           ;./LCD.h: 106:     if (nible & (1<<3)) PORTCbits.RC3 = 1; else PORTCbits.RC3 = 0;
  1662  05CA  1DA0               	btfss	LCD_write_nible@nible,3
  1663  05CB  2DCD               	goto	u371
  1664  05CC  2DCE               	goto	u370
  1665  05CD                     u371:	
  1666  05CD  2DD0               	goto	l38
  1667  05CE                     u370:	
  1668  05CE                     l969:	
  1669  05CE  1587               	bsf	7,3	;volatile
  1670  05CF  2DD1               	goto	l39
  1671  05D0                     l38:	
  1672  05D0  1187               	bcf	7,3	;volatile
  1673  05D1                     l39:	
  1674                           
  1675                           ;./LCD.h: 107:     PORTAbits.RA3 = 1;
  1676  05D1  1585               	bsf	5,3	;volatile
  1677                           
  1678                           ;./LCD.h: 108:     __nop(); __nop();
  1679  05D2  0000               	nop
  1680  05D3  0000               	nop
  1681                           
  1682                           ;./LCD.h: 109:     PORTAbits.RA3 = 0;
  1683  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1684  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1685  05D6  1185               	bcf	5,3	;volatile
  1686  05D7                     l40:	
  1687  05D7  0008               	return
  1688  05D8                     __end_of_LCD_write_nible:	
  1689                           
  1690                           	psect	text9
  1691  058E                     __ptext9:	
  1692 ;; *************** function _ADC_read *****************
  1693 ;; Defined at:
  1694 ;;		line 30 in file "./ADC.h"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  channel         1    wreg     unsigned char 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  channel         1    3[BANK0 ] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2    0[BANK0 ] unsigned int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMMON   BANK0   BANK1
  1708 ;;      Params:         0       2       0
  1709 ;;      Locals:         0       1       0
  1710 ;;      Temps:          0       1       0
  1711 ;;      Totals:         0       4       0
  1712 ;;Total ram usage:        4 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_main
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           
  1722                           ;psect for function _ADC_read
  1723  058E                     _ADC_read:	
  1724                           
  1725                           ;incstack = 0
  1726                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1727                           ;ADC_read@channel stored from wreg
  1728  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1729  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1730  0590  00A3               	movwf	ADC_read@channel
  1731  0591                     l1073:	
  1732                           
  1733                           ;./ADC.h: 30: uint16_t ADC_read(uint8_t channel);./ADC.h: 31: {;./ADC.h: 32:     ADCON0b
      +                          its.ADCS = channel;
  1734  0591  0823               	movf	ADC_read@channel,w
  1735  0592  00A2               	movwf	??_ADC_read
  1736  0593  0EA2               	swapf	??_ADC_read,f
  1737  0594  0DA2               	rlf	??_ADC_read,f
  1738  0595  0DA2               	rlf	??_ADC_read,f
  1739  0596  081F               	movf	31,w	;volatile
  1740  0597  0622               	xorwf	??_ADC_read,w
  1741  0598  393F               	andlw	-193
  1742  0599  0622               	xorwf	??_ADC_read,w
  1743  059A  009F               	movwf	31	;volatile
  1744  059B                     l1075:	
  1745                           
  1746                           ;./ADC.h: 33:     _delay((unsigned long)((25)*(4000000/4000000.0)));
  1747  059B  3007               	movlw	7
  1748  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1749  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1750  059E  00A2               	movwf	??_ADC_read
  1751  059F                     u767:	
  1752  059F  0BA2               	decfsz	??_ADC_read,f
  1753  05A0  2D9F               	goto	u767
  1754  05A1  2DA2               	nop2
  1755  05A2                     l1077:	
  1756                           
  1757                           ;./ADC.h: 34:     ADCON0bits.GO = 1;
  1758  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1759  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1760  05A4  151F               	bsf	31,2	;volatile
  1761  05A5                     l78:	
  1762                           ;./ADC.h: 35:     while(ADCON0bits.GO_DONE);
  1763                           
  1764  05A5  191F               	btfsc	31,2	;volatile
  1765  05A6  2DA8               	goto	u561
  1766  05A7  2DA9               	goto	u560
  1767  05A8                     u561:	
  1768  05A8  2DA5               	goto	l78
  1769  05A9                     u560:	
  1770  05A9                     l1079:	
  1771                           
  1772                           ;./ADC.h: 36:     return ((uint16_t)((ADRESH<<8)+ADRESL));
  1773  05A9  081E               	movf	30,w	;volatile
  1774  05AA  00A1               	movwf	?_ADC_read+1
  1775  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  1776  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  1777  05AD  081E               	movf	30,w	;volatile
  1778  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  1779  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  1780  05B0  00A0               	movwf	?_ADC_read
  1781  05B1                     l81:	
  1782  05B1  0008               	return
  1783  05B2                     __end_of_ADC_read:	
  1784                           
  1785                           	psect	text10
  1786  0548                     __ptext10:	
  1787 ;; *************** function _ADC_init *****************
  1788 ;; Defined at:
  1789 ;;		line 16 in file "./ADC.h"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1
  1803 ;;      Params:         0       0       0
  1804 ;;      Locals:         0       0       0
  1805 ;;      Temps:          0       0       0
  1806 ;;      Totals:         0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _ADC_init
  1818  0548                     _ADC_init:	
  1819  0548                     l1061:	
  1820                           ;incstack = 0
  1821                           ; Regs used in _ADC_init: [wreg+status,2+status,0]
  1822                           
  1823                           
  1824                           ;./ADC.h: 18:     ADCON1bits.ADFM = 1;
  1825  0548  1683               	bsf	3,5	;RP0=1, select bank1
  1826  0549  1303               	bcf	3,6	;RP1=0, select bank1
  1827  054A  179F               	bsf	31,7	;volatile
  1828  054B                     l1063:	
  1829                           
  1830                           ;./ADC.h: 19:     ADCON1bits.PCFG = 0b1110;
  1831  054B  081F               	movf	31,w	;volatile
  1832  054C  39F0               	andlw	-16
  1833  054D  380E               	iorlw	14
  1834  054E  009F               	movwf	31	;volatile
  1835  054F                     l1065:	
  1836                           
  1837                           ;./ADC.h: 20:     ADCON1bits.ADCS2 = 0;
  1838  054F  131F               	bcf	31,6	;volatile
  1839  0550                     l1067:	
  1840                           
  1841                           ;./ADC.h: 21:     ADCON0bits.ADCS1 = 0;
  1842  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1844  0552  139F               	bcf	31,7	;volatile
  1845  0553                     l1069:	
  1846                           
  1847                           ;./ADC.h: 22:     ADCON0bits.ADCS1 = 1;
  1848  0553  179F               	bsf	31,7	;volatile
  1849  0554                     l1071:	
  1850                           
  1851                           ;./ADC.h: 23:     ADCON0bits.ADON = 1;
  1852  0554  141F               	bsf	31,0	;volatile
  1853  0555                     l75:	
  1854  0555  0008               	return
  1855  0556                     __end_of_ADC_init:	
  1856  007E                     btemp	set	126	;btemp
  1857  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     41      41
    BANK1            94      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_write_text@dato	PTR unsigned char  size(1) Largest target is 10
		 -> main@str(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_write_text->_LCD_char
    _LCD_char->_LCD_write_nible
    _LCD_init->_LCD_cmd
    _LCD_cmd->_LCD_write_nible

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    1960
                                             27 BANK0     14    14      0
                           _ADC_init
                           _ADC_read
                            _LCD_cmd
                           _LCD_init
                     _LCD_write_text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_write_text                                       2     2      0     210
                                              3 BANK0      2     2      0
                           _LCD_char
 ---------------------------------------------------------------------------------
 (2) _LCD_char                                             2     2      0     132
                                              1 BANK0      2     2      0
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     264
                                              4 BANK0      2     2      0
                            _LCD_cmd
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              3     3      0     176
                                              1 BANK0      3     3      0
                    _LCD_write_nible
 ---------------------------------------------------------------------------------
 (3) _LCD_write_nible                                      1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_cmd
     _LCD_write_nible
   _LCD_init
     _LCD_cmd
       _LCD_write_nible
     _LCD_write_nible
   _LCD_write_text
     _LCD_char
       _LCD_write_nible
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     29      29       4       43.6%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 19 17:32:23 2020

                       pc 0002               __CFG_CP$OFF 0000                        l40 05D7  
                      l32 05BB                        l33 05BC                        l34 05C2  
                      l50 058D                        l35 05C3                        l36 05C9  
                      l37 05CA                        l29 0722                        l38 05D0  
                      l39 05D1                        l47 0641                        l56 056E  
                      l81 05B1                        l75 0555                        l78 05A5  
                      l86 05DE                        fsr 0004                       l199 07FC  
                     l475 06C3                       l485 067D                       l961 05B5  
                     l963 05B9                       l971 060D                       l965 05C0  
                     l981 063A                       l973 060E                       l967 05C7  
                     l975 0621                       l983 0572                       l991 0682  
                     l969 05CE                       l977 0628                       l985 0573  
                     l993 0688                       l979 062E                       l987 0586  
                     l995 068B                       l997 0692                       l989 067E  
                     l999 0696                       u400 062E                       u401 062D  
                     u340 05B9                       u420 0688                       u341 05B8  
                     u421 0687                       u350 05C0                       u510 065C  
                     u351 05BF                       u415 0576                       u511 065B  
                     u360 05C7                       u440 069A                       u520 0666  
                     u600 0796                       u361 05C6                       u441 0699  
                     u521 0665                       u505 064E                       u601 0795  
                     u370 05CE                       u610 079C              __CFG_CPD$OFF 0000  
                     u371 05CD                       u435 068C                       u611 079B  
                     u460 06AB                       u540 0679                       u620 07E8  
                     u461 06AA                       u541 0678                       u525 0662  
                     u621 07E7                       u390 0628                       u550 056E  
                     u630 07F8                       u391 0627                       u551 056D  
                     u455 069B                       u535 066D                       u631 07F7  
                     u560 05A9                       u480 06BF                       u561 05A8  
                     u385 0611                       u481 06BE                       u465 06A7  
                     u490 064A                       u570 0731                       u707 06E8  
                     u475 06B3                       u491 0649                       u571 0730  
                     u580 0769                       u717 06F5                       u581 0768  
                     u590 078B                       u727 0700                       u591 078A  
                     u737 070B                       u747 0634                       u595 0787  
                     u757 063E                       u677 0602                       u767 059F  
                     u687 058A                       u697 06DA                       fsr0 0004  
                     indf 0000              __CFG_FOSC$XT 0000      LCD_write_nible@nible 0020  
            __CFG_LVP$OFF 0000           __end_of_LCD_cmd 0642                      l1001 069A  
                    l1003 06AB                      l1011 06BF                      l1005 06B1  
                    l1021 0654                      l1101 0765                      l1007 06B2  
                    l1031 0673                      l1023 0658                      l1015 0642  
                    l1103 0769                      l1041 06DE                      l1009 06B9  
                    l1025 065C                      l1017 064A                      l1033 0679  
                    l1121 079C                      l1113 0774                      l1105 076D  
                    l1051 0707                      l1043 06E2                      l1027 0666  
                    l1019 064D                      l1131 07DB                      l1123 07A3  
                    l1107 0772                      l1061 0548                      l1045 06F1  
                    l1037 06C4                      l1053 0559                      l1029 066C  
                    l1133 07DF                      l1125 07A7                      l1117 078C  
                    l1213 074E                      l1071 0554                      l1063 054B  
                    l1047 06F8                      l1039 06D4                      l1055 055A  
                    l1127 07AC                      l1119 0796                      l1135 07E8  
                    l1065 054F                      l1073 0591                      l1049 0703  
                    l1057 0560                      l1129 07D4                      l1137 07F8  
                    l1067 0550                      l1075 059B                      l1059 0566  
                    l1091 073D                      l1083 0726                      l1069 0553  
                    l1077 05A2                      l1085 072B                      l1079 05A9  
                    l1095 073E                      l1087 0731                      l1191 05FC  
                    l1097 0759                      l1089 0738                      l1185 05D8  
                    l1099 0761                      l1187 05EC                      l1189 05F8  
                    STR_1 0012              __CFG_WRT$OFF 0000                      _main 05D8  
                    btemp 007E                      start 0000          __end_of_ADC_init 0556  
        __end_of_ADC_read 05B2          ?_LCD_write_nible 0020          __end_of_LCD_char 058E  
        __end_of_LCD_init 0723                     ?_main 0020             __CFG_WDTE$OFF 0000  
         __end_of___lwdiv 06C4           __end_of___lwmod 067E             __CFG_PWRTE$ON 0000  
         __end_of_dpowers 0012            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 07FD  
         __initialization 07FD              __end_of_main 060A                    ??_main 003B  
               ??_LCD_cmd 0021                    _ADRESH 001E                    _ADRESL 009E  
               ??___lwdiv 0024                 ??___lwmod 002C   __size_of_LCD_write_text 0019  
               ?_ADC_init 0020                 ?_ADC_read 0020                 ??_sprintf 0031  
 __end_of__initialization 07FD                 ?_LCD_char 0020                 ?_LCD_init 0020  
          __pcstackCOMMON 0000           ADC_read@channel 0023                ??_ADC_init 0000  
              ??_ADC_read 0022                ??_LCD_char 0021                ??_LCD_init 0024  
              __pmaintext 05D8                   _LCD_cmd 060A                __stringtab 0002  
                 ___lwdiv 067E                   ___lwmod 0642            _LCD_write_text 0556  
                 __ptext1 0723                   __ptext2 0642                   __ptext3 067E  
                 __ptext4 0556                   __ptext5 056F                   __ptext6 06C4  
                 __ptext7 060A                   __ptext8 05B2                   __ptext9 058E  
                 _dpowers 0008  __size_of_LCD_write_nible 0026          LCD_char@caracter 0022  
                 _sprintf 0723                   main@str 003D      end_of_initialization 07FD  
  __end_of_LCD_write_text 056F                 _PORTAbits 0005                 _PORTCbits 0007  
               _TRISAbits 0085                 _TRISCbits 0087         __size_of_ADC_init 000E  
       __size_of_ADC_read 0024         __size_of_LCD_char 001F         __size_of_LCD_init 005F  
         ?_LCD_write_text 0020       start_initialization 07FD         ??_LCD_write_nible 0000  
                ?_LCD_cmd 0020                 ___latbits 0001             __pcstackBANK0 0020  
             sprintf@flag 0035               sprintf@prec 0036          ___lwdiv@dividend 0022  
                ?___lwdiv 0020                  ?___lwmod 0028                 __pstrings 0002  
                _ADC_init 0548                  _ADC_read 058E          ___lwdiv@quotient 0025  
                ?_sprintf 002E                  _LCD_char 056F                  _LCD_init 06C4  
              _ADCON0bits 001F               __stringbase 0007                _ADCON1bits 009F  
        __size_of_LCD_cmd 0038          ??_LCD_write_text 0023        LCD_write_text@dato 0024  
        __size_of___lwdiv 0046          __size_of___lwmod 003C        __end_of__stringtab 0008  
         _LCD_write_nible 05B2                sprintf@val 0037           ___lwdiv@divisor 0020  
         ___lwdiv@counter 0027                  __ptext10 0548          __size_of_sprintf 00DA  
           __size_of_main 0032            LCD_cmd@comando 0023                  main@dato 0047  
               sprintf@ap 0034                 sprintf@sp 0039          ___lwmod@dividend 002A  
               stringcode 0002   __end_of_LCD_write_nible 05D8                  sprintf@c 003A  
                sprintf@f 002E           ___lwmod@divisor 0028           ___lwmod@counter 002D  
                stringdir 0002                  stringtab 0002  
