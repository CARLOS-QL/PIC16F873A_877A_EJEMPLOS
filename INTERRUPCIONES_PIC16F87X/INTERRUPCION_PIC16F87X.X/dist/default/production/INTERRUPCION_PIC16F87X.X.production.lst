

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 16:21:33 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F873A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	strings
   175  0174                     __pstrings:
   176  0174                     stringtab:
   177  0174                     __stringtab:
   178  0174                     stringcode:	
   179                           ;	String table - string pointers are 1 byte each
   180                           
   181  0174                     stringdir:
   182  0174  3001               	movlw	high stringdir
   183  0175  008A               	movwf	10
   184  0176  0804               	movf	4,w
   185  0177  0A84               	incf	4,f
   186  0178  0782               	addwf	2,f
   187  0179                     __stringbase:
   188  0179  3400               	retlw	0
   189  017A                     __end_of__stringtab:
   190  017A                     _dpowers:
   191  017A  3401               	retlw	1
   192  017B  3400               	retlw	0
   193  017C  340A               	retlw	10
   194  017D  3400               	retlw	0
   195  017E  3464               	retlw	100
   196  017F  3400               	retlw	0
   197  0180  34E8               	retlw	232
   198  0181  3403               	retlw	3
   199  0182  3410               	retlw	16
   200  0183  3427               	retlw	39
   201  0184                     __end_of_dpowers:
   202  000B                     _INTCONbits	set	11
   203  0019                     _TXREG	set	25
   204  001A                     _RCREG	set	26
   205  000C                     _PIR1bits	set	12
   206  0018                     _RCSTAbits	set	24
   207  0081                     _OPTION_REGbits	set	129
   208  008C                     _PIE1bits	set	140
   209  0099                     _SPBRG	set	153
   210  0098                     _TXSTAbits	set	152
   211  0087                     _TRISCbits	set	135
   212  0184                     STR_2:
   213  0184  3420               	retlw	32	;' '
   214  0185  3449               	retlw	73	;'I'
   215  0186  346E               	retlw	110	;'n'
   216  0187  3474               	retlw	116	;'t'
   217  0188  3465               	retlw	101	;'e'
   218  0189  3472               	retlw	114	;'r'
   219  018A  3475               	retlw	117	;'u'
   220  018B  3470               	retlw	112	;'p'
   221  018C  3463               	retlw	99	;'c'
   222  018D  3469               	retlw	105	;'i'
   223  018E  346F               	retlw	111	;'o'
   224  018F  346E               	retlw	110	;'n'
   225  0190  3420               	retlw	32	;' '
   226  0191  3465               	retlw	101	;'e'
   227  0192  346E               	retlw	110	;'n'
   228  0193  3420               	retlw	32	;' '
   229  0194  3452               	retlw	82	;'R'
   230  0195  3458               	retlw	88	;'X'
   231  0196  3420               	retlw	32	;' '
   232  0197  3455               	retlw	85	;'U'
   233  0198  3453               	retlw	83	;'S'
   234  0199  3441               	retlw	65	;'A'
   235  019A  3452               	retlw	82	;'R'
   236  019B  3454               	retlw	84	;'T'
   237  019C  3420               	retlw	32	;' '
   238  019D  340A               	retlw	10
   239  019E  340D               	retlw	13
   240  019F  3400               	retlw	0
   241  01A0                     STR_1:
   242  01A0  3449               	retlw	73	;'I'
   243  01A1  346E               	retlw	110	;'n'
   244  01A2  3474               	retlw	116	;'t'
   245  01A3  3465               	retlw	101	;'e'
   246  01A4  3472               	retlw	114	;'r'
   247  01A5  3475               	retlw	117	;'u'
   248  01A6  3470               	retlw	112	;'p'
   249  01A7  3463               	retlw	99	;'c'
   250  01A8  3469               	retlw	105	;'i'
   251  01A9  346F               	retlw	111	;'o'
   252  01AA  346E               	retlw	110	;'n'
   253  01AB  3420               	retlw	32	;' '
   254  01AC  3465               	retlw	101	;'e'
   255  01AD  346E               	retlw	110	;'n'
   256  01AE  3420               	retlw	32	;' '
   257  01AF  3452               	retlw	82	;'R'
   258  01B0  3442               	retlw	66	;'B'
   259  01B1  3430               	retlw	48	;'0'
   260  01B2  3420               	retlw	32	;' '
   261  01B3  340A               	retlw	10
   262  01B4  340D               	retlw	13
   263  01B5  3400               	retlw	0
   264  01B6                     STR_3:
   265  01B6  3445               	retlw	69	;'E'
   266  01B7  346C               	retlw	108	;'l'
   267  01B8  3420               	retlw	32	;' '
   268  01B9  346E               	retlw	110	;'n'
   269  01BA  3475               	retlw	117	;'u'
   270  01BB  346D               	retlw	109	;'m'
   271  01BC  3465               	retlw	101	;'e'
   272  01BD  3472               	retlw	114	;'r'
   273  01BE  346F               	retlw	111	;'o'
   274  01BF  3420               	retlw	32	;' '
   275  01C0  3465               	retlw	101	;'e'
   276  01C1  3473               	retlw	115	;'s'
   277  01C2  3420               	retlw	32	;' '
   278  01C3  3425               	retlw	37	;'%'
   279  01C4  3464               	retlw	100	;'d'
   280  01C5  340A               	retlw	10
   281  01C6  340D               	retlw	13
   282  01C7  3400               	retlw	0
   283                           
   284                           	psect	cinit
   285  0013                     start_initialization:	
   286                           ; #config settings
   287                           
   288  0013                     __initialization:
   289  0013                     end_of_initialization:	
   290                           ;End of C runtime variable initialization code
   291                           
   292  0013                     __end_of__initialization:
   293  0013  0183               	clrf	3
   294  0014  118A  2AAC         	ljmp	_main	;jump to C main() function
   295                           
   296                           	psect	cstackCOMMON
   297  0000                     __pcstackCOMMON:
   298  0000                     ??_UART_init:
   299  0000                     ??_UART_write:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0000                     ??_putch:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0000                     ??i1_UART_write:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0000                     ??i1_putch:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           	psect	cstackBANK0
   313  0020                     __pcstackBANK0:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0020                     ?_UART_init:
   317  0020                     ?_UART_write:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0020                     ?_putch:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0020                     ?_Interrupcion:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0020                     ?_main:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0020                     ?i1_UART_write:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0020                     ?i1_putch:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0020                     ?i1_printf:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0020                     ?i1___lwdiv:	
   339                           ; 2 bytes @ 0x0
   340                           
   341  0020                     i1UART_write@dato:	
   342                           ; 2 bytes @ 0x0
   343                           
   344  0020                     i1___lwdiv@divisor:	
   345                           ; 1 bytes @ 0x0
   346                           
   347                           
   348                           ; 2 bytes @ 0x0
   349  0020                     	ds	1
   350  0021                     i1putch@txDato:
   351                           
   352                           ; 1 bytes @ 0x1
   353  0021                     	ds	1
   354  0022                     i1___lwdiv@dividend:
   355                           
   356                           ; 2 bytes @ 0x2
   357  0022                     	ds	2
   358  0024                     ??i1___lwdiv:
   359                           
   360                           ; 1 bytes @ 0x4
   361  0024                     	ds	1
   362  0025                     i1___lwdiv@quotient:
   363                           
   364                           ; 2 bytes @ 0x5
   365  0025                     	ds	2
   366  0027                     i1___lwdiv@counter:
   367                           
   368                           ; 1 bytes @ 0x7
   369  0027                     	ds	1
   370  0028                     ?i1___lwmod:
   371  0028                     i1___lwmod@divisor:	
   372                           ; 2 bytes @ 0x8
   373                           
   374                           
   375                           ; 2 bytes @ 0x8
   376  0028                     	ds	2
   377  002A                     i1___lwmod@dividend:
   378                           
   379                           ; 2 bytes @ 0xA
   380  002A                     	ds	2
   381  002C                     ??i1___lwmod:
   382                           
   383                           ; 1 bytes @ 0xC
   384  002C                     	ds	1
   385  002D                     i1___lwmod@counter:
   386                           
   387                           ; 1 bytes @ 0xD
   388  002D                     	ds	1
   389  002E                     ??i1_printf:
   390                           
   391                           ; 1 bytes @ 0xE
   392  002E                     	ds	3
   393  0031                     i1printf@ap:
   394                           
   395                           ; 1 bytes @ 0x11
   396  0031                     	ds	1
   397  0032                     i1printf@flag:
   398                           
   399                           ; 1 bytes @ 0x12
   400  0032                     	ds	1
   401  0033                     i1printf@f:
   402                           
   403                           ; 1 bytes @ 0x13
   404  0033                     	ds	1
   405  0034                     i1printf@prec:
   406                           
   407                           ; 1 bytes @ 0x14
   408  0034                     	ds	1
   409  0035                     i1printf@val:
   410                           
   411                           ; 2 bytes @ 0x15
   412  0035                     	ds	2
   413  0037                     i1printf@c:
   414                           
   415                           ; 1 bytes @ 0x17
   416  0037                     	ds	1
   417  0038                     ??_Interrupcion:
   418                           
   419                           ; 1 bytes @ 0x18
   420  0038                     	ds	5
   421  003D                     Interrupcion@dataRX:
   422                           
   423                           ; 1 bytes @ 0x1D
   424  003D                     	ds	1
   425  003E                     ?___lwdiv:
   426  003E                     UART_write@dato:	
   427                           ; 2 bytes @ 0x1E
   428                           
   429  003E                     ___lwdiv@divisor:	
   430                           ; 1 bytes @ 0x1E
   431                           
   432                           
   433                           ; 2 bytes @ 0x1E
   434  003E                     	ds	1
   435  003F                     putch@txDato:
   436                           
   437                           ; 1 bytes @ 0x1F
   438  003F                     	ds	1
   439  0040                     ___lwdiv@dividend:
   440                           
   441                           ; 2 bytes @ 0x20
   442  0040                     	ds	2
   443  0042                     ??___lwdiv:
   444                           
   445                           ; 1 bytes @ 0x22
   446  0042                     	ds	1
   447  0043                     ___lwdiv@quotient:
   448                           
   449                           ; 2 bytes @ 0x23
   450  0043                     	ds	2
   451  0045                     ___lwdiv@counter:
   452                           
   453                           ; 1 bytes @ 0x25
   454  0045                     	ds	1
   455  0046                     ?___lwmod:
   456  0046                     ___lwmod@divisor:	
   457                           ; 2 bytes @ 0x26
   458                           
   459                           
   460                           ; 2 bytes @ 0x26
   461  0046                     	ds	2
   462  0048                     ___lwmod@dividend:
   463                           
   464                           ; 2 bytes @ 0x28
   465  0048                     	ds	2
   466  004A                     ??___lwmod:
   467                           
   468                           ; 1 bytes @ 0x2A
   469  004A                     	ds	1
   470  004B                     ___lwmod@counter:
   471                           
   472                           ; 1 bytes @ 0x2B
   473  004B                     	ds	1
   474  004C                     ?_printf:
   475                           
   476                           ; 2 bytes @ 0x2C
   477  004C                     	ds	2
   478  004E                     ??_printf:
   479                           
   480                           ; 1 bytes @ 0x2E
   481  004E                     	ds	3
   482  0051                     printf@ap:
   483                           
   484                           ; 1 bytes @ 0x31
   485  0051                     	ds	1
   486  0052                     printf@flag:
   487                           
   488                           ; 1 bytes @ 0x32
   489  0052                     	ds	1
   490  0053                     printf@prec:
   491                           
   492                           ; 1 bytes @ 0x33
   493  0053                     	ds	1
   494  0054                     printf@f:
   495                           
   496                           ; 1 bytes @ 0x34
   497  0054                     	ds	1
   498  0055                     printf@val:
   499                           
   500                           ; 2 bytes @ 0x35
   501  0055                     	ds	2
   502  0057                     printf@c:
   503                           
   504                           ; 1 bytes @ 0x37
   505  0057                     	ds	1
   506  0058                     ??_main:
   507                           
   508                           ; 1 bytes @ 0x38
   509  0058                     	ds	3
   510  005B                     main@numero:
   511                           
   512                           ; 1 bytes @ 0x3B
   513  005B                     	ds	1
   514                           
   515                           	psect	maintext
   516  02AC                     __pmaintext:	
   517 ;;
   518 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   519 ;;
   520 ;; *************** function _main *****************
   521 ;; Defined at:
   522 ;;		line 43 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;  numero          1   59[BANK0 ] unsigned char 
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : B00/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMMON   BANK0   BANK1
   536 ;;      Params:         0       0       0
   537 ;;      Locals:         0       1       0
   538 ;;      Temps:          0       3       0
   539 ;;      Totals:         0       4       0
   540 ;;Total ram usage:        4 bytes
   541 ;; Hardware stack levels required when called: 7
   542 ;; This function calls:
   543 ;;		_UART_init
   544 ;;		_printf
   545 ;; This function is called by:
   546 ;;		Startup code after reset
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550  02AC                     _main:	
   551                           ;psect for function _main
   552                           
   553                           
   554                           ;main.c: 45: UART_init();
   555                           
   556                           ;incstack = 0
   557                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   558  02AC  118A  2300  118A   	fcall	_UART_init
   559                           
   560                           ;main.c: 46: char numero = 0;
   561  02AF  1283               	bcf	3,5	;RP0=0, select bank0
   562  02B0  1303               	bcf	3,6	;RP1=0, select bank0
   563  02B1  01DB               	clrf	main@numero
   564                           
   565                           ;main.c: 48: INTCONbits.GIE = 1;
   566  02B2  178B               	bsf	11,7	;volatile
   567                           
   568                           ;main.c: 49: INTCONbits.PEIE = 1;
   569  02B3  170B               	bsf	11,6	;volatile
   570                           
   571                           ;main.c: 50: INTCONbits.INTE = 1;
   572  02B4  160B               	bsf	11,4	;volatile
   573                           
   574                           ;main.c: 51: PIE1bits.RCIE = 1;
   575  02B5  1683               	bsf	3,5	;RP0=1, select bank1
   576  02B6  1303               	bcf	3,6	;RP1=0, select bank1
   577  02B7  168C               	bsf	12,5	;volatile
   578                           
   579                           ;main.c: 52: OPTION_REGbits.INTEDG = 1;
   580  02B8  1701               	bsf	1,6	;volatile
   581  02B9                     l1130:
   582                           
   583                           ;main.c: 56: printf("El numero es %d\n\r", numero++);
   584  02B9  1283               	bcf	3,5	;RP0=0, select bank0
   585  02BA  1303               	bcf	3,6	;RP1=0, select bank0
   586  02BB  085B               	movf	main@numero,w
   587  02BC  00D8               	movwf	??_main
   588  02BD  01D9               	clrf	??_main+1
   589  02BE  0858               	movf	??_main,w
   590  02BF  00CC               	movwf	?_printf
   591  02C0  0859               	movf	??_main+1,w
   592  02C1  00CD               	movwf	?_printf+1
   593  02C2  303D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   594  02C3  118A  2016  118A   	fcall	_printf
   595  02C6  3001               	movlw	1
   596  02C7  1283               	bcf	3,5	;RP0=0, select bank0
   597  02C8  1303               	bcf	3,6	;RP1=0, select bank0
   598  02C9  00D8               	movwf	??_main
   599  02CA  0858               	movf	??_main,w
   600  02CB  07DB               	addwf	main@numero,f
   601                           
   602                           ;main.c: 57: _delay((unsigned long)((1000)*(20000000/4000.0)));
   603  02CC  301A               	movlw	26
   604  02CD  1283               	bcf	3,5	;RP0=0, select bank0
   605  02CE  1303               	bcf	3,6	;RP1=0, select bank0
   606  02CF  00DA               	movwf	??_main+2
   607  02D0  305E               	movlw	94
   608  02D1  00D9               	movwf	??_main+1
   609  02D2  306E               	movlw	110
   610  02D3  00D8               	movwf	??_main
   611  02D4                     u927:
   612  02D4  0BD8               	decfsz	??_main,f
   613  02D5  2AD4               	goto	u927
   614  02D6  0BD9               	decfsz	??_main+1,f
   615  02D7  2AD4               	goto	u927
   616  02D8  0BDA               	decfsz	??_main+2,f
   617  02D9  2AD4               	goto	u927
   618  02DA  2AB9               	goto	l1130
   619  02DB                     __end_of_main:
   620                           
   621                           	psect	text1
   622  0016                     __ptext1:	
   623 ;; *************** function _printf *****************
   624 ;; Defined at:
   625 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  f               1    wreg     PTR const unsigned char 
   628 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  f               1   52[BANK0 ] PTR const unsigned char 
   631 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
   632 ;;  tmpval          4    0        struct .
   633 ;;  val             2   53[BANK0 ] unsigned int 
   634 ;;  cp              2    0        PTR const unsigned char 
   635 ;;  len             2    0        unsigned int 
   636 ;;  c               1   55[BANK0 ] unsigned char 
   637 ;;  prec            1   51[BANK0 ] char 
   638 ;;  flag            1   50[BANK0 ] unsigned char 
   639 ;;  ap              1   49[BANK0 ] PTR void [1]
   640 ;;		 -> ?_printf(2), 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2   44[BANK0 ] int 
   643 ;; Registers used:
   644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1
   650 ;;      Params:         0       2       0
   651 ;;      Locals:         0       7       0
   652 ;;      Temps:          0       3       0
   653 ;;      Totals:         0      12       0
   654 ;;Total ram usage:       12 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 6
   657 ;; This function calls:
   658 ;;		___lwdiv
   659 ;;		___lwmod
   660 ;;		_putch
   661 ;; This function is called by:
   662 ;;		_main
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666  0016                     _printf:	
   667                           ;psect for function _printf
   668                           
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   672                           ;printf@f stored from wreg
   673  0016  1283               	bcf	3,5	;RP0=0, select bank0
   674  0017  1303               	bcf	3,6	;RP1=0, select bank0
   675  0018  00D4               	movwf	printf@f
   676                           
   677                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   678  0019  304C               	movlw	(low (?_printf| 0))& (0+255)
   679  001A  00CE               	movwf	??_printf
   680  001B  084E               	movf	??_printf,w
   681  001C  00D1               	movwf	printf@ap
   682  001D                     l1044:	
   683                           ;doprnt.c: 553: while((c = *f++)) {
   684                           
   685  001D  3001               	movlw	1
   686  001E  1283               	bcf	3,5	;RP0=0, select bank0
   687  001F  1303               	bcf	3,6	;RP1=0, select bank0
   688  0020  07D4               	addwf	printf@f,f
   689  0021  30FF               	movlw	-1
   690  0022  0754               	addwf	printf@f,w
   691  0023  0084               	movwf	4
   692  0024  118A  2174  118A   	fcall	stringdir
   693  0027  00CE               	movwf	??_printf
   694  0028  084E               	movf	??_printf,w
   695  0029  00D7               	movwf	printf@c
   696  002A  0857               	movf	printf@c,w
   697  002B  1903               	btfsc	3,2
   698  002C  0008               	return
   699                           
   700                           ;doprnt.c: 555: if(c != '%')
   701  002D  3025               	movlw	37
   702  002E  0657               	xorwf	printf@c,w
   703  002F  1903               	btfsc	3,2
   704  0030  2836               	goto	l1004
   705                           
   706                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
   707  0031  0857               	movf	printf@c,w
   708  0032  118A  2327  118A   	fcall	_putch
   709                           
   710                           ;doprnt.c: 559: continue;
   711  0035  281D               	goto	l1044
   712  0036                     l1004:
   713                           
   714                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   715  0036  01D2               	clrf	printf@flag
   716                           
   717                           ;doprnt.c: 661: switch(c = *f++) {
   718  0037  3001               	movlw	1
   719  0038  07D4               	addwf	printf@f,f
   720  0039  30FF               	movlw	-1
   721  003A  0754               	addwf	printf@f,w
   722  003B  0084               	movwf	4
   723  003C  118A  2174  118A   	fcall	stringdir
   724  003F  00D7               	movwf	printf@c
   725                           
   726                           ; Switch size 1, requested type "simple"
   727                           ; Number of cases is 3, Range of values is 0 to 105
   728                           ; switch strategies available:
   729                           ; Name         Instructions Cycles
   730                           ; simple_byte           10     6 (average)
   731                           ; direct_byte          219     7 (fixed)
   732                           ; jumptable            260     6 (fixed)
   733                           ;	Chosen strategy is simple_byte
   734  0040  3A00               	xorlw	0	; case 0
   735  0041  1903               	skipnz
   736  0042  28C4               	goto	l175
   737  0043  3A64               	xorlw	100	; case 100
   738  0044  1903               	skipnz
   739  0045  284A               	goto	l1010
   740  0046  3A0D               	xorlw	13	; case 105
   741  0047  1903               	skipnz
   742  0048  284A               	goto	l1010
   743  0049  281D               	goto	l1044
   744  004A                     l1010:
   745                           
   746                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
   747  004A  0851               	movf	printf@ap,w
   748  004B  0084               	movwf	4
   749  004C  1383               	bcf	3,7	;select IRP bank0
   750  004D  0800               	movf	0,w
   751  004E  00D5               	movwf	printf@val
   752  004F  0A84               	incf	4,f
   753  0050  0800               	movf	0,w
   754  0051  00D6               	movwf	printf@val+1
   755  0052  3002               	movlw	2
   756  0053  00CE               	movwf	??_printf
   757  0054  084E               	movf	??_printf,w
   758  0055  07D1               	addwf	printf@ap,f
   759                           
   760                           ;doprnt.c: 1287: if((int)val < 0) {
   761  0056  1FD6               	btfss	printf@val+1,7
   762  0057  2861               	goto	l1020
   763                           
   764                           ;doprnt.c: 1288: flag |= 0x03;
   765  0058  3003               	movlw	3
   766  0059  00CE               	movwf	??_printf
   767  005A  084E               	movf	??_printf,w
   768  005B  04D2               	iorwf	printf@flag,f
   769                           
   770                           ;doprnt.c: 1289: val = -val;
   771  005C  09D5               	comf	printf@val,f
   772  005D  09D6               	comf	printf@val+1,f
   773  005E  0AD5               	incf	printf@val,f
   774  005F  1903               	skipnz
   775  0060  0AD6               	incf	printf@val+1,f
   776  0061                     l1020:
   777                           
   778                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
   779  0061  01D7               	clrf	printf@c
   780  0062  0AD7               	incf	printf@c,f
   781  0063                     l1026:
   782                           
   783                           ;doprnt.c: 1332: if(val < dpowers[c])
   784  0063  0857               	movf	printf@c,w
   785  0064  00CE               	movwf	??_printf
   786  0065  074E               	addwf	??_printf,w
   787  0066  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   788  0067  0084               	movwf	4
   789  0068  118A  2174  118A   	fcall	stringdir
   790  006B  00CF               	movwf	??_printf+1
   791  006C  118A  2174  118A   	fcall	stringdir
   792  006F  00D0               	movwf	??_printf+2
   793  0070  0850               	movf	??_printf+2,w
   794  0071  0256               	subwf	printf@val+1,w
   795  0072  1D03               	skipz
   796  0073  2876               	goto	u775
   797  0074  084F               	movf	??_printf+1,w
   798  0075  0255               	subwf	printf@val,w
   799  0076                     u775:
   800  0076  1C03               	btfss	3,0
   801  0077  2880               	goto	l1032
   802  0078  3001               	movlw	1
   803  0079  00CE               	movwf	??_printf
   804  007A  084E               	movf	??_printf,w
   805  007B  07D7               	addwf	printf@c,f
   806  007C  3005               	movlw	5
   807  007D  0657               	xorwf	printf@c,w
   808  007E  1D03               	btfss	3,2
   809  007F  2863               	goto	l1026
   810  0080                     l1032:
   811                           
   812                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
   813  0080  0852               	movf	printf@flag,w
   814  0081  3903               	andlw	3
   815  0082  1903               	btfsc	3,2
   816  0083  2888               	goto	l1036
   817                           
   818                           ;doprnt.c: 1465: (putch('-') );
   819  0084  302D               	movlw	45
   820  0085  118A  2327  118A   	fcall	_putch
   821  0088                     l1036:
   822                           
   823                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   824  0088  1283               	bcf	3,5	;RP0=0, select bank0
   825  0089  1303               	bcf	3,6	;RP1=0, select bank0
   826  008A  0857               	movf	printf@c,w
   827  008B  00CE               	movwf	??_printf
   828  008C  084E               	movf	??_printf,w
   829  008D  00D3               	movwf	printf@prec
   830  008E                     l1042:	
   831                           ;doprnt.c: 1500: while(prec--) {
   832                           
   833  008E  30FF               	movlw	255
   834  008F  1283               	bcf	3,5	;RP0=0, select bank0
   835  0090  1303               	bcf	3,6	;RP1=0, select bank0
   836  0091  00CE               	movwf	??_printf
   837  0092  084E               	movf	??_printf,w
   838  0093  07D3               	addwf	printf@prec,f
   839  0094  0A53               	incf	printf@prec,w
   840  0095  1903               	btfsc	3,2
   841  0096  281D               	goto	l1044
   842                           
   843                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   844  0097  300A               	movlw	10
   845  0098  00C6               	movwf	___lwmod@divisor
   846  0099  3000               	movlw	0
   847  009A  00C7               	movwf	___lwmod@divisor+1
   848  009B  0853               	movf	printf@prec,w
   849  009C  00CE               	movwf	??_printf
   850  009D  074E               	addwf	??_printf,w
   851  009E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   852  009F  0084               	movwf	4
   853  00A0  118A  2174  118A   	fcall	stringdir
   854  00A3  00BE               	movwf	___lwdiv@divisor
   855  00A4  118A  2174  118A   	fcall	stringdir
   856  00A7  00BF               	movwf	___lwdiv@divisor+1
   857  00A8  0856               	movf	printf@val+1,w
   858  00A9  00C1               	movwf	___lwdiv@dividend+1
   859  00AA  0855               	movf	printf@val,w
   860  00AB  00C0               	movwf	___lwdiv@dividend
   861  00AC  118A  21C8  118A   	fcall	___lwdiv
   862  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   863  00B0  1303               	bcf	3,6	;RP1=0, select bank0
   864  00B1  083F               	movf	?___lwdiv+1,w
   865  00B2  00C9               	movwf	___lwmod@dividend+1
   866  00B3  083E               	movf	?___lwdiv,w
   867  00B4  00C8               	movwf	___lwmod@dividend
   868  00B5  118A  2244  118A   	fcall	___lwmod
   869  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   870  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   871  00BA  0846               	movf	?___lwmod,w
   872  00BB  3E30               	addlw	48
   873  00BC  00CF               	movwf	??_printf+1
   874  00BD  084F               	movf	??_printf+1,w
   875  00BE  00D7               	movwf	printf@c
   876                           
   877                           ;doprnt.c: 1549: };doprnt.c: 1550: (putch(c) );
   878  00BF  0857               	movf	printf@c,w
   879  00C0  118A  2327  118A   	fcall	_putch
   880  00C3  288E               	goto	l1042
   881  00C4                     l175:
   882  00C4  0008               	return
   883  00C5                     __end_of_printf:
   884                           
   885                           	psect	text2
   886  0327                     __ptext2:	
   887 ;; *************** function _putch *****************
   888 ;; Defined at:
   889 ;;		line 55 in file "UART.h"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  txDato          1    wreg     unsigned char 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  txDato          1   31[BANK0 ] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0, pclath, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1
   903 ;;      Params:         0       0       0
   904 ;;      Locals:         0       1       0
   905 ;;      Temps:          0       0       0
   906 ;;      Totals:         0       1       0
   907 ;;Total ram usage:        1 bytes
   908 ;; Hardware stack levels used: 1
   909 ;; Hardware stack levels required when called: 5
   910 ;; This function calls:
   911 ;;		_UART_write
   912 ;; This function is called by:
   913 ;;		_printf
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917  0327                     _putch:	
   918                           ;psect for function _putch
   919                           
   920                           
   921                           ;incstack = 0
   922                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
   923                           ;putch@txDato stored from wreg
   924  0327  1283               	bcf	3,5	;RP0=0, select bank0
   925  0328  1303               	bcf	3,6	;RP1=0, select bank0
   926  0329  00BF               	movwf	putch@txDato
   927                           
   928                           ;UART.h: 57: UART_write(txDato);
   929  032A  083F               	movf	putch@txDato,w
   930  032B  118A  2313         	fcall	_UART_write
   931  032D  0008               	return
   932  032E                     __end_of_putch:
   933                           
   934                           	psect	text3
   935  0313                     __ptext3:	
   936 ;; *************** function _UART_write *****************
   937 ;; Defined at:
   938 ;;		line 39 in file "UART.h"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  dato            1    wreg     unsigned char 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  dato            1   30[BANK0 ] unsigned char 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1
   952 ;;      Params:         0       0       0
   953 ;;      Locals:         0       1       0
   954 ;;      Temps:          0       0       0
   955 ;;      Totals:         0       1       0
   956 ;;Total ram usage:        1 bytes
   957 ;; Hardware stack levels used: 1
   958 ;; Hardware stack levels required when called: 4
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_putch
   963 ;;		_UART_printf
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967  0313                     _UART_write:	
   968                           ;psect for function _UART_write
   969                           
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _UART_write: [wreg]
   973                           ;UART_write@dato stored from wreg
   974  0313  1283               	bcf	3,5	;RP0=0, select bank0
   975  0314  1303               	bcf	3,6	;RP1=0, select bank0
   976  0315  00BE               	movwf	UART_write@dato
   977                           
   978                           ;UART.h: 41: TXREG = dato;
   979  0316  083E               	movf	UART_write@dato,w
   980  0317  0099               	movwf	25	;volatile
   981  0318                     l35:	
   982                           ;UART.h: 42: while(TXSTAbits.TRMT == 0);
   983                           
   984  0318  1683               	bsf	3,5	;RP0=1, select bank1
   985  0319  1303               	bcf	3,6	;RP1=0, select bank1
   986  031A  1898               	btfsc	24,1	;volatile
   987  031B  0008               	return
   988  031C  2B18               	goto	l35
   989  031D                     __end_of_UART_write:
   990                           
   991                           	psect	text4
   992  0244                     __ptext4:	
   993 ;; *************** function ___lwmod *****************
   994 ;; Defined at:
   995 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  divisor         2   38[BANK0 ] unsigned int 
   998 ;;  dividend        2   40[BANK0 ] unsigned int 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  counter         1   43[BANK0 ] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2   38[BANK0 ] unsigned int 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1
  1010 ;;      Params:         0       4       0
  1011 ;;      Locals:         0       1       0
  1012 ;;      Temps:          0       1       0
  1013 ;;      Totals:         0       6       0
  1014 ;;Total ram usage:        6 bytes
  1015 ;; Hardware stack levels used: 1
  1016 ;; Hardware stack levels required when called: 4
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_printf
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024  0244                     ___lwmod:	
  1025                           ;psect for function ___lwmod
  1026                           
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1030  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0246  0846               	movf	___lwmod@divisor,w
  1033  0247  0447               	iorwf	___lwmod@divisor+1,w
  1034  0248  1903               	btfsc	3,2
  1035  0249  2A73               	goto	l934
  1036  024A  01CB               	clrf	___lwmod@counter
  1037  024B  0ACB               	incf	___lwmod@counter,f
  1038  024C                     l924:
  1039  024C  1BC7               	btfsc	___lwmod@divisor+1,7
  1040  024D  2A5A               	goto	l926
  1041  024E  3001               	movlw	1
  1042  024F                     u575:
  1043  024F  1003               	clrc
  1044  0250  0DC6               	rlf	___lwmod@divisor,f
  1045  0251  0DC7               	rlf	___lwmod@divisor+1,f
  1046  0252  3EFF               	addlw	-1
  1047  0253  1D03               	skipz
  1048  0254  2A4F               	goto	u575
  1049  0255  3001               	movlw	1
  1050  0256  00CA               	movwf	??___lwmod
  1051  0257  084A               	movf	??___lwmod,w
  1052  0258  07CB               	addwf	___lwmod@counter,f
  1053  0259  2A4C               	goto	l924
  1054  025A                     l926:
  1055  025A  0847               	movf	___lwmod@divisor+1,w
  1056  025B  0249               	subwf	___lwmod@dividend+1,w
  1057  025C  1D03               	skipz
  1058  025D  2A60               	goto	u595
  1059  025E  0846               	movf	___lwmod@divisor,w
  1060  025F  0248               	subwf	___lwmod@dividend,w
  1061  0260                     u595:
  1062  0260  1C03               	skipc
  1063  0261  2A68               	goto	l930
  1064  0262  0846               	movf	___lwmod@divisor,w
  1065  0263  02C8               	subwf	___lwmod@dividend,f
  1066  0264  0847               	movf	___lwmod@divisor+1,w
  1067  0265  1C03               	skipc
  1068  0266  03C9               	decf	___lwmod@dividend+1,f
  1069  0267  02C9               	subwf	___lwmod@dividend+1,f
  1070  0268                     l930:
  1071  0268  3001               	movlw	1
  1072  0269                     u605:
  1073  0269  1003               	clrc
  1074  026A  0CC7               	rrf	___lwmod@divisor+1,f
  1075  026B  0CC6               	rrf	___lwmod@divisor,f
  1076  026C  3EFF               	addlw	-1
  1077  026D  1D03               	skipz
  1078  026E  2A69               	goto	u605
  1079  026F  3001               	movlw	1
  1080  0270  02CB               	subwf	___lwmod@counter,f
  1081  0271  1D03               	btfss	3,2
  1082  0272  2A5A               	goto	l926
  1083  0273                     l934:
  1084  0273  0849               	movf	___lwmod@dividend+1,w
  1085  0274  00C7               	movwf	?___lwmod+1
  1086  0275  0848               	movf	___lwmod@dividend,w
  1087  0276  00C6               	movwf	?___lwmod
  1088  0277  0008               	return
  1089  0278                     __end_of___lwmod:
  1090                           
  1091                           	psect	text5
  1092  01C8                     __ptext5:	
  1093 ;; *************** function ___lwdiv *****************
  1094 ;; Defined at:
  1095 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  divisor         2   30[BANK0 ] unsigned int 
  1098 ;;  dividend        2   32[BANK0 ] unsigned int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  quotient        2   35[BANK0 ] unsigned int 
  1101 ;;  counter         1   37[BANK0 ] unsigned char 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  2   30[BANK0 ] unsigned int 
  1104 ;; Registers used:
  1105 ;;		wreg, status,2, status,0
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1
  1111 ;;      Params:         0       4       0
  1112 ;;      Locals:         0       3       0
  1113 ;;      Temps:          0       1       0
  1114 ;;      Totals:         0       8       0
  1115 ;;Total ram usage:        8 bytes
  1116 ;; Hardware stack levels used: 1
  1117 ;; Hardware stack levels required when called: 4
  1118 ;; This function calls:
  1119 ;;		Nothing
  1120 ;; This function is called by:
  1121 ;;		_printf
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125  01C8                     ___lwdiv:	
  1126                           ;psect for function ___lwdiv
  1127                           
  1128                           
  1129                           ;incstack = 0
  1130                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1131  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1132  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1133  01CA  01C3               	clrf	___lwdiv@quotient
  1134  01CB  01C4               	clrf	___lwdiv@quotient+1
  1135  01CC  083E               	movf	___lwdiv@divisor,w
  1136  01CD  043F               	iorwf	___lwdiv@divisor+1,w
  1137  01CE  1903               	btfsc	3,2
  1138  01CF  2A01               	goto	l912
  1139  01D0  01C5               	clrf	___lwdiv@counter
  1140  01D1  0AC5               	incf	___lwdiv@counter,f
  1141  01D2                     l900:
  1142  01D2  1BBF               	btfsc	___lwdiv@divisor+1,7
  1143  01D3  29E0               	goto	l902
  1144  01D4  3001               	movlw	1
  1145  01D5                     u505:
  1146  01D5  1003               	clrc
  1147  01D6  0DBE               	rlf	___lwdiv@divisor,f
  1148  01D7  0DBF               	rlf	___lwdiv@divisor+1,f
  1149  01D8  3EFF               	addlw	-1
  1150  01D9  1D03               	skipz
  1151  01DA  29D5               	goto	u505
  1152  01DB  3001               	movlw	1
  1153  01DC  00C2               	movwf	??___lwdiv
  1154  01DD  0842               	movf	??___lwdiv,w
  1155  01DE  07C5               	addwf	___lwdiv@counter,f
  1156  01DF  29D2               	goto	l900
  1157  01E0                     l902:
  1158  01E0  3001               	movlw	1
  1159  01E1                     u525:
  1160  01E1  1003               	clrc
  1161  01E2  0DC3               	rlf	___lwdiv@quotient,f
  1162  01E3  0DC4               	rlf	___lwdiv@quotient+1,f
  1163  01E4  3EFF               	addlw	-1
  1164  01E5  1D03               	skipz
  1165  01E6  29E1               	goto	u525
  1166  01E7  083F               	movf	___lwdiv@divisor+1,w
  1167  01E8  0241               	subwf	___lwdiv@dividend+1,w
  1168  01E9  1D03               	skipz
  1169  01EA  29ED               	goto	u535
  1170  01EB  083E               	movf	___lwdiv@divisor,w
  1171  01EC  0240               	subwf	___lwdiv@dividend,w
  1172  01ED                     u535:
  1173  01ED  1C03               	skipc
  1174  01EE  29F6               	goto	l908
  1175  01EF  083E               	movf	___lwdiv@divisor,w
  1176  01F0  02C0               	subwf	___lwdiv@dividend,f
  1177  01F1  083F               	movf	___lwdiv@divisor+1,w
  1178  01F2  1C03               	skipc
  1179  01F3  03C1               	decf	___lwdiv@dividend+1,f
  1180  01F4  02C1               	subwf	___lwdiv@dividend+1,f
  1181  01F5  1443               	bsf	___lwdiv@quotient,0
  1182  01F6                     l908:
  1183  01F6  3001               	movlw	1
  1184  01F7                     u545:
  1185  01F7  1003               	clrc
  1186  01F8  0CBF               	rrf	___lwdiv@divisor+1,f
  1187  01F9  0CBE               	rrf	___lwdiv@divisor,f
  1188  01FA  3EFF               	addlw	-1
  1189  01FB  1D03               	skipz
  1190  01FC  29F7               	goto	u545
  1191  01FD  3001               	movlw	1
  1192  01FE  02C5               	subwf	___lwdiv@counter,f
  1193  01FF  1D03               	btfss	3,2
  1194  0200  29E0               	goto	l902
  1195  0201                     l912:
  1196  0201  0844               	movf	___lwdiv@quotient+1,w
  1197  0202  00BF               	movwf	?___lwdiv+1
  1198  0203  0843               	movf	___lwdiv@quotient,w
  1199  0204  00BE               	movwf	?___lwdiv
  1200  0205  0008               	return
  1201  0206                     __end_of___lwdiv:
  1202                           
  1203                           	psect	text6
  1204  0300                     __ptext6:	
  1205 ;; *************** function _UART_init *****************
  1206 ;; Defined at:
  1207 ;;		line 17 in file "UART.h"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1
  1221 ;;      Params:         0       0       0
  1222 ;;      Locals:         0       0       0
  1223 ;;      Temps:          0       0       0
  1224 ;;      Totals:         0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; Hardware stack levels required when called: 4
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235  0300                     _UART_init:	
  1236                           ;psect for function _UART_init
  1237                           
  1238                           
  1239                           ;UART.h: 19: TRISCbits.TRISC7 = 1;
  1240                           
  1241                           ;incstack = 0
  1242                           ; Regs used in _UART_init: [wreg]
  1243  0300  1683               	bsf	3,5	;RP0=1, select bank1
  1244  0301  1303               	bcf	3,6	;RP1=0, select bank1
  1245  0302  1787               	bsf	7,7	;volatile
  1246                           
  1247                           ;UART.h: 20: TRISCbits.TRISC6 = 0;
  1248  0303  1307               	bcf	7,6	;volatile
  1249                           
  1250                           ;UART.h: 22: TXSTAbits.SYNC = 0;
  1251  0304  1218               	bcf	24,4	;volatile
  1252                           
  1253                           ;UART.h: 23: TXSTAbits.TX9 = 0;
  1254  0305  1318               	bcf	24,6	;volatile
  1255                           
  1256                           ;UART.h: 24: TXSTAbits.BRGH = 1;
  1257  0306  1518               	bsf	24,2	;volatile
  1258                           
  1259                           ;UART.h: 25: SPBRG = 129;
  1260  0307  3081               	movlw	129
  1261  0308  0099               	movwf	25	;volatile
  1262                           
  1263                           ;UART.h: 26: RCSTAbits.SPEN = 1;
  1264  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1265  030A  1303               	bcf	3,6	;RP1=0, select bank0
  1266  030B  1798               	bsf	24,7	;volatile
  1267                           
  1268                           ;UART.h: 27: TXSTAbits.TXEN = 1;
  1269  030C  1683               	bsf	3,5	;RP0=1, select bank1
  1270  030D  1303               	bcf	3,6	;RP1=0, select bank1
  1271  030E  1698               	bsf	24,5	;volatile
  1272                           
  1273                           ;UART.h: 28: RCSTAbits.CREN = 1;
  1274  030F  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0310  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0311  1618               	bsf	24,4	;volatile
  1277  0312  0008               	return
  1278  0313                     __end_of_UART_init:
  1279                           
  1280                           	psect	text7
  1281  02DB                     __ptext7:	
  1282 ;; *************** function _Interrupcion *****************
  1283 ;; Defined at:
  1284 ;;		line 29 in file "main.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  dataRX          1   29[BANK0 ] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMMON   BANK0   BANK1
  1298 ;;      Params:         0       0       0
  1299 ;;      Locals:         0       1       0
  1300 ;;      Temps:          0       5       0
  1301 ;;      Totals:         0       6       0
  1302 ;;Total ram usage:        6 bytes
  1303 ;; Hardware stack levels used: 1
  1304 ;; Hardware stack levels required when called: 3
  1305 ;; This function calls:
  1306 ;;		i1_UART_write
  1307 ;;		i1_printf
  1308 ;; This function is called by:
  1309 ;;		Interrupt level 1
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313  02DB                     _Interrupcion:	
  1314                           ;psect for function _Interrupcion
  1315                           
  1316                           
  1317                           ;main.c: 31: if(INTCONbits.INTF == 1){
  1318  02DB  1C8B               	btfss	11,1	;volatile
  1319  02DC  2AE3               	goto	i1l52
  1320                           
  1321                           ;main.c: 32: printf("Interupcion en RB0 \n\r");
  1322  02DD  3027               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1323  02DE  118A  20C5  118A   	fcall	i1_printf
  1324                           
  1325                           ;main.c: 33: INTCONbits.INTF = 0;
  1326  02E1  108B               	bcf	11,1	;volatile
  1327                           
  1328                           ;main.c: 34: }else if(PIR1bits.RCIF == 1){
  1329  02E2  2AF4               	goto	i1l55
  1330  02E3                     i1l52:
  1331  02E3  1E8C               	btfss	12,5	;volatile
  1332  02E4  2AF4               	goto	i1l55
  1333                           
  1334                           ;main.c: 36: char dataRX = RCREG;
  1335  02E5  081A               	movf	26,w	;volatile
  1336  02E6  00B8               	movwf	??_Interrupcion
  1337  02E7  0838               	movf	??_Interrupcion,w
  1338  02E8  00BD               	movwf	Interrupcion@dataRX
  1339                           
  1340                           ;main.c: 37: UART_write(dataRX);
  1341  02E9  083D               	movf	Interrupcion@dataRX,w
  1342  02EA  118A  231D  118A   	fcall	i1_UART_write
  1343                           
  1344                           ;main.c: 38: printf(" Interupcion en RX USART \n\r");
  1345  02ED  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1346  02EE  118A  20C5  118A   	fcall	i1_printf
  1347                           
  1348                           ;main.c: 39: PIR1bits.RCIF = 0;
  1349  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1350  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1351  02F3  128C               	bcf	12,5	;volatile
  1352  02F4                     i1l55:
  1353  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1354  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1355  02F6  083C               	movf	??_Interrupcion+4,w
  1356  02F7  083B               	movf	??_Interrupcion+3,w
  1357  02F8  008A               	movwf	10
  1358  02F9  083A               	movf	??_Interrupcion+2,w
  1359  02FA  0084               	movwf	4
  1360  02FB  0E39               	swapf	??_Interrupcion+1,w
  1361  02FC  0083               	movwf	3
  1362  02FD  0EFE               	swapf	126,f
  1363  02FE  0E7E               	swapf	126,w
  1364  02FF  0009               	retfie
  1365  0300                     __end_of_Interrupcion:
  1366                           
  1367                           	psect	intentry
  1368  0004                     __pintentry:	
  1369                           ;incstack = 0
  1370                           ; Regs used in _Interrupcion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1371                           
  1372  0004                     interrupt_function:
  1373  007E                     saved_w	set	btemp
  1374  0004  00FE               	movwf	btemp
  1375  0005  0E03               	swapf	3,w
  1376  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0008  00B9               	movwf	??_Interrupcion+1
  1379  0009  0804               	movf	4,w
  1380  000A  00BA               	movwf	??_Interrupcion+2
  1381  000B  080A               	movf	10,w
  1382  000C  00BB               	movwf	??_Interrupcion+3
  1383  000D  087F               	movf	btemp+1,w
  1384  000E  00BC               	movwf	??_Interrupcion+4
  1385  000F  118A  2ADB         	ljmp	_Interrupcion
  1386                           
  1387                           	psect	text8
  1388  00C5                     __ptext8:	
  1389 ;; *************** function i1_printf *****************
  1390 ;; Defined at:
  1391 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  f               1    wreg     PTR const unsigned char 
  1394 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  f               1   19[BANK0 ] PTR const unsigned char 
  1397 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
  1398 ;;  tmpval          4    0        struct .
  1399 ;;  val             2   21[BANK0 ] unsigned int 
  1400 ;;  cp              2    0        PTR const unsigned char 
  1401 ;;  len             2    0        unsigned int 
  1402 ;;  c               1   23[BANK0 ] unsigned char 
  1403 ;;  prec            1   20[BANK0 ] char 
  1404 ;;  flag            1   18[BANK0 ] unsigned char 
  1405 ;;  ap              1   17[BANK0 ] PTR void [1]
  1406 ;;		 -> ?i1_printf(2), ?_printf(2), 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  2    0[None  ] int 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1
  1416 ;;      Params:         0       0       0
  1417 ;;      Locals:         0       7       0
  1418 ;;      Temps:          0       3       0
  1419 ;;      Totals:         0      10       0
  1420 ;;Total ram usage:       10 bytes
  1421 ;; Hardware stack levels used: 1
  1422 ;; Hardware stack levels required when called: 2
  1423 ;; This function calls:
  1424 ;;		i1___lwdiv
  1425 ;;		i1___lwmod
  1426 ;;		i1_putch
  1427 ;; This function is called by:
  1428 ;;		_Interrupcion
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432  00C5                     i1_printf:	
  1433                           ;psect for function i1_printf
  1434                           
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in i1_printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1438                           ;i1printf@f stored from wreg
  1439  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1440  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1441  00C7  00B3               	movwf	i1printf@f
  1442                           
  1443                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  1444  00C8  3020               	movlw	(low (?i1_printf| 0))& (0+255)
  1445  00C9  00AE               	movwf	??i1_printf
  1446  00CA  082E               	movf	??i1_printf,w
  1447  00CB  00B1               	movwf	i1printf@ap
  1448  00CC                     i1l1092:	
  1449                           ;doprnt.c: 553: while((c = *f++)) {
  1450                           
  1451  00CC  3001               	movlw	1
  1452  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1453  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1454  00CF  07B3               	addwf	i1printf@f,f
  1455  00D0  30FF               	movlw	-1
  1456  00D1  0733               	addwf	i1printf@f,w
  1457  00D2  0084               	movwf	4
  1458  00D3  118A  2174  118A   	fcall	stringdir
  1459  00D6  00AE               	movwf	??i1_printf
  1460  00D7  082E               	movf	??i1_printf,w
  1461  00D8  00B7               	movwf	i1printf@c
  1462  00D9  0837               	movf	i1printf@c,w
  1463  00DA  1903               	btfsc	3,2
  1464  00DB  0008               	return
  1465                           
  1466                           ;doprnt.c: 555: if(c != '%')
  1467  00DC  3025               	movlw	37
  1468  00DD  0637               	xorwf	i1printf@c,w
  1469  00DE  1903               	btfsc	3,2
  1470  00DF  28E5               	goto	i1l1052
  1471                           
  1472                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  1473  00E0  0837               	movf	i1printf@c,w
  1474  00E1  118A  232E  118A   	fcall	i1_putch
  1475                           
  1476                           ;doprnt.c: 559: continue;
  1477  00E4  28CC               	goto	i1l1092
  1478  00E5                     i1l1052:
  1479                           
  1480                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1481  00E5  01B2               	clrf	i1printf@flag
  1482                           
  1483                           ;doprnt.c: 661: switch(c = *f++) {
  1484  00E6  3001               	movlw	1
  1485  00E7  07B3               	addwf	i1printf@f,f
  1486  00E8  30FF               	movlw	-1
  1487  00E9  0733               	addwf	i1printf@f,w
  1488  00EA  0084               	movwf	4
  1489  00EB  118A  2174  118A   	fcall	stringdir
  1490  00EE  00B7               	movwf	i1printf@c
  1491                           
  1492                           ; Switch size 1, requested type "simple"
  1493                           ; Number of cases is 3, Range of values is 0 to 105
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte           10     6 (average)
  1497                           ; direct_byte          219     7 (fixed)
  1498                           ; jumptable            260     6 (fixed)
  1499                           ;	Chosen strategy is simple_byte
  1500  00EF  3A00               	xorlw	0	; case 0
  1501  00F0  1903               	skipnz
  1502  00F1  2973               	goto	i1l175
  1503  00F2  3A64               	xorlw	100	; case 100
  1504  00F3  1903               	skipnz
  1505  00F4  28F9               	goto	i1l1058
  1506  00F5  3A0D               	xorlw	13	; case 105
  1507  00F6  1903               	skipnz
  1508  00F7  28F9               	goto	i1l1058
  1509  00F8  28CC               	goto	i1l1092
  1510  00F9                     i1l1058:
  1511                           
  1512                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  1513  00F9  0831               	movf	i1printf@ap,w
  1514  00FA  0084               	movwf	4
  1515  00FB  1383               	bcf	3,7	;select IRP bank0
  1516  00FC  0800               	movf	0,w
  1517  00FD  00B5               	movwf	i1printf@val
  1518  00FE  0A84               	incf	4,f
  1519  00FF  0800               	movf	0,w
  1520  0100  00B6               	movwf	i1printf@val+1
  1521  0101  3002               	movlw	2
  1522  0102  00AE               	movwf	??i1_printf
  1523  0103  082E               	movf	??i1_printf,w
  1524  0104  07B1               	addwf	i1printf@ap,f
  1525                           
  1526                           ;doprnt.c: 1287: if((int)val < 0) {
  1527  0105  1FB6               	btfss	i1printf@val+1,7
  1528  0106  2910               	goto	i1l1068
  1529                           
  1530                           ;doprnt.c: 1288: flag |= 0x03;
  1531  0107  3003               	movlw	3
  1532  0108  00AE               	movwf	??i1_printf
  1533  0109  082E               	movf	??i1_printf,w
  1534  010A  04B2               	iorwf	i1printf@flag,f
  1535                           
  1536                           ;doprnt.c: 1289: val = -val;
  1537  010B  09B5               	comf	i1printf@val,f
  1538  010C  09B6               	comf	i1printf@val+1,f
  1539  010D  0AB5               	incf	i1printf@val,f
  1540  010E  1903               	skipnz
  1541  010F  0AB6               	incf	i1printf@val+1,f
  1542  0110                     i1l1068:
  1543                           
  1544                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1545  0110  01B7               	clrf	i1printf@c
  1546  0111  0AB7               	incf	i1printf@c,f
  1547  0112                     i1l1074:
  1548                           
  1549                           ;doprnt.c: 1332: if(val < dpowers[c])
  1550  0112  0837               	movf	i1printf@c,w
  1551  0113  00AE               	movwf	??i1_printf
  1552  0114  072E               	addwf	??i1_printf,w
  1553  0115  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1554  0116  0084               	movwf	4
  1555  0117  118A  2174  118A   	fcall	stringdir
  1556  011A  00AF               	movwf	??i1_printf+1
  1557  011B  118A  2174  118A   	fcall	stringdir
  1558  011E  00B0               	movwf	??i1_printf+2
  1559  011F  0830               	movf	??i1_printf+2,w
  1560  0120  0236               	subwf	i1printf@val+1,w
  1561  0121  1D03               	skipz
  1562  0122  2925               	goto	u84_25
  1563  0123  082F               	movf	??i1_printf+1,w
  1564  0124  0235               	subwf	i1printf@val,w
  1565  0125                     u84_25:
  1566  0125  1C03               	btfss	3,0
  1567  0126  292F               	goto	i1l1080
  1568  0127  3001               	movlw	1
  1569  0128  00AE               	movwf	??i1_printf
  1570  0129  082E               	movf	??i1_printf,w
  1571  012A  07B7               	addwf	i1printf@c,f
  1572  012B  3005               	movlw	5
  1573  012C  0637               	xorwf	i1printf@c,w
  1574  012D  1D03               	btfss	3,2
  1575  012E  2912               	goto	i1l1074
  1576  012F                     i1l1080:
  1577                           
  1578                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  1579  012F  0832               	movf	i1printf@flag,w
  1580  0130  3903               	andlw	3
  1581  0131  1903               	btfsc	3,2
  1582  0132  2937               	goto	i1l1084
  1583                           
  1584                           ;doprnt.c: 1465: (putch('-') );
  1585  0133  302D               	movlw	45
  1586  0134  118A  232E  118A   	fcall	i1_putch
  1587  0137                     i1l1084:
  1588                           
  1589                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1590  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0139  0837               	movf	i1printf@c,w
  1593  013A  00AE               	movwf	??i1_printf
  1594  013B  082E               	movf	??i1_printf,w
  1595  013C  00B4               	movwf	i1printf@prec
  1596  013D                     i1l1090:	
  1597                           ;doprnt.c: 1500: while(prec--) {
  1598                           
  1599  013D  30FF               	movlw	255
  1600  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1601  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0140  00AE               	movwf	??i1_printf
  1603  0141  082E               	movf	??i1_printf,w
  1604  0142  07B4               	addwf	i1printf@prec,f
  1605  0143  0A34               	incf	i1printf@prec,w
  1606  0144  1903               	btfsc	3,2
  1607  0145  28CC               	goto	i1l1092
  1608                           
  1609                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1610  0146  300A               	movlw	10
  1611  0147  00A8               	movwf	i1___lwmod@divisor
  1612  0148  3000               	movlw	0
  1613  0149  00A9               	movwf	i1___lwmod@divisor+1
  1614  014A  0834               	movf	i1printf@prec,w
  1615  014B  00AE               	movwf	??i1_printf
  1616  014C  072E               	addwf	??i1_printf,w
  1617  014D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1618  014E  0084               	movwf	4
  1619  014F  118A  2174  118A   	fcall	stringdir
  1620  0152  00A0               	movwf	i1___lwdiv@divisor
  1621  0153  118A  2174  118A   	fcall	stringdir
  1622  0156  00A1               	movwf	i1___lwdiv@divisor+1
  1623  0157  0836               	movf	i1printf@val+1,w
  1624  0158  00A3               	movwf	i1___lwdiv@dividend+1
  1625  0159  0835               	movf	i1printf@val,w
  1626  015A  00A2               	movwf	i1___lwdiv@dividend
  1627  015B  118A  2206  118A   	fcall	i1___lwdiv
  1628  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1629  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0160  0821               	movf	?i1___lwdiv+1,w
  1631  0161  00AB               	movwf	i1___lwmod@dividend+1
  1632  0162  0820               	movf	?i1___lwdiv,w
  1633  0163  00AA               	movwf	i1___lwmod@dividend
  1634  0164  118A  2278  118A   	fcall	i1___lwmod
  1635  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0169  0828               	movf	?i1___lwmod,w
  1638  016A  3E30               	addlw	48
  1639  016B  00AF               	movwf	??i1_printf+1
  1640  016C  082F               	movf	??i1_printf+1,w
  1641  016D  00B7               	movwf	i1printf@c
  1642                           
  1643                           ;doprnt.c: 1549: };doprnt.c: 1550: (putch(c) );
  1644  016E  0837               	movf	i1printf@c,w
  1645  016F  118A  232E  118A   	fcall	i1_putch
  1646  0172  293D               	goto	i1l1090
  1647  0173                     i1l175:
  1648  0173  0008               	return
  1649  0174                     __end_ofi1_printf:
  1650                           
  1651                           	psect	text9
  1652  032E                     __ptext9:	
  1653 ;; *************** function i1_putch *****************
  1654 ;; Defined at:
  1655 ;;		line 55 in file "UART.h"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  txDato          1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  txDato          1    1[BANK0 ] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, pclath, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1
  1669 ;;      Params:         0       0       0
  1670 ;;      Locals:         0       1       0
  1671 ;;      Temps:          0       0       0
  1672 ;;      Totals:         0       1       0
  1673 ;;Total ram usage:        1 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 1
  1676 ;; This function calls:
  1677 ;;		i1_UART_write
  1678 ;; This function is called by:
  1679 ;;		i1_printf
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683  032E                     i1_putch:	
  1684                           ;psect for function i1_putch
  1685                           
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in i1_putch: [wreg+status,2+status,0+pclath+cstack]
  1689                           ;i1putch@txDato stored from wreg
  1690  032E  1283               	bcf	3,5	;RP0=0, select bank0
  1691  032F  1303               	bcf	3,6	;RP1=0, select bank0
  1692  0330  00A1               	movwf	i1putch@txDato
  1693                           
  1694                           ;UART.h: 57: UART_write(txDato);
  1695  0331  0821               	movf	i1putch@txDato,w
  1696  0332  118A  231D         	fcall	i1_UART_write
  1697  0334  0008               	return
  1698  0335                     __end_ofi1_putch:
  1699                           
  1700                           	psect	text10
  1701  031D                     __ptext10:	
  1702 ;; *************** function i1_UART_write *****************
  1703 ;; Defined at:
  1704 ;;		line 39 in file "UART.h"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  dato            1    wreg     unsigned char 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  dato            1    0[BANK0 ] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1
  1718 ;;      Params:         0       0       0
  1719 ;;      Locals:         0       1       0
  1720 ;;      Temps:          0       0       0
  1721 ;;      Totals:         0       1       0
  1722 ;;Total ram usage:        1 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_Interrupcion
  1728 ;;		i1_putch
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732  031D                     i1_UART_write:	
  1733                           ;psect for function i1_UART_write
  1734                           
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in i1_UART_write: [wreg]
  1738                           ;i1UART_write@dato stored from wreg
  1739  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1740  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1741  031F  00A0               	movwf	i1UART_write@dato
  1742                           
  1743                           ;UART.h: 41: TXREG = dato;
  1744  0320  0820               	movf	i1UART_write@dato,w
  1745  0321  0099               	movwf	25	;volatile
  1746  0322                     i1l35:	
  1747                           ;UART.h: 42: while(TXSTAbits.TRMT == 0);
  1748                           
  1749  0322  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0323  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0324  1898               	btfsc	24,1	;volatile
  1752  0325  0008               	return
  1753  0326  2B22               	goto	i1l35
  1754  0327                     __end_ofi1_UART_write:
  1755                           
  1756                           	psect	text11
  1757  0278                     __ptext11:	
  1758 ;; *************** function i1___lwmod *****************
  1759 ;; Defined at:
  1760 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;  divisor         2    8[BANK0 ] unsigned int 
  1763 ;;  dividend        2   10[BANK0 ] unsigned int 
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  counter         1   13[BANK0 ] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  2    8[BANK0 ] unsigned int 
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1
  1775 ;;      Params:         0       4       0
  1776 ;;      Locals:         0       1       0
  1777 ;;      Temps:          0       1       0
  1778 ;;      Totals:         0       6       0
  1779 ;;Total ram usage:        6 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		i1_printf
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788  0278                     i1___lwmod:	
  1789                           ;psect for function i1___lwmod
  1790                           
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  1794  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1795  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1796  027A  0828               	movf	i1___lwmod@divisor,w
  1797  027B  0429               	iorwf	i1___lwmod@divisor+1,w
  1798  027C  1903               	btfsc	3,2
  1799  027D  2AA7               	goto	i1l984
  1800  027E  01AD               	clrf	i1___lwmod@counter
  1801  027F  0AAD               	incf	i1___lwmod@counter,f
  1802  0280                     i1l974:
  1803  0280  1BA9               	btfsc	i1___lwmod@divisor+1,7
  1804  0281  2A8E               	goto	i1l976
  1805  0282  3001               	movlw	1
  1806  0283                     u70_25:
  1807  0283  1003               	clrc
  1808  0284  0DA8               	rlf	i1___lwmod@divisor,f
  1809  0285  0DA9               	rlf	i1___lwmod@divisor+1,f
  1810  0286  3EFF               	addlw	-1
  1811  0287  1D03               	skipz
  1812  0288  2A83               	goto	u70_25
  1813  0289  3001               	movlw	1
  1814  028A  00AC               	movwf	??i1___lwmod
  1815  028B  082C               	movf	??i1___lwmod,w
  1816  028C  07AD               	addwf	i1___lwmod@counter,f
  1817  028D  2A80               	goto	i1l974
  1818  028E                     i1l976:
  1819  028E  0829               	movf	i1___lwmod@divisor+1,w
  1820  028F  022B               	subwf	i1___lwmod@dividend+1,w
  1821  0290  1D03               	skipz
  1822  0291  2A94               	goto	u72_25
  1823  0292  0828               	movf	i1___lwmod@divisor,w
  1824  0293  022A               	subwf	i1___lwmod@dividend,w
  1825  0294                     u72_25:
  1826  0294  1C03               	skipc
  1827  0295  2A9C               	goto	i1l980
  1828  0296  0828               	movf	i1___lwmod@divisor,w
  1829  0297  02AA               	subwf	i1___lwmod@dividend,f
  1830  0298  0829               	movf	i1___lwmod@divisor+1,w
  1831  0299  1C03               	skipc
  1832  029A  03AB               	decf	i1___lwmod@dividend+1,f
  1833  029B  02AB               	subwf	i1___lwmod@dividend+1,f
  1834  029C                     i1l980:
  1835  029C  3001               	movlw	1
  1836  029D                     u73_25:
  1837  029D  1003               	clrc
  1838  029E  0CA9               	rrf	i1___lwmod@divisor+1,f
  1839  029F  0CA8               	rrf	i1___lwmod@divisor,f
  1840  02A0  3EFF               	addlw	-1
  1841  02A1  1D03               	skipz
  1842  02A2  2A9D               	goto	u73_25
  1843  02A3  3001               	movlw	1
  1844  02A4  02AD               	subwf	i1___lwmod@counter,f
  1845  02A5  1D03               	btfss	3,2
  1846  02A6  2A8E               	goto	i1l976
  1847  02A7                     i1l984:
  1848  02A7  082B               	movf	i1___lwmod@dividend+1,w
  1849  02A8  00A9               	movwf	?i1___lwmod+1
  1850  02A9  082A               	movf	i1___lwmod@dividend,w
  1851  02AA  00A8               	movwf	?i1___lwmod
  1852  02AB  0008               	return
  1853  02AC                     __end_ofi1___lwmod:
  1854                           
  1855                           	psect	text12
  1856  0206                     __ptext12:	
  1857 ;; *************** function i1___lwdiv *****************
  1858 ;; Defined at:
  1859 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  divisor         2    0[BANK0 ] unsigned int 
  1862 ;;  dividend        2    2[BANK0 ] unsigned int 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  quotient        2    5[BANK0 ] unsigned int 
  1865 ;;  counter         1    7[BANK0 ] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2    0[BANK0 ] unsigned int 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1
  1875 ;;      Params:         0       4       0
  1876 ;;      Locals:         0       3       0
  1877 ;;      Temps:          0       1       0
  1878 ;;      Totals:         0       8       0
  1879 ;;Total ram usage:        8 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; This function calls:
  1882 ;;		Nothing
  1883 ;; This function is called by:
  1884 ;;		i1_printf
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888  0206                     i1___lwdiv:	
  1889                           ;psect for function i1___lwdiv
  1890                           
  1891                           
  1892                           ;incstack = 0
  1893                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  1894  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1895  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1896  0208  01A5               	clrf	i1___lwdiv@quotient
  1897  0209  01A6               	clrf	i1___lwdiv@quotient+1
  1898  020A  0820               	movf	i1___lwdiv@divisor,w
  1899  020B  0421               	iorwf	i1___lwdiv@divisor+1,w
  1900  020C  1903               	btfsc	3,2
  1901  020D  2A3F               	goto	i1l962
  1902  020E  01A7               	clrf	i1___lwdiv@counter
  1903  020F  0AA7               	incf	i1___lwdiv@counter,f
  1904  0210                     i1l950:
  1905  0210  1BA1               	btfsc	i1___lwdiv@divisor+1,7
  1906  0211  2A1E               	goto	i1l952
  1907  0212  3001               	movlw	1
  1908  0213                     u63_25:
  1909  0213  1003               	clrc
  1910  0214  0DA0               	rlf	i1___lwdiv@divisor,f
  1911  0215  0DA1               	rlf	i1___lwdiv@divisor+1,f
  1912  0216  3EFF               	addlw	-1
  1913  0217  1D03               	skipz
  1914  0218  2A13               	goto	u63_25
  1915  0219  3001               	movlw	1
  1916  021A  00A4               	movwf	??i1___lwdiv
  1917  021B  0824               	movf	??i1___lwdiv,w
  1918  021C  07A7               	addwf	i1___lwdiv@counter,f
  1919  021D  2A10               	goto	i1l950
  1920  021E                     i1l952:
  1921  021E  3001               	movlw	1
  1922  021F                     u65_25:
  1923  021F  1003               	clrc
  1924  0220  0DA5               	rlf	i1___lwdiv@quotient,f
  1925  0221  0DA6               	rlf	i1___lwdiv@quotient+1,f
  1926  0222  3EFF               	addlw	-1
  1927  0223  1D03               	skipz
  1928  0224  2A1F               	goto	u65_25
  1929  0225  0821               	movf	i1___lwdiv@divisor+1,w
  1930  0226  0223               	subwf	i1___lwdiv@dividend+1,w
  1931  0227  1D03               	skipz
  1932  0228  2A2B               	goto	u66_25
  1933  0229  0820               	movf	i1___lwdiv@divisor,w
  1934  022A  0222               	subwf	i1___lwdiv@dividend,w
  1935  022B                     u66_25:
  1936  022B  1C03               	skipc
  1937  022C  2A34               	goto	i1l958
  1938  022D  0820               	movf	i1___lwdiv@divisor,w
  1939  022E  02A2               	subwf	i1___lwdiv@dividend,f
  1940  022F  0821               	movf	i1___lwdiv@divisor+1,w
  1941  0230  1C03               	skipc
  1942  0231  03A3               	decf	i1___lwdiv@dividend+1,f
  1943  0232  02A3               	subwf	i1___lwdiv@dividend+1,f
  1944  0233  1425               	bsf	i1___lwdiv@quotient,0
  1945  0234                     i1l958:
  1946  0234  3001               	movlw	1
  1947  0235                     u67_25:
  1948  0235  1003               	clrc
  1949  0236  0CA1               	rrf	i1___lwdiv@divisor+1,f
  1950  0237  0CA0               	rrf	i1___lwdiv@divisor,f
  1951  0238  3EFF               	addlw	-1
  1952  0239  1D03               	skipz
  1953  023A  2A35               	goto	u67_25
  1954  023B  3001               	movlw	1
  1955  023C  02A7               	subwf	i1___lwdiv@counter,f
  1956  023D  1D03               	btfss	3,2
  1957  023E  2A1E               	goto	i1l952
  1958  023F                     i1l962:
  1959  023F  0826               	movf	i1___lwdiv@quotient+1,w
  1960  0240  00A1               	movwf	?i1___lwdiv+1
  1961  0241  0825               	movf	i1___lwdiv@quotient,w
  1962  0242  00A0               	movwf	?i1___lwdiv
  1963  0243  0008               	return
  1964  0244                     __end_ofi1___lwdiv:
  1965  007E                     btemp	set	126	;btemp
  1966  007E                     wtemp0	set	126
  1967                           
  1968                           	psect	idloc
  1969                           
  1970                           ;Config register IDLOC0 @ 0x2000
  1971                           ;	unspecified, using default values
  1972  2000                     	org	8192
  1973  2000  3FFF               	dw	16383
  1974                           
  1975                           ;Config register IDLOC1 @ 0x2001
  1976                           ;	unspecified, using default values
  1977  2001                     	org	8193
  1978  2001  3FFF               	dw	16383
  1979                           
  1980                           ;Config register IDLOC2 @ 0x2002
  1981                           ;	unspecified, using default values
  1982  2002                     	org	8194
  1983  2002  3FFF               	dw	16383
  1984                           
  1985                           ;Config register IDLOC3 @ 0x2003
  1986                           ;	unspecified, using default values
  1987  2003                     	org	8195
  1988  2003  3FFF               	dw	16383
  1989                           
  1990                           	psect	config
  1991                           
  1992                           ;Config register CONFIG @ 0x2007
  1993                           ;	Oscillator Selection bits
  1994                           ;	FOSC = HS, HS oscillator
  1995                           ;	Watchdog Timer Enable bit
  1996                           ;	WDTE = OFF, WDT disabled
  1997                           ;	Power-up Timer Enable bit
  1998                           ;	PWRTE = ON, PWRT enabled
  1999                           ;	Brown-out Reset Enable bit
  2000                           ;	BOREN = OFF, BOR disabled
  2001                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2002                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2003                           ;	Data EEPROM Memory Code Protection bit
  2004                           ;	CPD = OFF, Data EEPROM code protection off
  2005                           ;	Flash Program Memory Write Enable bits
  2006                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2007                           ;	In-Circuit Debugger Mode bit
  2008                           ;	DEBUG = 0x1, unprogrammed default
  2009                           ;	Flash Program Memory Code Protection bit
  2010                           ;	CP = OFF, Code protection off
  2011  2007                     	org	8199
  2012  2007  3F32               	dw	16178

Data Sizes:
    Strings     68
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     60      60
    BANK1            94      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_3(CODE[18]), STR_2(CODE[28]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcion in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _putch->_UART_write
    ___lwmod->___lwdiv

Critical Paths under _Interrupcion in BANK0

    _Interrupcion->i1_printf
    i1_printf->i1___lwmod
    i1_putch->i1_UART_write
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupcion in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1068
                                             56 BANK0      4     4      0
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1044
                                             44 BANK0     12    10      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             31 BANK0      1     1      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (3) _UART_write                                           1     1      0      22
                                             30 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                             38 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                             30 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupcion                                         6     6      0     900
                                             24 BANK0      6     6      0
                       i1_UART_write
                           i1_printf
 ---------------------------------------------------------------------------------
 (5) i1_printf                                            18    18      0     855
                                             14 BANK0     10    10      0
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (6) i1_putch                                              1     1      0      44
                                              1 BANK0      1     1      0
                       i1_UART_write
 ---------------------------------------------------------------------------------
 (7) i1_UART_write                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            6     2      4     211
                                              8 BANK0      6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i1___lwdiv                                            8     4      4     214
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _UART_write

 _Interrupcion (ROOT)
   i1_UART_write
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1_putch
       i1_UART_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     3C      3C       4       63.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 16:21:33 2022

                      pc 0002                       l35 0318                       fsr 0004  
                    l175 00C4                      l900 01D2                      l902 01E0  
                    l912 0201                      l930 0268                      l908 01F6  
                    l924 024C                      l926 025A                      l934 0273  
                    u505 01D5                      u525 01E1                      u605 0269  
                    u535 01ED                      u545 01F7                      u575 024F  
                    u595 0260                      u775 0076                      u927 02D4  
                    fsr0 0004                      indf 0000                     l1010 004A  
                   l1020 0061                     l1004 0036                     l1032 0080  
                   l1042 008E                     l1026 0063                     l1130 02B9  
                   l1036 0088                     l1044 001D                     STR_1 01A0  
                   STR_2 0184                     STR_3 01B6                     i1l35 0322  
                   i1l52 02E3                     i1l55 02F4                     _main 02AC  
                   btemp 007E         i1UART_write@dato 0020                     start 0011  
        __end_ofi1_putch 0335                    ?_main 0020          __end_of___lwdiv 0206  
                  i1l175 0173          __end_of___lwmod 0278                    i1l950 0210  
                  i1l952 021E                    i1l962 023F                    i1l980 029C  
                  i1l958 0234                    i1l974 0280                    i1l976 028E  
                  i1l984 02A7                    _RCREG 001A                    _SPBRG 0099  
                  u70_25 0283                    u63_25 0213                    u72_25 0294  
                  u65_25 021F                    u73_25 029D                    u66_25 022B  
                  u67_25 0235                    u84_25 0125                    _TXREG 0019  
     i1___lwmod@dividend 002A          __end_of_dpowers 0184              ?_UART_write 0020  
                  _putch 0327                    pclath 000A            i1putch@txDato 0021  
                  status 0003                    wtemp0 007E         __end_ofi1_printf 0174  
             i1printf@ap 0031          __initialization 0013             __end_of_main 02DB  
                 ??_main 0058                   ?_putch 0020                   i1l1052 00E5  
                 i1l1080 012F                   i1l1090 013D                   i1l1074 0112  
                 i1l1058 00F9                   i1l1084 0137                   i1l1068 0110  
                 i1l1092 00CC                ??i1_putch 0000            ?_Interrupcion 0020  
      __end_of_UART_init 0313                ??___lwdiv 0042                ??___lwmod 004A  
                 _printf 0016        __end_ofi1___lwdiv 0244        __end_ofi1___lwmod 02AC  
                 saved_w 007E           ??_Interrupcion 0038  __end_of__initialization 0013  
            i1printf@val 0035           __pcstackCOMMON 0000            ?i1_UART_write 0020  
          __end_of_putch 032E           _OPTION_REGbits 0081                ?i1_printf 0020  
                ??_putch 0000               __pmaintext 02AC           ??i1_UART_write 0000  
             __pintentry 0004                  ?_printf 004C               ??i1_printf 002E  
           ??_UART_write 0000               __stringtab 0174                  i1_putch 032E  
                ___lwdiv 01C8                  ___lwmod 0244       __end_of_UART_write 031D  
                __ptext1 0016                  __ptext2 0327                  __ptext3 0313  
                __ptext4 0244                  __ptext5 01C8                  __ptext6 0300  
                __ptext7 02DB                  __ptext8 00C5                  __ptext9 032E  
   __end_of_Interrupcion 0300                  _dpowers 017A        i1___lwdiv@divisor 0020  
      i1___lwdiv@counter 0027     end_of_initialization 0013                _RCSTAbits 0018  
                printf@c 0057                  printf@f 0054                _UART_init 0300  
              _TRISCbits 0087                i1___lwdiv 0206                i1___lwmod 0278  
   __end_ofi1_UART_write 0327                _TXSTAbits 0098             i1printf@flag 0032  
             main@numero 005B             i1printf@prec 0034       Interrupcion@dataRX 003D  
      i1___lwmod@divisor 0028               ?_UART_init 0020        i1___lwmod@counter 002D  
         __end_of_printf 00C5      start_initialization 0013                i1printf@c 0037  
              i1printf@f 0033               ?i1___lwdiv 0020               ?i1___lwmod 0028  
            putch@txDato 003F                 ??_printf 004E                ___latbits 0001  
          __pcstackBANK0 0020                 ?i1_putch 0020             _Interrupcion 02DB  
       ___lwdiv@dividend 0040                 ?___lwdiv 003E                 ?___lwmod 0046  
              __pstrings 0174              ??_UART_init 0000         ___lwdiv@quotient 0043  
            ??i1___lwdiv 0024              ??i1___lwmod 002C        interrupt_function 0004  
               _PIE1bits 008C                 _PIR1bits 000C             i1_UART_write 031D  
            __stringbase 0179               printf@flag 0052           UART_write@dato 003E  
             printf@prec 0053                 i1_printf 00C5       __end_of__stringtab 017A  
        ___lwdiv@divisor 003E          ___lwdiv@counter 0045                 __ptext10 031D  
               __ptext11 0278                 __ptext12 0206       i1___lwdiv@dividend 0022  
              printf@val 0055       i1___lwdiv@quotient 0025               _INTCONbits 000B  
               intlevel1 0000         ___lwmod@dividend 0048                stringcode 0174  
               printf@ap 0051          ___lwmod@divisor 0046          ___lwmod@counter 004B  
               stringdir 0174                 stringtab 0174               _UART_write 0313  
